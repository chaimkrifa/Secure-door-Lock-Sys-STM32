
passwordControl.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003c84  08000110  08000110  00010110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000110  08003d94  08003d94  00013d94  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003ea4  08003ea4  00020070  2**0
                  CONTENTS
  4 .ARM          00000000  08003ea4  08003ea4  00020070  2**0
                  CONTENTS
  5 .preinit_array 00000000  08003ea4  08003ea4  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003ea4  08003ea4  00013ea4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003ea8  08003ea8  00013ea8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08003eac  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000144  20000070  08003f1c  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200001b4  08003f1c  000201b4  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000f2c5  00000000  00000000  00020099  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001fb5  00000000  00000000  0002f35e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000f68  00000000  00000000  00031318  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000ea8  00000000  00000000  00032280  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000020a7  00000000  00000000  00033128  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00011813  00000000  00000000  000351cf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008a4a0  00000000  00000000  000469e2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000d0e82  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004634  00000000  00000000  000d0ed4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	20000070 	.word	0x20000070
 800012c:	00000000 	.word	0x00000000
 8000130:	08003d7c 	.word	0x08003d7c

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	20000074 	.word	0x20000074
 800014c:	08003d7c 	.word	0x08003d7c

08000150 <strcmp>:
 8000150:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000154:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000158:	2a01      	cmp	r2, #1
 800015a:	bf28      	it	cs
 800015c:	429a      	cmpcs	r2, r3
 800015e:	d0f7      	beq.n	8000150 <strcmp>
 8000160:	1ad0      	subs	r0, r2, r3
 8000162:	4770      	bx	lr

08000164 <__aeabi_dmul>:
 8000164:	b570      	push	{r4, r5, r6, lr}
 8000166:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800016a:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800016e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000172:	bf1d      	ittte	ne
 8000174:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000178:	ea94 0f0c 	teqne	r4, ip
 800017c:	ea95 0f0c 	teqne	r5, ip
 8000180:	f000 f8de 	bleq	8000340 <__aeabi_dmul+0x1dc>
 8000184:	442c      	add	r4, r5
 8000186:	ea81 0603 	eor.w	r6, r1, r3
 800018a:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800018e:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000192:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000196:	bf18      	it	ne
 8000198:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 800019c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80001a0:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80001a4:	d038      	beq.n	8000218 <__aeabi_dmul+0xb4>
 80001a6:	fba0 ce02 	umull	ip, lr, r0, r2
 80001aa:	f04f 0500 	mov.w	r5, #0
 80001ae:	fbe1 e502 	umlal	lr, r5, r1, r2
 80001b2:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80001b6:	fbe0 e503 	umlal	lr, r5, r0, r3
 80001ba:	f04f 0600 	mov.w	r6, #0
 80001be:	fbe1 5603 	umlal	r5, r6, r1, r3
 80001c2:	f09c 0f00 	teq	ip, #0
 80001c6:	bf18      	it	ne
 80001c8:	f04e 0e01 	orrne.w	lr, lr, #1
 80001cc:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80001d0:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80001d4:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80001d8:	d204      	bcs.n	80001e4 <__aeabi_dmul+0x80>
 80001da:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80001de:	416d      	adcs	r5, r5
 80001e0:	eb46 0606 	adc.w	r6, r6, r6
 80001e4:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80001e8:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80001ec:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80001f0:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80001f4:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80001f8:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80001fc:	bf88      	it	hi
 80001fe:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000202:	d81e      	bhi.n	8000242 <__aeabi_dmul+0xde>
 8000204:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000208:	bf08      	it	eq
 800020a:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800020e:	f150 0000 	adcs.w	r0, r0, #0
 8000212:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000216:	bd70      	pop	{r4, r5, r6, pc}
 8000218:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 800021c:	ea46 0101 	orr.w	r1, r6, r1
 8000220:	ea40 0002 	orr.w	r0, r0, r2
 8000224:	ea81 0103 	eor.w	r1, r1, r3
 8000228:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 800022c:	bfc2      	ittt	gt
 800022e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000232:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000236:	bd70      	popgt	{r4, r5, r6, pc}
 8000238:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800023c:	f04f 0e00 	mov.w	lr, #0
 8000240:	3c01      	subs	r4, #1
 8000242:	f300 80ab 	bgt.w	800039c <__aeabi_dmul+0x238>
 8000246:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800024a:	bfde      	ittt	le
 800024c:	2000      	movle	r0, #0
 800024e:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000252:	bd70      	pople	{r4, r5, r6, pc}
 8000254:	f1c4 0400 	rsb	r4, r4, #0
 8000258:	3c20      	subs	r4, #32
 800025a:	da35      	bge.n	80002c8 <__aeabi_dmul+0x164>
 800025c:	340c      	adds	r4, #12
 800025e:	dc1b      	bgt.n	8000298 <__aeabi_dmul+0x134>
 8000260:	f104 0414 	add.w	r4, r4, #20
 8000264:	f1c4 0520 	rsb	r5, r4, #32
 8000268:	fa00 f305 	lsl.w	r3, r0, r5
 800026c:	fa20 f004 	lsr.w	r0, r0, r4
 8000270:	fa01 f205 	lsl.w	r2, r1, r5
 8000274:	ea40 0002 	orr.w	r0, r0, r2
 8000278:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 800027c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000280:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000284:	fa21 f604 	lsr.w	r6, r1, r4
 8000288:	eb42 0106 	adc.w	r1, r2, r6
 800028c:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000290:	bf08      	it	eq
 8000292:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000296:	bd70      	pop	{r4, r5, r6, pc}
 8000298:	f1c4 040c 	rsb	r4, r4, #12
 800029c:	f1c4 0520 	rsb	r5, r4, #32
 80002a0:	fa00 f304 	lsl.w	r3, r0, r4
 80002a4:	fa20 f005 	lsr.w	r0, r0, r5
 80002a8:	fa01 f204 	lsl.w	r2, r1, r4
 80002ac:	ea40 0002 	orr.w	r0, r0, r2
 80002b0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80002b4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80002b8:	f141 0100 	adc.w	r1, r1, #0
 80002bc:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80002c0:	bf08      	it	eq
 80002c2:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80002c6:	bd70      	pop	{r4, r5, r6, pc}
 80002c8:	f1c4 0520 	rsb	r5, r4, #32
 80002cc:	fa00 f205 	lsl.w	r2, r0, r5
 80002d0:	ea4e 0e02 	orr.w	lr, lr, r2
 80002d4:	fa20 f304 	lsr.w	r3, r0, r4
 80002d8:	fa01 f205 	lsl.w	r2, r1, r5
 80002dc:	ea43 0302 	orr.w	r3, r3, r2
 80002e0:	fa21 f004 	lsr.w	r0, r1, r4
 80002e4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80002e8:	fa21 f204 	lsr.w	r2, r1, r4
 80002ec:	ea20 0002 	bic.w	r0, r0, r2
 80002f0:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80002f4:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80002f8:	bf08      	it	eq
 80002fa:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80002fe:	bd70      	pop	{r4, r5, r6, pc}
 8000300:	f094 0f00 	teq	r4, #0
 8000304:	d10f      	bne.n	8000326 <__aeabi_dmul+0x1c2>
 8000306:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800030a:	0040      	lsls	r0, r0, #1
 800030c:	eb41 0101 	adc.w	r1, r1, r1
 8000310:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000314:	bf08      	it	eq
 8000316:	3c01      	subeq	r4, #1
 8000318:	d0f7      	beq.n	800030a <__aeabi_dmul+0x1a6>
 800031a:	ea41 0106 	orr.w	r1, r1, r6
 800031e:	f095 0f00 	teq	r5, #0
 8000322:	bf18      	it	ne
 8000324:	4770      	bxne	lr
 8000326:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800032a:	0052      	lsls	r2, r2, #1
 800032c:	eb43 0303 	adc.w	r3, r3, r3
 8000330:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000334:	bf08      	it	eq
 8000336:	3d01      	subeq	r5, #1
 8000338:	d0f7      	beq.n	800032a <__aeabi_dmul+0x1c6>
 800033a:	ea43 0306 	orr.w	r3, r3, r6
 800033e:	4770      	bx	lr
 8000340:	ea94 0f0c 	teq	r4, ip
 8000344:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000348:	bf18      	it	ne
 800034a:	ea95 0f0c 	teqne	r5, ip
 800034e:	d00c      	beq.n	800036a <__aeabi_dmul+0x206>
 8000350:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000354:	bf18      	it	ne
 8000356:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800035a:	d1d1      	bne.n	8000300 <__aeabi_dmul+0x19c>
 800035c:	ea81 0103 	eor.w	r1, r1, r3
 8000360:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000364:	f04f 0000 	mov.w	r0, #0
 8000368:	bd70      	pop	{r4, r5, r6, pc}
 800036a:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800036e:	bf06      	itte	eq
 8000370:	4610      	moveq	r0, r2
 8000372:	4619      	moveq	r1, r3
 8000374:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000378:	d019      	beq.n	80003ae <__aeabi_dmul+0x24a>
 800037a:	ea94 0f0c 	teq	r4, ip
 800037e:	d102      	bne.n	8000386 <__aeabi_dmul+0x222>
 8000380:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000384:	d113      	bne.n	80003ae <__aeabi_dmul+0x24a>
 8000386:	ea95 0f0c 	teq	r5, ip
 800038a:	d105      	bne.n	8000398 <__aeabi_dmul+0x234>
 800038c:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000390:	bf1c      	itt	ne
 8000392:	4610      	movne	r0, r2
 8000394:	4619      	movne	r1, r3
 8000396:	d10a      	bne.n	80003ae <__aeabi_dmul+0x24a>
 8000398:	ea81 0103 	eor.w	r1, r1, r3
 800039c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80003a0:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80003a4:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003a8:	f04f 0000 	mov.w	r0, #0
 80003ac:	bd70      	pop	{r4, r5, r6, pc}
 80003ae:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80003b2:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80003b6:	bd70      	pop	{r4, r5, r6, pc}

080003b8 <__aeabi_drsub>:
 80003b8:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80003bc:	e002      	b.n	80003c4 <__adddf3>
 80003be:	bf00      	nop

080003c0 <__aeabi_dsub>:
 80003c0:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080003c4 <__adddf3>:
 80003c4:	b530      	push	{r4, r5, lr}
 80003c6:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80003ca:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80003ce:	ea94 0f05 	teq	r4, r5
 80003d2:	bf08      	it	eq
 80003d4:	ea90 0f02 	teqeq	r0, r2
 80003d8:	bf1f      	itttt	ne
 80003da:	ea54 0c00 	orrsne.w	ip, r4, r0
 80003de:	ea55 0c02 	orrsne.w	ip, r5, r2
 80003e2:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80003e6:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003ea:	f000 80e2 	beq.w	80005b2 <__adddf3+0x1ee>
 80003ee:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80003f2:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80003f6:	bfb8      	it	lt
 80003f8:	426d      	neglt	r5, r5
 80003fa:	dd0c      	ble.n	8000416 <__adddf3+0x52>
 80003fc:	442c      	add	r4, r5
 80003fe:	ea80 0202 	eor.w	r2, r0, r2
 8000402:	ea81 0303 	eor.w	r3, r1, r3
 8000406:	ea82 0000 	eor.w	r0, r2, r0
 800040a:	ea83 0101 	eor.w	r1, r3, r1
 800040e:	ea80 0202 	eor.w	r2, r0, r2
 8000412:	ea81 0303 	eor.w	r3, r1, r3
 8000416:	2d36      	cmp	r5, #54	; 0x36
 8000418:	bf88      	it	hi
 800041a:	bd30      	pophi	{r4, r5, pc}
 800041c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000420:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000424:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000428:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800042c:	d002      	beq.n	8000434 <__adddf3+0x70>
 800042e:	4240      	negs	r0, r0
 8000430:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000434:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000438:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800043c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000440:	d002      	beq.n	8000448 <__adddf3+0x84>
 8000442:	4252      	negs	r2, r2
 8000444:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000448:	ea94 0f05 	teq	r4, r5
 800044c:	f000 80a7 	beq.w	800059e <__adddf3+0x1da>
 8000450:	f1a4 0401 	sub.w	r4, r4, #1
 8000454:	f1d5 0e20 	rsbs	lr, r5, #32
 8000458:	db0d      	blt.n	8000476 <__adddf3+0xb2>
 800045a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800045e:	fa22 f205 	lsr.w	r2, r2, r5
 8000462:	1880      	adds	r0, r0, r2
 8000464:	f141 0100 	adc.w	r1, r1, #0
 8000468:	fa03 f20e 	lsl.w	r2, r3, lr
 800046c:	1880      	adds	r0, r0, r2
 800046e:	fa43 f305 	asr.w	r3, r3, r5
 8000472:	4159      	adcs	r1, r3
 8000474:	e00e      	b.n	8000494 <__adddf3+0xd0>
 8000476:	f1a5 0520 	sub.w	r5, r5, #32
 800047a:	f10e 0e20 	add.w	lr, lr, #32
 800047e:	2a01      	cmp	r2, #1
 8000480:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000484:	bf28      	it	cs
 8000486:	f04c 0c02 	orrcs.w	ip, ip, #2
 800048a:	fa43 f305 	asr.w	r3, r3, r5
 800048e:	18c0      	adds	r0, r0, r3
 8000490:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000494:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000498:	d507      	bpl.n	80004aa <__adddf3+0xe6>
 800049a:	f04f 0e00 	mov.w	lr, #0
 800049e:	f1dc 0c00 	rsbs	ip, ip, #0
 80004a2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80004a6:	eb6e 0101 	sbc.w	r1, lr, r1
 80004aa:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80004ae:	d31b      	bcc.n	80004e8 <__adddf3+0x124>
 80004b0:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80004b4:	d30c      	bcc.n	80004d0 <__adddf3+0x10c>
 80004b6:	0849      	lsrs	r1, r1, #1
 80004b8:	ea5f 0030 	movs.w	r0, r0, rrx
 80004bc:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80004c0:	f104 0401 	add.w	r4, r4, #1
 80004c4:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80004c8:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80004cc:	f080 809a 	bcs.w	8000604 <__adddf3+0x240>
 80004d0:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80004d4:	bf08      	it	eq
 80004d6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80004da:	f150 0000 	adcs.w	r0, r0, #0
 80004de:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80004e2:	ea41 0105 	orr.w	r1, r1, r5
 80004e6:	bd30      	pop	{r4, r5, pc}
 80004e8:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80004ec:	4140      	adcs	r0, r0
 80004ee:	eb41 0101 	adc.w	r1, r1, r1
 80004f2:	3c01      	subs	r4, #1
 80004f4:	bf28      	it	cs
 80004f6:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80004fa:	d2e9      	bcs.n	80004d0 <__adddf3+0x10c>
 80004fc:	f091 0f00 	teq	r1, #0
 8000500:	bf04      	itt	eq
 8000502:	4601      	moveq	r1, r0
 8000504:	2000      	moveq	r0, #0
 8000506:	fab1 f381 	clz	r3, r1
 800050a:	bf08      	it	eq
 800050c:	3320      	addeq	r3, #32
 800050e:	f1a3 030b 	sub.w	r3, r3, #11
 8000512:	f1b3 0220 	subs.w	r2, r3, #32
 8000516:	da0c      	bge.n	8000532 <__adddf3+0x16e>
 8000518:	320c      	adds	r2, #12
 800051a:	dd08      	ble.n	800052e <__adddf3+0x16a>
 800051c:	f102 0c14 	add.w	ip, r2, #20
 8000520:	f1c2 020c 	rsb	r2, r2, #12
 8000524:	fa01 f00c 	lsl.w	r0, r1, ip
 8000528:	fa21 f102 	lsr.w	r1, r1, r2
 800052c:	e00c      	b.n	8000548 <__adddf3+0x184>
 800052e:	f102 0214 	add.w	r2, r2, #20
 8000532:	bfd8      	it	le
 8000534:	f1c2 0c20 	rsble	ip, r2, #32
 8000538:	fa01 f102 	lsl.w	r1, r1, r2
 800053c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000540:	bfdc      	itt	le
 8000542:	ea41 010c 	orrle.w	r1, r1, ip
 8000546:	4090      	lslle	r0, r2
 8000548:	1ae4      	subs	r4, r4, r3
 800054a:	bfa2      	ittt	ge
 800054c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000550:	4329      	orrge	r1, r5
 8000552:	bd30      	popge	{r4, r5, pc}
 8000554:	ea6f 0404 	mvn.w	r4, r4
 8000558:	3c1f      	subs	r4, #31
 800055a:	da1c      	bge.n	8000596 <__adddf3+0x1d2>
 800055c:	340c      	adds	r4, #12
 800055e:	dc0e      	bgt.n	800057e <__adddf3+0x1ba>
 8000560:	f104 0414 	add.w	r4, r4, #20
 8000564:	f1c4 0220 	rsb	r2, r4, #32
 8000568:	fa20 f004 	lsr.w	r0, r0, r4
 800056c:	fa01 f302 	lsl.w	r3, r1, r2
 8000570:	ea40 0003 	orr.w	r0, r0, r3
 8000574:	fa21 f304 	lsr.w	r3, r1, r4
 8000578:	ea45 0103 	orr.w	r1, r5, r3
 800057c:	bd30      	pop	{r4, r5, pc}
 800057e:	f1c4 040c 	rsb	r4, r4, #12
 8000582:	f1c4 0220 	rsb	r2, r4, #32
 8000586:	fa20 f002 	lsr.w	r0, r0, r2
 800058a:	fa01 f304 	lsl.w	r3, r1, r4
 800058e:	ea40 0003 	orr.w	r0, r0, r3
 8000592:	4629      	mov	r1, r5
 8000594:	bd30      	pop	{r4, r5, pc}
 8000596:	fa21 f004 	lsr.w	r0, r1, r4
 800059a:	4629      	mov	r1, r5
 800059c:	bd30      	pop	{r4, r5, pc}
 800059e:	f094 0f00 	teq	r4, #0
 80005a2:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80005a6:	bf06      	itte	eq
 80005a8:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80005ac:	3401      	addeq	r4, #1
 80005ae:	3d01      	subne	r5, #1
 80005b0:	e74e      	b.n	8000450 <__adddf3+0x8c>
 80005b2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80005b6:	bf18      	it	ne
 80005b8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80005bc:	d029      	beq.n	8000612 <__adddf3+0x24e>
 80005be:	ea94 0f05 	teq	r4, r5
 80005c2:	bf08      	it	eq
 80005c4:	ea90 0f02 	teqeq	r0, r2
 80005c8:	d005      	beq.n	80005d6 <__adddf3+0x212>
 80005ca:	ea54 0c00 	orrs.w	ip, r4, r0
 80005ce:	bf04      	itt	eq
 80005d0:	4619      	moveq	r1, r3
 80005d2:	4610      	moveq	r0, r2
 80005d4:	bd30      	pop	{r4, r5, pc}
 80005d6:	ea91 0f03 	teq	r1, r3
 80005da:	bf1e      	ittt	ne
 80005dc:	2100      	movne	r1, #0
 80005de:	2000      	movne	r0, #0
 80005e0:	bd30      	popne	{r4, r5, pc}
 80005e2:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80005e6:	d105      	bne.n	80005f4 <__adddf3+0x230>
 80005e8:	0040      	lsls	r0, r0, #1
 80005ea:	4149      	adcs	r1, r1
 80005ec:	bf28      	it	cs
 80005ee:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80005f2:	bd30      	pop	{r4, r5, pc}
 80005f4:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80005f8:	bf3c      	itt	cc
 80005fa:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80005fe:	bd30      	popcc	{r4, r5, pc}
 8000600:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000604:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000608:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800060c:	f04f 0000 	mov.w	r0, #0
 8000610:	bd30      	pop	{r4, r5, pc}
 8000612:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000616:	bf1a      	itte	ne
 8000618:	4619      	movne	r1, r3
 800061a:	4610      	movne	r0, r2
 800061c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000620:	bf1c      	itt	ne
 8000622:	460b      	movne	r3, r1
 8000624:	4602      	movne	r2, r0
 8000626:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800062a:	bf06      	itte	eq
 800062c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000630:	ea91 0f03 	teqeq	r1, r3
 8000634:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000638:	bd30      	pop	{r4, r5, pc}
 800063a:	bf00      	nop

0800063c <__aeabi_ui2d>:
 800063c:	f090 0f00 	teq	r0, #0
 8000640:	bf04      	itt	eq
 8000642:	2100      	moveq	r1, #0
 8000644:	4770      	bxeq	lr
 8000646:	b530      	push	{r4, r5, lr}
 8000648:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800064c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000650:	f04f 0500 	mov.w	r5, #0
 8000654:	f04f 0100 	mov.w	r1, #0
 8000658:	e750      	b.n	80004fc <__adddf3+0x138>
 800065a:	bf00      	nop

0800065c <__aeabi_i2d>:
 800065c:	f090 0f00 	teq	r0, #0
 8000660:	bf04      	itt	eq
 8000662:	2100      	moveq	r1, #0
 8000664:	4770      	bxeq	lr
 8000666:	b530      	push	{r4, r5, lr}
 8000668:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800066c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000670:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000674:	bf48      	it	mi
 8000676:	4240      	negmi	r0, r0
 8000678:	f04f 0100 	mov.w	r1, #0
 800067c:	e73e      	b.n	80004fc <__adddf3+0x138>
 800067e:	bf00      	nop

08000680 <__aeabi_f2d>:
 8000680:	0042      	lsls	r2, r0, #1
 8000682:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000686:	ea4f 0131 	mov.w	r1, r1, rrx
 800068a:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800068e:	bf1f      	itttt	ne
 8000690:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 8000694:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000698:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 800069c:	4770      	bxne	lr
 800069e:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80006a2:	bf08      	it	eq
 80006a4:	4770      	bxeq	lr
 80006a6:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80006aa:	bf04      	itt	eq
 80006ac:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80006b0:	4770      	bxeq	lr
 80006b2:	b530      	push	{r4, r5, lr}
 80006b4:	f44f 7460 	mov.w	r4, #896	; 0x380
 80006b8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80006bc:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80006c0:	e71c      	b.n	80004fc <__adddf3+0x138>
 80006c2:	bf00      	nop

080006c4 <__aeabi_ul2d>:
 80006c4:	ea50 0201 	orrs.w	r2, r0, r1
 80006c8:	bf08      	it	eq
 80006ca:	4770      	bxeq	lr
 80006cc:	b530      	push	{r4, r5, lr}
 80006ce:	f04f 0500 	mov.w	r5, #0
 80006d2:	e00a      	b.n	80006ea <__aeabi_l2d+0x16>

080006d4 <__aeabi_l2d>:
 80006d4:	ea50 0201 	orrs.w	r2, r0, r1
 80006d8:	bf08      	it	eq
 80006da:	4770      	bxeq	lr
 80006dc:	b530      	push	{r4, r5, lr}
 80006de:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80006e2:	d502      	bpl.n	80006ea <__aeabi_l2d+0x16>
 80006e4:	4240      	negs	r0, r0
 80006e6:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80006ea:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80006ee:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80006f2:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80006f6:	f43f aed8 	beq.w	80004aa <__adddf3+0xe6>
 80006fa:	f04f 0203 	mov.w	r2, #3
 80006fe:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000702:	bf18      	it	ne
 8000704:	3203      	addne	r2, #3
 8000706:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800070a:	bf18      	it	ne
 800070c:	3203      	addne	r2, #3
 800070e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000712:	f1c2 0320 	rsb	r3, r2, #32
 8000716:	fa00 fc03 	lsl.w	ip, r0, r3
 800071a:	fa20 f002 	lsr.w	r0, r0, r2
 800071e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000722:	ea40 000e 	orr.w	r0, r0, lr
 8000726:	fa21 f102 	lsr.w	r1, r1, r2
 800072a:	4414      	add	r4, r2
 800072c:	e6bd      	b.n	80004aa <__adddf3+0xe6>
 800072e:	bf00      	nop

08000730 <__aeabi_d2uiz>:
 8000730:	004a      	lsls	r2, r1, #1
 8000732:	d211      	bcs.n	8000758 <__aeabi_d2uiz+0x28>
 8000734:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000738:	d211      	bcs.n	800075e <__aeabi_d2uiz+0x2e>
 800073a:	d50d      	bpl.n	8000758 <__aeabi_d2uiz+0x28>
 800073c:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000740:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000744:	d40e      	bmi.n	8000764 <__aeabi_d2uiz+0x34>
 8000746:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 800074a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800074e:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000752:	fa23 f002 	lsr.w	r0, r3, r2
 8000756:	4770      	bx	lr
 8000758:	f04f 0000 	mov.w	r0, #0
 800075c:	4770      	bx	lr
 800075e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000762:	d102      	bne.n	800076a <__aeabi_d2uiz+0x3a>
 8000764:	f04f 30ff 	mov.w	r0, #4294967295
 8000768:	4770      	bx	lr
 800076a:	f04f 0000 	mov.w	r0, #0
 800076e:	4770      	bx	lr

08000770 <keypad_scan>:




uint8_t keypad_scan(void)
{
 8000770:	b590      	push	{r4, r7, lr}
 8000772:	b087      	sub	sp, #28
 8000774:	af00      	add	r7, sp, #0
	uint8_t keys[4][4] = {{'7', '8', '9', '/'},
 8000776:	4b55      	ldr	r3, [pc, #340]	; (80008cc <keypad_scan+0x15c>)
 8000778:	1d3c      	adds	r4, r7, #4
 800077a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800077c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
			{'4', '5', '6', '*'},
			{'1', '2', '3', '-'},
			{'o', '0', '=', '+'}};

	for(int i = 0; i < 4; i++)
 8000780:	2300      	movs	r3, #0
 8000782:	617b      	str	r3, [r7, #20]
 8000784:	e098      	b.n	80008b8 <keypad_scan+0x148>
	{
		// Set current column as output and low
		switch(i)
 8000786:	697b      	ldr	r3, [r7, #20]
 8000788:	2b03      	cmp	r3, #3
 800078a:	d85f      	bhi.n	800084c <keypad_scan+0xdc>
 800078c:	a201      	add	r2, pc, #4	; (adr r2, 8000794 <keypad_scan+0x24>)
 800078e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000792:	bf00      	nop
 8000794:	080007a5 	.word	0x080007a5
 8000798:	080007cf 	.word	0x080007cf
 800079c:	080007f9 	.word	0x080007f9
 80007a0:	08000823 	.word	0x08000823
		{
		case 0:
			HAL_GPIO_WritePin(GPIOA, COL_1_Pin, GPIO_PIN_RESET);
 80007a4:	2200      	movs	r2, #0
 80007a6:	2101      	movs	r1, #1
 80007a8:	4849      	ldr	r0, [pc, #292]	; (80008d0 <keypad_scan+0x160>)
 80007aa:	f001 f9e6 	bl	8001b7a <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOA, COL_2_Pin, GPIO_PIN_SET);
 80007ae:	2201      	movs	r2, #1
 80007b0:	2102      	movs	r1, #2
 80007b2:	4847      	ldr	r0, [pc, #284]	; (80008d0 <keypad_scan+0x160>)
 80007b4:	f001 f9e1 	bl	8001b7a <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOA, COL_3_Pin, GPIO_PIN_SET);
 80007b8:	2201      	movs	r2, #1
 80007ba:	2104      	movs	r1, #4
 80007bc:	4844      	ldr	r0, [pc, #272]	; (80008d0 <keypad_scan+0x160>)
 80007be:	f001 f9dc 	bl	8001b7a <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOA, COL_4_Pin, GPIO_PIN_SET);
 80007c2:	2201      	movs	r2, #1
 80007c4:	2108      	movs	r1, #8
 80007c6:	4842      	ldr	r0, [pc, #264]	; (80008d0 <keypad_scan+0x160>)
 80007c8:	f001 f9d7 	bl	8001b7a <HAL_GPIO_WritePin>
			break;
 80007cc:	e03e      	b.n	800084c <keypad_scan+0xdc>

		case 1:
			HAL_GPIO_WritePin(GPIOA, COL_1_Pin, GPIO_PIN_SET);
 80007ce:	2201      	movs	r2, #1
 80007d0:	2101      	movs	r1, #1
 80007d2:	483f      	ldr	r0, [pc, #252]	; (80008d0 <keypad_scan+0x160>)
 80007d4:	f001 f9d1 	bl	8001b7a <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOA, COL_2_Pin, GPIO_PIN_RESET);
 80007d8:	2200      	movs	r2, #0
 80007da:	2102      	movs	r1, #2
 80007dc:	483c      	ldr	r0, [pc, #240]	; (80008d0 <keypad_scan+0x160>)
 80007de:	f001 f9cc 	bl	8001b7a <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOA, COL_3_Pin, GPIO_PIN_SET);
 80007e2:	2201      	movs	r2, #1
 80007e4:	2104      	movs	r1, #4
 80007e6:	483a      	ldr	r0, [pc, #232]	; (80008d0 <keypad_scan+0x160>)
 80007e8:	f001 f9c7 	bl	8001b7a <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOA, COL_4_Pin, GPIO_PIN_SET);
 80007ec:	2201      	movs	r2, #1
 80007ee:	2108      	movs	r1, #8
 80007f0:	4837      	ldr	r0, [pc, #220]	; (80008d0 <keypad_scan+0x160>)
 80007f2:	f001 f9c2 	bl	8001b7a <HAL_GPIO_WritePin>
			break;
 80007f6:	e029      	b.n	800084c <keypad_scan+0xdc>

		case 2:
			HAL_GPIO_WritePin(GPIOA, COL_1_Pin, GPIO_PIN_SET);
 80007f8:	2201      	movs	r2, #1
 80007fa:	2101      	movs	r1, #1
 80007fc:	4834      	ldr	r0, [pc, #208]	; (80008d0 <keypad_scan+0x160>)
 80007fe:	f001 f9bc 	bl	8001b7a <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOA, COL_2_Pin, GPIO_PIN_SET);
 8000802:	2201      	movs	r2, #1
 8000804:	2102      	movs	r1, #2
 8000806:	4832      	ldr	r0, [pc, #200]	; (80008d0 <keypad_scan+0x160>)
 8000808:	f001 f9b7 	bl	8001b7a <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOA, COL_3_Pin, GPIO_PIN_RESET);
 800080c:	2200      	movs	r2, #0
 800080e:	2104      	movs	r1, #4
 8000810:	482f      	ldr	r0, [pc, #188]	; (80008d0 <keypad_scan+0x160>)
 8000812:	f001 f9b2 	bl	8001b7a <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOA, COL_4_Pin, GPIO_PIN_SET);
 8000816:	2201      	movs	r2, #1
 8000818:	2108      	movs	r1, #8
 800081a:	482d      	ldr	r0, [pc, #180]	; (80008d0 <keypad_scan+0x160>)
 800081c:	f001 f9ad 	bl	8001b7a <HAL_GPIO_WritePin>
			break;
 8000820:	e014      	b.n	800084c <keypad_scan+0xdc>

		case 3:
			HAL_GPIO_WritePin(GPIOA, COL_1_Pin, GPIO_PIN_SET);
 8000822:	2201      	movs	r2, #1
 8000824:	2101      	movs	r1, #1
 8000826:	482a      	ldr	r0, [pc, #168]	; (80008d0 <keypad_scan+0x160>)
 8000828:	f001 f9a7 	bl	8001b7a <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOA, COL_2_Pin, GPIO_PIN_SET);
 800082c:	2201      	movs	r2, #1
 800082e:	2102      	movs	r1, #2
 8000830:	4827      	ldr	r0, [pc, #156]	; (80008d0 <keypad_scan+0x160>)
 8000832:	f001 f9a2 	bl	8001b7a <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOA, COL_3_Pin, GPIO_PIN_SET);
 8000836:	2201      	movs	r2, #1
 8000838:	2104      	movs	r1, #4
 800083a:	4825      	ldr	r0, [pc, #148]	; (80008d0 <keypad_scan+0x160>)
 800083c:	f001 f99d 	bl	8001b7a <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOA, COL_4_Pin, GPIO_PIN_RESET);
 8000840:	2200      	movs	r2, #0
 8000842:	2108      	movs	r1, #8
 8000844:	4822      	ldr	r0, [pc, #136]	; (80008d0 <keypad_scan+0x160>)
 8000846:	f001 f998 	bl	8001b7a <HAL_GPIO_WritePin>
			break;
 800084a:	bf00      	nop
		}
		// Read current rows
		if(HAL_GPIO_ReadPin(GPIOA, ROW_1_Pin) == GPIO_PIN_RESET)
 800084c:	2110      	movs	r1, #16
 800084e:	4820      	ldr	r0, [pc, #128]	; (80008d0 <keypad_scan+0x160>)
 8000850:	f001 f97c 	bl	8001b4c <HAL_GPIO_ReadPin>
 8000854:	4603      	mov	r3, r0
 8000856:	2b00      	cmp	r3, #0
 8000858:	d104      	bne.n	8000864 <keypad_scan+0xf4>
			return keys[0][i];
 800085a:	1d3a      	adds	r2, r7, #4
 800085c:	697b      	ldr	r3, [r7, #20]
 800085e:	4413      	add	r3, r2
 8000860:	781b      	ldrb	r3, [r3, #0]
 8000862:	e02e      	b.n	80008c2 <keypad_scan+0x152>
		if(HAL_GPIO_ReadPin(GPIOA, ROW_2_Pin) == GPIO_PIN_RESET)
 8000864:	2120      	movs	r1, #32
 8000866:	481a      	ldr	r0, [pc, #104]	; (80008d0 <keypad_scan+0x160>)
 8000868:	f001 f970 	bl	8001b4c <HAL_GPIO_ReadPin>
 800086c:	4603      	mov	r3, r0
 800086e:	2b00      	cmp	r3, #0
 8000870:	d105      	bne.n	800087e <keypad_scan+0x10e>
			return keys[1][i];
 8000872:	f107 0208 	add.w	r2, r7, #8
 8000876:	697b      	ldr	r3, [r7, #20]
 8000878:	4413      	add	r3, r2
 800087a:	781b      	ldrb	r3, [r3, #0]
 800087c:	e021      	b.n	80008c2 <keypad_scan+0x152>
		if(HAL_GPIO_ReadPin(GPIOA, ROW_3_Pin) == GPIO_PIN_RESET)
 800087e:	2140      	movs	r1, #64	; 0x40
 8000880:	4813      	ldr	r0, [pc, #76]	; (80008d0 <keypad_scan+0x160>)
 8000882:	f001 f963 	bl	8001b4c <HAL_GPIO_ReadPin>
 8000886:	4603      	mov	r3, r0
 8000888:	2b00      	cmp	r3, #0
 800088a:	d105      	bne.n	8000898 <keypad_scan+0x128>
			return keys[2][i];
 800088c:	f107 020c 	add.w	r2, r7, #12
 8000890:	697b      	ldr	r3, [r7, #20]
 8000892:	4413      	add	r3, r2
 8000894:	781b      	ldrb	r3, [r3, #0]
 8000896:	e014      	b.n	80008c2 <keypad_scan+0x152>
		if(HAL_GPIO_ReadPin(GPIOA, ROW_4_Pin) == GPIO_PIN_RESET)
 8000898:	2180      	movs	r1, #128	; 0x80
 800089a:	480d      	ldr	r0, [pc, #52]	; (80008d0 <keypad_scan+0x160>)
 800089c:	f001 f956 	bl	8001b4c <HAL_GPIO_ReadPin>
 80008a0:	4603      	mov	r3, r0
 80008a2:	2b00      	cmp	r3, #0
 80008a4:	d105      	bne.n	80008b2 <keypad_scan+0x142>
			return keys[3][i];
 80008a6:	f107 0210 	add.w	r2, r7, #16
 80008aa:	697b      	ldr	r3, [r7, #20]
 80008ac:	4413      	add	r3, r2
 80008ae:	781b      	ldrb	r3, [r3, #0]
 80008b0:	e007      	b.n	80008c2 <keypad_scan+0x152>
	for(int i = 0; i < 4; i++)
 80008b2:	697b      	ldr	r3, [r7, #20]
 80008b4:	3301      	adds	r3, #1
 80008b6:	617b      	str	r3, [r7, #20]
 80008b8:	697b      	ldr	r3, [r7, #20]
 80008ba:	2b03      	cmp	r3, #3
 80008bc:	f77f af63 	ble.w	8000786 <keypad_scan+0x16>
	}
	return 0; // No key pressed
 80008c0:	2300      	movs	r3, #0
}
 80008c2:	4618      	mov	r0, r3
 80008c4:	371c      	adds	r7, #28
 80008c6:	46bd      	mov	sp, r7
 80008c8:	bd90      	pop	{r4, r7, pc}
 80008ca:	bf00      	nop
 80008cc:	08003d94 	.word	0x08003d94
 80008d0:	40010800 	.word	0x40010800

080008d4 <lcd_init>:



/*--------------- Initialize LCD ------------------*/
void lcd_init(void)
{
 80008d4:	b580      	push	{r7, lr}
 80008d6:	af00      	add	r7, sp, #0
	
	HAL_Delay(30);
 80008d8:	201e      	movs	r0, #30
 80008da:	f000 fe89 	bl	80015f0 <HAL_Delay>
	
	PIN_LOW(D4_PORT,D4_PIN);
 80008de:	2200      	movs	r2, #0
 80008e0:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80008e4:	481c      	ldr	r0, [pc, #112]	; (8000958 <lcd_init+0x84>)
 80008e6:	f001 f948 	bl	8001b7a <HAL_GPIO_WritePin>
	PIN_HIGH(D5_PORT,D5_PIN);
 80008ea:	2201      	movs	r2, #1
 80008ec:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80008f0:	4819      	ldr	r0, [pc, #100]	; (8000958 <lcd_init+0x84>)
 80008f2:	f001 f942 	bl	8001b7a <HAL_GPIO_WritePin>
	PIN_LOW(D6_PORT,D6_PIN);
 80008f6:	2200      	movs	r2, #0
 80008f8:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80008fc:	4816      	ldr	r0, [pc, #88]	; (8000958 <lcd_init+0x84>)
 80008fe:	f001 f93c 	bl	8001b7a <HAL_GPIO_WritePin>
	PIN_LOW(D7_PORT,D7_PIN);
 8000902:	2200      	movs	r2, #0
 8000904:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000908:	4813      	ldr	r0, [pc, #76]	; (8000958 <lcd_init+0x84>)
 800090a:	f001 f936 	bl	8001b7a <HAL_GPIO_WritePin>
	PIN_LOW(RS_PORT,RS_PIN);
 800090e:	2200      	movs	r2, #0
 8000910:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000914:	4810      	ldr	r0, [pc, #64]	; (8000958 <lcd_init+0x84>)
 8000916:	f001 f930 	bl	8001b7a <HAL_GPIO_WritePin>
	
	PIN_HIGH(EN_PORT,EN_PIN);
 800091a:	2201      	movs	r2, #1
 800091c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000920:	480d      	ldr	r0, [pc, #52]	; (8000958 <lcd_init+0x84>)
 8000922:	f001 f92a 	bl	8001b7a <HAL_GPIO_WritePin>
	PIN_LOW(EN_PORT,EN_PIN);
 8000926:	2200      	movs	r2, #0
 8000928:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800092c:	480a      	ldr	r0, [pc, #40]	; (8000958 <lcd_init+0x84>)
 800092e:	f001 f924 	bl	8001b7a <HAL_GPIO_WritePin>
	

	send_8_bits_to_lcd(0x28, 0);
 8000932:	2100      	movs	r1, #0
 8000934:	2028      	movs	r0, #40	; 0x28
 8000936:	f000 f861 	bl	80009fc <send_8_bits_to_lcd>

	send_8_bits_to_lcd(0x0c, 0);
 800093a:	2100      	movs	r1, #0
 800093c:	200c      	movs	r0, #12
 800093e:	f000 f85d 	bl	80009fc <send_8_bits_to_lcd>

	send_8_bits_to_lcd(0x06, 0);
 8000942:	2100      	movs	r1, #0
 8000944:	2006      	movs	r0, #6
 8000946:	f000 f859 	bl	80009fc <send_8_bits_to_lcd>

	send_8_bits_to_lcd(0x01, 0);
 800094a:	2100      	movs	r1, #0
 800094c:	2001      	movs	r0, #1
 800094e:	f000 f855 	bl	80009fc <send_8_bits_to_lcd>

}
 8000952:	bf00      	nop
 8000954:	bd80      	pop	{r7, pc}
 8000956:	bf00      	nop
 8000958:	40010c00 	.word	0x40010c00

0800095c <send_4_bits_to_lcd>:

/*--------------- Write To LCD ---------------*/

void send_4_bits_to_lcd (uint8_t data, uint8_t rs_val)
{
 800095c:	b580      	push	{r7, lr}
 800095e:	b082      	sub	sp, #8
 8000960:	af00      	add	r7, sp, #0
 8000962:	4603      	mov	r3, r0
 8000964:	460a      	mov	r2, r1
 8000966:	71fb      	strb	r3, [r7, #7]
 8000968:	4613      	mov	r3, r2
 800096a:	71bb      	strb	r3, [r7, #6]
	HAL_GPIO_WritePin(RS_PORT, RS_PIN, rs_val);
 800096c:	79bb      	ldrb	r3, [r7, #6]
 800096e:	461a      	mov	r2, r3
 8000970:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000974:	4820      	ldr	r0, [pc, #128]	; (80009f8 <send_4_bits_to_lcd+0x9c>)
 8000976:	f001 f900 	bl	8001b7a <HAL_GPIO_WritePin>

	HAL_GPIO_WritePin(D7_PORT, D7_PIN, (data>>3)&0x01);
 800097a:	79fb      	ldrb	r3, [r7, #7]
 800097c:	08db      	lsrs	r3, r3, #3
 800097e:	b2db      	uxtb	r3, r3
 8000980:	f003 0301 	and.w	r3, r3, #1
 8000984:	b2db      	uxtb	r3, r3
 8000986:	461a      	mov	r2, r3
 8000988:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800098c:	481a      	ldr	r0, [pc, #104]	; (80009f8 <send_4_bits_to_lcd+0x9c>)
 800098e:	f001 f8f4 	bl	8001b7a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(D6_PORT, D6_PIN, (data>>2)&0x01);
 8000992:	79fb      	ldrb	r3, [r7, #7]
 8000994:	089b      	lsrs	r3, r3, #2
 8000996:	b2db      	uxtb	r3, r3
 8000998:	f003 0301 	and.w	r3, r3, #1
 800099c:	b2db      	uxtb	r3, r3
 800099e:	461a      	mov	r2, r3
 80009a0:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80009a4:	4814      	ldr	r0, [pc, #80]	; (80009f8 <send_4_bits_to_lcd+0x9c>)
 80009a6:	f001 f8e8 	bl	8001b7a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(D5_PORT, D5_PIN, (data>>1)&0x01);
 80009aa:	79fb      	ldrb	r3, [r7, #7]
 80009ac:	085b      	lsrs	r3, r3, #1
 80009ae:	b2db      	uxtb	r3, r3
 80009b0:	f003 0301 	and.w	r3, r3, #1
 80009b4:	b2db      	uxtb	r3, r3
 80009b6:	461a      	mov	r2, r3
 80009b8:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80009bc:	480e      	ldr	r0, [pc, #56]	; (80009f8 <send_4_bits_to_lcd+0x9c>)
 80009be:	f001 f8dc 	bl	8001b7a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(D4_PORT, D4_PIN, (data>>0)&0x01);
 80009c2:	79fb      	ldrb	r3, [r7, #7]
 80009c4:	f003 0301 	and.w	r3, r3, #1
 80009c8:	b2db      	uxtb	r3, r3
 80009ca:	461a      	mov	r2, r3
 80009cc:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80009d0:	4809      	ldr	r0, [pc, #36]	; (80009f8 <send_4_bits_to_lcd+0x9c>)
 80009d2:	f001 f8d2 	bl	8001b7a <HAL_GPIO_WritePin>

	HAL_GPIO_WritePin(EN_PORT, EN_PIN, 1);
 80009d6:	2201      	movs	r2, #1
 80009d8:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80009dc:	4806      	ldr	r0, [pc, #24]	; (80009f8 <send_4_bits_to_lcd+0x9c>)
 80009de:	f001 f8cc 	bl	8001b7a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(EN_PORT, EN_PIN, 0);
 80009e2:	2200      	movs	r2, #0
 80009e4:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80009e8:	4803      	ldr	r0, [pc, #12]	; (80009f8 <send_4_bits_to_lcd+0x9c>)
 80009ea:	f001 f8c6 	bl	8001b7a <HAL_GPIO_WritePin>

}
 80009ee:	bf00      	nop
 80009f0:	3708      	adds	r7, #8
 80009f2:	46bd      	mov	sp, r7
 80009f4:	bd80      	pop	{r7, pc}
 80009f6:	bf00      	nop
 80009f8:	40010c00 	.word	0x40010c00

080009fc <send_8_bits_to_lcd>:

void send_8_bits_to_lcd (uint8_t data, uint8_t rs_val)
{
 80009fc:	b580      	push	{r7, lr}
 80009fe:	b082      	sub	sp, #8
 8000a00:	af00      	add	r7, sp, #0
 8000a02:	4603      	mov	r3, r0
 8000a04:	460a      	mov	r2, r1
 8000a06:	71fb      	strb	r3, [r7, #7]
 8000a08:	4613      	mov	r3, r2
 8000a0a:	71bb      	strb	r3, [r7, #6]
	send_4_bits_to_lcd((data>>4) & 0x0F, rs_val);
 8000a0c:	79fb      	ldrb	r3, [r7, #7]
 8000a0e:	091b      	lsrs	r3, r3, #4
 8000a10:	b2db      	uxtb	r3, r3
 8000a12:	79ba      	ldrb	r2, [r7, #6]
 8000a14:	4611      	mov	r1, r2
 8000a16:	4618      	mov	r0, r3
 8000a18:	f7ff ffa0 	bl	800095c <send_4_bits_to_lcd>

	send_4_bits_to_lcd(data & 0x0F, rs_val);
 8000a1c:	79fb      	ldrb	r3, [r7, #7]
 8000a1e:	f003 030f 	and.w	r3, r3, #15
 8000a22:	b2db      	uxtb	r3, r3
 8000a24:	79ba      	ldrb	r2, [r7, #6]
 8000a26:	4611      	mov	r1, r2
 8000a28:	4618      	mov	r0, r3
 8000a2a:	f7ff ff97 	bl	800095c <send_4_bits_to_lcd>


}
 8000a2e:	bf00      	nop
 8000a30:	3708      	adds	r7, #8
 8000a32:	46bd      	mov	sp, r7
 8000a34:	bd80      	pop	{r7, pc}

08000a36 <lcd_put_cur>:

void lcd_put_cur(int row, int col)
{
 8000a36:	b580      	push	{r7, lr}
 8000a38:	b082      	sub	sp, #8
 8000a3a:	af00      	add	r7, sp, #0
 8000a3c:	6078      	str	r0, [r7, #4]
 8000a3e:	6039      	str	r1, [r7, #0]
    switch (row)
 8000a40:	687b      	ldr	r3, [r7, #4]
 8000a42:	2b00      	cmp	r3, #0
 8000a44:	d003      	beq.n	8000a4e <lcd_put_cur+0x18>
 8000a46:	687b      	ldr	r3, [r7, #4]
 8000a48:	2b01      	cmp	r3, #1
 8000a4a:	d005      	beq.n	8000a58 <lcd_put_cur+0x22>
 8000a4c:	e009      	b.n	8000a62 <lcd_put_cur+0x2c>
    {
        case 0:
            col |= 0x80;
 8000a4e:	683b      	ldr	r3, [r7, #0]
 8000a50:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000a54:	603b      	str	r3, [r7, #0]
            break;
 8000a56:	e004      	b.n	8000a62 <lcd_put_cur+0x2c>
        case 1:
            col |= 0xC0;
 8000a58:	683b      	ldr	r3, [r7, #0]
 8000a5a:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8000a5e:	603b      	str	r3, [r7, #0]
            break;
 8000a60:	bf00      	nop
    }
    send_8_bits_to_lcd (col,0);
 8000a62:	683b      	ldr	r3, [r7, #0]
 8000a64:	b2db      	uxtb	r3, r3
 8000a66:	2100      	movs	r1, #0
 8000a68:	4618      	mov	r0, r3
 8000a6a:	f7ff ffc7 	bl	80009fc <send_8_bits_to_lcd>
}
 8000a6e:	bf00      	nop
 8000a70:	3708      	adds	r7, #8
 8000a72:	46bd      	mov	sp, r7
 8000a74:	bd80      	pop	{r7, pc}

08000a76 <lcd_puts>:

void lcd_puts(int8_t *string , int n)
{
 8000a76:	b580      	push	{r7, lr}
 8000a78:	b084      	sub	sp, #16
 8000a7a:	af00      	add	r7, sp, #0
 8000a7c:	6078      	str	r0, [r7, #4]
 8000a7e:	6039      	str	r1, [r7, #0]
	//Set Cursor Position
	for (int i=0; i<n ;i++)
 8000a80:	2300      	movs	r3, #0
 8000a82:	60fb      	str	r3, [r7, #12]
 8000a84:	e00d      	b.n	8000aa2 <lcd_puts+0x2c>
	{
		//lcd_write(1,*string);
		send_8_bits_to_lcd(*string, 1);
 8000a86:	687b      	ldr	r3, [r7, #4]
 8000a88:	f993 3000 	ldrsb.w	r3, [r3]
 8000a8c:	b2db      	uxtb	r3, r3
 8000a8e:	2101      	movs	r1, #1
 8000a90:	4618      	mov	r0, r3
 8000a92:	f7ff ffb3 	bl	80009fc <send_8_bits_to_lcd>
		string++;
 8000a96:	687b      	ldr	r3, [r7, #4]
 8000a98:	3301      	adds	r3, #1
 8000a9a:	607b      	str	r3, [r7, #4]
	for (int i=0; i<n ;i++)
 8000a9c:	68fb      	ldr	r3, [r7, #12]
 8000a9e:	3301      	adds	r3, #1
 8000aa0:	60fb      	str	r3, [r7, #12]
 8000aa2:	68fa      	ldr	r2, [r7, #12]
 8000aa4:	683b      	ldr	r3, [r7, #0]
 8000aa6:	429a      	cmp	r2, r3
 8000aa8:	dbed      	blt.n	8000a86 <lcd_puts+0x10>
	}
}
 8000aaa:	bf00      	nop
 8000aac:	bf00      	nop
 8000aae:	3710      	adds	r7, #16
 8000ab0:	46bd      	mov	sp, r7
 8000ab2:	bd80      	pop	{r7, pc}

08000ab4 <lcd_clear>:
void lcd_clear(void)
{
 8000ab4:	b580      	push	{r7, lr}
 8000ab6:	af00      	add	r7, sp, #0
	send_8_bits_to_lcd(0x01, 0);
 8000ab8:	2100      	movs	r1, #0
 8000aba:	2001      	movs	r0, #1
 8000abc:	f7ff ff9e 	bl	80009fc <send_8_bits_to_lcd>

}
 8000ac0:	bf00      	nop
 8000ac2:	bd80      	pop	{r7, pc}

08000ac4 <main>:
/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void)
{
 8000ac4:	b580      	push	{r7, lr}
 8000ac6:	b08e      	sub	sp, #56	; 0x38
 8000ac8:	af00      	add	r7, sp, #0
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 8000aca:	f000 fd2f 	bl	800152c <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 8000ace:	f000 f977 	bl	8000dc0 <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 8000ad2:	f000 fa83 	bl	8000fdc <MX_GPIO_Init>
	MX_USART1_UART_Init();
 8000ad6:	f000 fa57 	bl	8000f88 <MX_USART1_UART_Init>
	MX_TIM2_Init();
 8000ada:	f000 f9df 	bl	8000e9c <MX_TIM2_Init>
	MX_I2C1_Init();
 8000ade:	f000 f9af 	bl	8000e40 <MX_I2C1_Init>
	/* USER CODE BEGIN 2 */

	lcd_init();
 8000ae2:	f7ff fef7 	bl	80008d4 <lcd_init>
	lcd_put_cur(1,6);
 8000ae6:	2106      	movs	r1, #6
 8000ae8:	2001      	movs	r0, #1
 8000aea:	f7ff ffa4 	bl	8000a36 <lcd_put_cur>

	// Password is located on the 3rd page at the offset 0x0 of the external EEPROM
	//EEPROM_Read(3, 0,(uint8_t*)password, 4);
	strcpy(password, "1234");
 8000aee:	4b9d      	ldr	r3, [pc, #628]	; (8000d64 <main+0x2a0>)
 8000af0:	4a9d      	ldr	r2, [pc, #628]	; (8000d68 <main+0x2a4>)
 8000af2:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000af6:	6018      	str	r0, [r3, #0]
 8000af8:	3304      	adds	r3, #4
 8000afa:	7019      	strb	r1, [r3, #0]
	while (1)
	{
		/* USER CODE END WHILE */
		/* USER CODE BEGIN 3 */

		if ((!passwordcheck) & (attemptsCount<3))
 8000afc:	4b9b      	ldr	r3, [pc, #620]	; (8000d6c <main+0x2a8>)
 8000afe:	681b      	ldr	r3, [r3, #0]
 8000b00:	2b00      	cmp	r3, #0
 8000b02:	bf0c      	ite	eq
 8000b04:	2301      	moveq	r3, #1
 8000b06:	2300      	movne	r3, #0
 8000b08:	b2da      	uxtb	r2, r3
 8000b0a:	4b99      	ldr	r3, [pc, #612]	; (8000d70 <main+0x2ac>)
 8000b0c:	681b      	ldr	r3, [r3, #0]
 8000b0e:	2b02      	cmp	r3, #2
 8000b10:	bfd4      	ite	le
 8000b12:	2301      	movle	r3, #1
 8000b14:	2300      	movgt	r3, #0
 8000b16:	b2db      	uxtb	r3, r3
 8000b18:	4013      	ands	r3, r2
 8000b1a:	b2db      	uxtb	r3, r3
 8000b1c:	2b00      	cmp	r3, #0
 8000b1e:	f000 80a6 	beq.w	8000c6e <main+0x1aa>
		{
			attemptsCount++;
 8000b22:	4b93      	ldr	r3, [pc, #588]	; (8000d70 <main+0x2ac>)
 8000b24:	681b      	ldr	r3, [r3, #0]
 8000b26:	3301      	adds	r3, #1
 8000b28:	4a91      	ldr	r2, [pc, #580]	; (8000d70 <main+0x2ac>)
 8000b2a:	6013      	str	r3, [r2, #0]
			j=0;
 8000b2c:	4b91      	ldr	r3, [pc, #580]	; (8000d74 <main+0x2b0>)
 8000b2e:	2200      	movs	r2, #0
 8000b30:	601a      	str	r2, [r3, #0]
			lcd_puts((uint8_t*)" Enter Password" , strlen (" Enter Password"));
 8000b32:	210f      	movs	r1, #15
 8000b34:	4890      	ldr	r0, [pc, #576]	; (8000d78 <main+0x2b4>)
 8000b36:	f7ff ff9e 	bl	8000a76 <lcd_puts>
			HAL_Delay(500);
 8000b3a:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000b3e:	f000 fd57 	bl	80015f0 <HAL_Delay>
			lcd_clear();
 8000b42:	f7ff ffb7 	bl	8000ab4 <lcd_clear>

			while (j<4)
 8000b46:	e08d      	b.n	8000c64 <main+0x1a0>
			{
				uint8_t keyPressed = keypad_scan();
 8000b48:	f7ff fe12 	bl	8000770 <keypad_scan>
 8000b4c:	4603      	mov	r3, r0
 8000b4e:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37

				if (keyPressed)
 8000b52:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8000b56:	2b00      	cmp	r3, #0
 8000b58:	f000 8081 	beq.w	8000c5e <main+0x19a>
				{
					lcd_puts((uint8_t*)" *" , strlen (" *"));
 8000b5c:	2102      	movs	r1, #2
 8000b5e:	4887      	ldr	r0, [pc, #540]	; (8000d7c <main+0x2b8>)
 8000b60:	f7ff ff89 	bl	8000a76 <lcd_puts>
					char key[2];
					key[0] = (char)keyPressed;  // Convert to char
 8000b64:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8000b68:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
					key[1] = '\0';
 8000b6c:	2300      	movs	r3, #0
 8000b6e:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
					strcat(entry,key);
 8000b72:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000b76:	4619      	mov	r1, r3
 8000b78:	4881      	ldr	r0, [pc, #516]	; (8000d80 <main+0x2bc>)
 8000b7a:	f002 fc97 	bl	80034ac <strcat>
					j++;
 8000b7e:	4b7d      	ldr	r3, [pc, #500]	; (8000d74 <main+0x2b0>)
 8000b80:	681b      	ldr	r3, [r3, #0]
 8000b82:	3301      	adds	r3, #1
 8000b84:	4a7b      	ldr	r2, [pc, #492]	; (8000d74 <main+0x2b0>)
 8000b86:	6013      	str	r3, [r2, #0]

					if (j==4)
 8000b88:	4b7a      	ldr	r3, [pc, #488]	; (8000d74 <main+0x2b0>)
 8000b8a:	681b      	ldr	r3, [r3, #0]
 8000b8c:	2b04      	cmp	r3, #4
 8000b8e:	d166      	bne.n	8000c5e <main+0x19a>

					{
						char buffer[10];

						lcd_clear();
 8000b90:	f7ff ff90 	bl	8000ab4 <lcd_clear>

						int result = strcmp (password, entry);
 8000b94:	497a      	ldr	r1, [pc, #488]	; (8000d80 <main+0x2bc>)
 8000b96:	4873      	ldr	r0, [pc, #460]	; (8000d64 <main+0x2a0>)
 8000b98:	f7ff fada 	bl	8000150 <strcmp>
 8000b9c:	6338      	str	r0, [r7, #48]	; 0x30
						if (!result )
 8000b9e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000ba0:	2b00      	cmp	r3, #0
 8000ba2:	d133      	bne.n	8000c0c <main+0x148>
						{
							lcd_puts((uint8_t*)" Correct!" , strlen (" Correct!"));
 8000ba4:	2109      	movs	r1, #9
 8000ba6:	4877      	ldr	r0, [pc, #476]	; (8000d84 <main+0x2c0>)
 8000ba8:	f7ff ff65 	bl	8000a76 <lcd_puts>
							HAL_Delay(300);
 8000bac:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8000bb0:	f000 fd1e 	bl	80015f0 <HAL_Delay>
							lcd_clear();
 8000bb4:	f7ff ff7e 	bl	8000ab4 <lcd_clear>


							GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000bb8:	f107 0310 	add.w	r3, r7, #16
 8000bbc:	2200      	movs	r2, #0
 8000bbe:	601a      	str	r2, [r3, #0]
 8000bc0:	605a      	str	r2, [r3, #4]
 8000bc2:	609a      	str	r2, [r3, #8]
 8000bc4:	60da      	str	r2, [r3, #12]


							GPIO_InitStruct.Pin = changePassPB|doorUnlockPB|desactivateBuzzerPB;
 8000bc6:	2307      	movs	r3, #7
 8000bc8:	613b      	str	r3, [r7, #16]
							GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000bca:	4b6f      	ldr	r3, [pc, #444]	; (8000d88 <main+0x2c4>)
 8000bcc:	617b      	str	r3, [r7, #20]
							GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bce:	2300      	movs	r3, #0
 8000bd0:	61bb      	str	r3, [r7, #24]
							HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000bd2:	f107 0310 	add.w	r3, r7, #16
 8000bd6:	4619      	mov	r1, r3
 8000bd8:	486c      	ldr	r0, [pc, #432]	; (8000d8c <main+0x2c8>)
 8000bda:	f000 fe3b 	bl	8001854 <HAL_GPIO_Init>

							HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 8000bde:	2200      	movs	r2, #0
 8000be0:	2100      	movs	r1, #0
 8000be2:	2006      	movs	r0, #6
 8000be4:	f000 fdff 	bl	80017e6 <HAL_NVIC_SetPriority>
							HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8000be8:	2006      	movs	r0, #6
 8000bea:	f000 fe18 	bl	800181e <HAL_NVIC_EnableIRQ>

							HAL_NVIC_SetPriority(EXTI1_IRQn, 0, 0);
 8000bee:	2200      	movs	r2, #0
 8000bf0:	2100      	movs	r1, #0
 8000bf2:	2007      	movs	r0, #7
 8000bf4:	f000 fdf7 	bl	80017e6 <HAL_NVIC_SetPriority>
							HAL_NVIC_EnableIRQ(EXTI1_IRQn);
 8000bf8:	2007      	movs	r0, #7
 8000bfa:	f000 fe10 	bl	800181e <HAL_NVIC_EnableIRQ>


							attemptsCount =0;
 8000bfe:	4b5c      	ldr	r3, [pc, #368]	; (8000d70 <main+0x2ac>)
 8000c00:	2200      	movs	r2, #0
 8000c02:	601a      	str	r2, [r3, #0]
							passwordcheck =1;
 8000c04:	4b59      	ldr	r3, [pc, #356]	; (8000d6c <main+0x2a8>)
 8000c06:	2201      	movs	r2, #1
 8000c08:	601a      	str	r2, [r3, #0]
 8000c0a:	e028      	b.n	8000c5e <main+0x19a>


						}
						else
						{
							memset(entry, 0, sizeof(entry));
 8000c0c:	2205      	movs	r2, #5
 8000c0e:	2100      	movs	r1, #0
 8000c10:	485b      	ldr	r0, [pc, #364]	; (8000d80 <main+0x2bc>)
 8000c12:	f002 fc23 	bl	800345c <memset>
							lcd_puts((uint8_t*)" Wrong!" , strlen (" Wrong!"));
 8000c16:	2107      	movs	r1, #7
 8000c18:	485d      	ldr	r0, [pc, #372]	; (8000d90 <main+0x2cc>)
 8000c1a:	f7ff ff2c 	bl	8000a76 <lcd_puts>
							HAL_Delay(300);
 8000c1e:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8000c22:	f000 fce5 	bl	80015f0 <HAL_Delay>
							lcd_clear();
 8000c26:	f7ff ff45 	bl	8000ab4 <lcd_clear>
							char buffer[10];
							sprintf(buffer, "%d", attemptsCount);  // Convert the integer to a string
 8000c2a:	4b51      	ldr	r3, [pc, #324]	; (8000d70 <main+0x2ac>)
 8000c2c:	681a      	ldr	r2, [r3, #0]
 8000c2e:	1d3b      	adds	r3, r7, #4
 8000c30:	4958      	ldr	r1, [pc, #352]	; (8000d94 <main+0x2d0>)
 8000c32:	4618      	mov	r0, r3
 8000c34:	f002 fc1a 	bl	800346c <siprintf>

							if(attemptsCount==3)
 8000c38:	4b4d      	ldr	r3, [pc, #308]	; (8000d70 <main+0x2ac>)
 8000c3a:	681b      	ldr	r3, [r3, #0]
 8000c3c:	2b03      	cmp	r3, #3
 8000c3e:	d10e      	bne.n	8000c5e <main+0x19a>
							{
								lcd_puts((uint8_t*)" 3 failed attempts" , strlen (" 3 failed attempts"));
 8000c40:	2112      	movs	r1, #18
 8000c42:	4855      	ldr	r0, [pc, #340]	; (8000d98 <main+0x2d4>)
 8000c44:	f7ff ff17 	bl	8000a76 <lcd_puts>
								HAL_Delay(300);
 8000c48:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8000c4c:	f000 fcd0 	bl	80015f0 <HAL_Delay>
								lcd_clear();
 8000c50:	f7ff ff30 	bl	8000ab4 <lcd_clear>
								HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, GPIO_PIN_SET);
 8000c54:	2201      	movs	r2, #1
 8000c56:	2120      	movs	r1, #32
 8000c58:	484c      	ldr	r0, [pc, #304]	; (8000d8c <main+0x2c8>)
 8000c5a:	f000 ff8e 	bl	8001b7a <HAL_GPIO_WritePin>
							}

						}
					}
				}
				HAL_Delay(200);
 8000c5e:	20c8      	movs	r0, #200	; 0xc8
 8000c60:	f000 fcc6 	bl	80015f0 <HAL_Delay>
			while (j<4)
 8000c64:	4b43      	ldr	r3, [pc, #268]	; (8000d74 <main+0x2b0>)
 8000c66:	681b      	ldr	r3, [r3, #0]
 8000c68:	2b03      	cmp	r3, #3
 8000c6a:	f77f af6d 	ble.w	8000b48 <main+0x84>
			}
		}
		if (newPass)
 8000c6e:	4b4b      	ldr	r3, [pc, #300]	; (8000d9c <main+0x2d8>)
 8000c70:	681b      	ldr	r3, [r3, #0]
 8000c72:	2b00      	cmp	r3, #0
 8000c74:	d043      	beq.n	8000cfe <main+0x23a>
		{

			lcd_puts((uint8_t*)" Enter New Password:" , strlen (" Enter New Password:"));
 8000c76:	2114      	movs	r1, #20
 8000c78:	4849      	ldr	r0, [pc, #292]	; (8000da0 <main+0x2dc>)
 8000c7a:	f7ff fefc 	bl	8000a76 <lcd_puts>
			HAL_Delay(300);
 8000c7e:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8000c82:	f000 fcb5 	bl	80015f0 <HAL_Delay>
			lcd_clear();
 8000c86:	f7ff ff15 	bl	8000ab4 <lcd_clear>
			memset(password, 0, sizeof(password));
 8000c8a:	2205      	movs	r2, #5
 8000c8c:	2100      	movs	r1, #0
 8000c8e:	4835      	ldr	r0, [pc, #212]	; (8000d64 <main+0x2a0>)
 8000c90:	f002 fbe4 	bl	800345c <memset>

			while (k<4)
 8000c94:	e02c      	b.n	8000cf0 <main+0x22c>
			{
				uint8_t keyPressed = keypad_scan();
 8000c96:	f7ff fd6b 	bl	8000770 <keypad_scan>
 8000c9a:	4603      	mov	r3, r0
 8000c9c:	70fb      	strb	r3, [r7, #3]

				if (keyPressed)
 8000c9e:	78fb      	ldrb	r3, [r7, #3]
 8000ca0:	2b00      	cmp	r3, #0
 8000ca2:	d022      	beq.n	8000cea <main+0x226>
				{
					lcd_puts(&keyPressed, 1);
 8000ca4:	1cfb      	adds	r3, r7, #3
 8000ca6:	2101      	movs	r1, #1
 8000ca8:	4618      	mov	r0, r3
 8000caa:	f7ff fee4 	bl	8000a76 <lcd_puts>
					char key[2];

					key[0] = (char)keyPressed;  // Convert to char
 8000cae:	78fb      	ldrb	r3, [r7, #3]
 8000cb0:	703b      	strb	r3, [r7, #0]
					key[1] = '\0';
 8000cb2:	2300      	movs	r3, #0
 8000cb4:	707b      	strb	r3, [r7, #1]

					strcat(password,key);
 8000cb6:	463b      	mov	r3, r7
 8000cb8:	4619      	mov	r1, r3
 8000cba:	482a      	ldr	r0, [pc, #168]	; (8000d64 <main+0x2a0>)
 8000cbc:	f002 fbf6 	bl	80034ac <strcat>

					k++;
 8000cc0:	4b38      	ldr	r3, [pc, #224]	; (8000da4 <main+0x2e0>)
 8000cc2:	681b      	ldr	r3, [r3, #0]
 8000cc4:	3301      	adds	r3, #1
 8000cc6:	4a37      	ldr	r2, [pc, #220]	; (8000da4 <main+0x2e0>)
 8000cc8:	6013      	str	r3, [r2, #0]

					if (k==4)
 8000cca:	4b36      	ldr	r3, [pc, #216]	; (8000da4 <main+0x2e0>)
 8000ccc:	681b      	ldr	r3, [r3, #0]
 8000cce:	2b04      	cmp	r3, #4
 8000cd0:	d10b      	bne.n	8000cea <main+0x226>

					{
						//EEPROM_PageErase(3);
						//EEPROM_Write(3, 0, password, 4);
						lcd_clear();
 8000cd2:	f7ff feef 	bl	8000ab4 <lcd_clear>
						lcd_puts((uint8_t*)" new password set!" , strlen (" new password set!"));
 8000cd6:	2112      	movs	r1, #18
 8000cd8:	4833      	ldr	r0, [pc, #204]	; (8000da8 <main+0x2e4>)
 8000cda:	f7ff fecc 	bl	8000a76 <lcd_puts>
						HAL_Delay(300);
 8000cde:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8000ce2:	f000 fc85 	bl	80015f0 <HAL_Delay>
						lcd_clear();
 8000ce6:	f7ff fee5 	bl	8000ab4 <lcd_clear>

					}
				}
				HAL_Delay(200);
 8000cea:	20c8      	movs	r0, #200	; 0xc8
 8000cec:	f000 fc80 	bl	80015f0 <HAL_Delay>
			while (k<4)
 8000cf0:	4b2c      	ldr	r3, [pc, #176]	; (8000da4 <main+0x2e0>)
 8000cf2:	681b      	ldr	r3, [r3, #0]
 8000cf4:	2b03      	cmp	r3, #3
 8000cf6:	ddce      	ble.n	8000c96 <main+0x1d2>
			}
			newPass=0;
 8000cf8:	4b28      	ldr	r3, [pc, #160]	; (8000d9c <main+0x2d8>)
 8000cfa:	2200      	movs	r2, #0
 8000cfc:	601a      	str	r2, [r3, #0]
		}

		if (doorUnlock)
 8000cfe:	4b2b      	ldr	r3, [pc, #172]	; (8000dac <main+0x2e8>)
 8000d00:	681b      	ldr	r3, [r3, #0]
 8000d02:	2b00      	cmp	r3, #0
 8000d04:	d013      	beq.n	8000d2e <main+0x26a>
		{
			lcd_puts((uint8_t*)" Unlocking door..." , strlen (" Unlocking door..."));
 8000d06:	2112      	movs	r1, #18
 8000d08:	4829      	ldr	r0, [pc, #164]	; (8000db0 <main+0x2ec>)
 8000d0a:	f7ff feb4 	bl	8000a76 <lcd_puts>
			HAL_Delay(300);
 8000d0e:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8000d12:	f000 fc6d 	bl	80015f0 <HAL_Delay>
			HAL_TIM_PWM_Start(&PWM_Timer, PWM_Channel);
 8000d16:	2104      	movs	r1, #4
 8000d18:	4826      	ldr	r0, [pc, #152]	; (8000db4 <main+0x2f0>)
 8000d1a:	f001 fd73 	bl	8002804 <HAL_TIM_PWM_Start>
			SetServoAngle(45);
 8000d1e:	202d      	movs	r0, #45	; 0x2d
 8000d20:	f000 f9fa 	bl	8001118 <SetServoAngle>
			lcd_clear();
 8000d24:	f7ff fec6 	bl	8000ab4 <lcd_clear>

			doorUnlock = 0;
 8000d28:	4b20      	ldr	r3, [pc, #128]	; (8000dac <main+0x2e8>)
 8000d2a:	2200      	movs	r2, #0
 8000d2c:	601a      	str	r2, [r3, #0]
		}

		if (buzzerDesact)
 8000d2e:	4b22      	ldr	r3, [pc, #136]	; (8000db8 <main+0x2f4>)
 8000d30:	681b      	ldr	r3, [r3, #0]
 8000d32:	2b00      	cmp	r3, #0
 8000d34:	f43f aee2 	beq.w	8000afc <main+0x38>
		{

			lcd_puts((uint8_t*)" Desactivating Buzzer" , strlen (" Desactivating Buzzer"));
 8000d38:	2115      	movs	r1, #21
 8000d3a:	4820      	ldr	r0, [pc, #128]	; (8000dbc <main+0x2f8>)
 8000d3c:	f7ff fe9b 	bl	8000a76 <lcd_puts>
			HAL_Delay(300);
 8000d40:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8000d44:	f000 fc54 	bl	80015f0 <HAL_Delay>
			lcd_clear();
 8000d48:	f7ff feb4 	bl	8000ab4 <lcd_clear>


			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, GPIO_PIN_RESET);
 8000d4c:	2200      	movs	r2, #0
 8000d4e:	2120      	movs	r1, #32
 8000d50:	480e      	ldr	r0, [pc, #56]	; (8000d8c <main+0x2c8>)
 8000d52:	f000 ff12 	bl	8001b7a <HAL_GPIO_WritePin>
			attemptsCount = 0;
 8000d56:	4b06      	ldr	r3, [pc, #24]	; (8000d70 <main+0x2ac>)
 8000d58:	2200      	movs	r2, #0
 8000d5a:	601a      	str	r2, [r3, #0]
			buzzerDesact=0;
 8000d5c:	4b16      	ldr	r3, [pc, #88]	; (8000db8 <main+0x2f4>)
 8000d5e:	2200      	movs	r2, #0
 8000d60:	601a      	str	r2, [r3, #0]
		if ((!passwordcheck) & (attemptsCount<3))
 8000d62:	e6cb      	b.n	8000afc <main+0x38>
 8000d64:	20000170 	.word	0x20000170
 8000d68:	08003da4 	.word	0x08003da4
 8000d6c:	20000188 	.word	0x20000188
 8000d70:	20000184 	.word	0x20000184
 8000d74:	20000198 	.word	0x20000198
 8000d78:	08003dac 	.word	0x08003dac
 8000d7c:	08003dbc 	.word	0x08003dbc
 8000d80:	20000178 	.word	0x20000178
 8000d84:	08003dc0 	.word	0x08003dc0
 8000d88:	10110000 	.word	0x10110000
 8000d8c:	40010c00 	.word	0x40010c00
 8000d90:	08003dcc 	.word	0x08003dcc
 8000d94:	08003dd4 	.word	0x08003dd4
 8000d98:	08003dd8 	.word	0x08003dd8
 8000d9c:	2000018c 	.word	0x2000018c
 8000da0:	08003dec 	.word	0x08003dec
 8000da4:	20000194 	.word	0x20000194
 8000da8:	08003e04 	.word	0x08003e04
 8000dac:	20000190 	.word	0x20000190
 8000db0:	08003e18 	.word	0x08003e18
 8000db4:	200000e0 	.word	0x200000e0
 8000db8:	20000180 	.word	0x20000180
 8000dbc:	08003e2c 	.word	0x08003e2c

08000dc0 <SystemClock_Config>:
/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void)
{
 8000dc0:	b580      	push	{r7, lr}
 8000dc2:	b090      	sub	sp, #64	; 0x40
 8000dc4:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000dc6:	f107 0318 	add.w	r3, r7, #24
 8000dca:	2228      	movs	r2, #40	; 0x28
 8000dcc:	2100      	movs	r1, #0
 8000dce:	4618      	mov	r0, r3
 8000dd0:	f002 fb44 	bl	800345c <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000dd4:	1d3b      	adds	r3, r7, #4
 8000dd6:	2200      	movs	r2, #0
 8000dd8:	601a      	str	r2, [r3, #0]
 8000dda:	605a      	str	r2, [r3, #4]
 8000ddc:	609a      	str	r2, [r3, #8]
 8000dde:	60da      	str	r2, [r3, #12]
 8000de0:	611a      	str	r2, [r3, #16]

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000de2:	2302      	movs	r3, #2
 8000de4:	61bb      	str	r3, [r7, #24]
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000de6:	2301      	movs	r3, #1
 8000de8:	62bb      	str	r3, [r7, #40]	; 0x28
	RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000dea:	2310      	movs	r3, #16
 8000dec:	62fb      	str	r3, [r7, #44]	; 0x2c
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000dee:	2302      	movs	r3, #2
 8000df0:	637b      	str	r3, [r7, #52]	; 0x34
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI_DIV2;
 8000df2:	2300      	movs	r3, #0
 8000df4:	63bb      	str	r3, [r7, #56]	; 0x38
	RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL2;
 8000df6:	2300      	movs	r3, #0
 8000df8:	63fb      	str	r3, [r7, #60]	; 0x3c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000dfa:	f107 0318 	add.w	r3, r7, #24
 8000dfe:	4618      	mov	r0, r3
 8000e00:	f001 f848 	bl	8001e94 <HAL_RCC_OscConfig>
 8000e04:	4603      	mov	r3, r0
 8000e06:	2b00      	cmp	r3, #0
 8000e08:	d001      	beq.n	8000e0e <SystemClock_Config+0x4e>
	{
		Error_Handler();
 8000e0a:	f000 f9bd 	bl	8001188 <Error_Handler>
	}

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000e0e:	230f      	movs	r3, #15
 8000e10:	607b      	str	r3, [r7, #4]
			|RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000e12:	2302      	movs	r3, #2
 8000e14:	60bb      	str	r3, [r7, #8]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000e16:	2300      	movs	r3, #0
 8000e18:	60fb      	str	r3, [r7, #12]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000e1a:	2300      	movs	r3, #0
 8000e1c:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000e1e:	2300      	movs	r3, #0
 8000e20:	617b      	str	r3, [r7, #20]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000e22:	1d3b      	adds	r3, r7, #4
 8000e24:	2100      	movs	r1, #0
 8000e26:	4618      	mov	r0, r3
 8000e28:	f001 fab6 	bl	8002398 <HAL_RCC_ClockConfig>
 8000e2c:	4603      	mov	r3, r0
 8000e2e:	2b00      	cmp	r3, #0
 8000e30:	d001      	beq.n	8000e36 <SystemClock_Config+0x76>
	{
		Error_Handler();
 8000e32:	f000 f9a9 	bl	8001188 <Error_Handler>
	}
}
 8000e36:	bf00      	nop
 8000e38:	3740      	adds	r7, #64	; 0x40
 8000e3a:	46bd      	mov	sp, r7
 8000e3c:	bd80      	pop	{r7, pc}
	...

08000e40 <MX_I2C1_Init>:
 * @brief I2C1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_I2C1_Init(void)
{
 8000e40:	b580      	push	{r7, lr}
 8000e42:	af00      	add	r7, sp, #0
	/* USER CODE END I2C1_Init 0 */

	/* USER CODE BEGIN I2C1_Init 1 */

	/* USER CODE END I2C1_Init 1 */
	hi2c1.Instance = I2C1;
 8000e44:	4b12      	ldr	r3, [pc, #72]	; (8000e90 <MX_I2C1_Init+0x50>)
 8000e46:	4a13      	ldr	r2, [pc, #76]	; (8000e94 <MX_I2C1_Init+0x54>)
 8000e48:	601a      	str	r2, [r3, #0]
	hi2c1.Init.ClockSpeed = 400000;
 8000e4a:	4b11      	ldr	r3, [pc, #68]	; (8000e90 <MX_I2C1_Init+0x50>)
 8000e4c:	4a12      	ldr	r2, [pc, #72]	; (8000e98 <MX_I2C1_Init+0x58>)
 8000e4e:	605a      	str	r2, [r3, #4]
	hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000e50:	4b0f      	ldr	r3, [pc, #60]	; (8000e90 <MX_I2C1_Init+0x50>)
 8000e52:	2200      	movs	r2, #0
 8000e54:	609a      	str	r2, [r3, #8]
	hi2c1.Init.OwnAddress1 = 0;
 8000e56:	4b0e      	ldr	r3, [pc, #56]	; (8000e90 <MX_I2C1_Init+0x50>)
 8000e58:	2200      	movs	r2, #0
 8000e5a:	60da      	str	r2, [r3, #12]
	hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000e5c:	4b0c      	ldr	r3, [pc, #48]	; (8000e90 <MX_I2C1_Init+0x50>)
 8000e5e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000e62:	611a      	str	r2, [r3, #16]
	hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000e64:	4b0a      	ldr	r3, [pc, #40]	; (8000e90 <MX_I2C1_Init+0x50>)
 8000e66:	2200      	movs	r2, #0
 8000e68:	615a      	str	r2, [r3, #20]
	hi2c1.Init.OwnAddress2 = 0;
 8000e6a:	4b09      	ldr	r3, [pc, #36]	; (8000e90 <MX_I2C1_Init+0x50>)
 8000e6c:	2200      	movs	r2, #0
 8000e6e:	619a      	str	r2, [r3, #24]
	hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000e70:	4b07      	ldr	r3, [pc, #28]	; (8000e90 <MX_I2C1_Init+0x50>)
 8000e72:	2200      	movs	r2, #0
 8000e74:	61da      	str	r2, [r3, #28]
	hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000e76:	4b06      	ldr	r3, [pc, #24]	; (8000e90 <MX_I2C1_Init+0x50>)
 8000e78:	2200      	movs	r2, #0
 8000e7a:	621a      	str	r2, [r3, #32]
	if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000e7c:	4804      	ldr	r0, [pc, #16]	; (8000e90 <MX_I2C1_Init+0x50>)
 8000e7e:	f000 fead 	bl	8001bdc <HAL_I2C_Init>
 8000e82:	4603      	mov	r3, r0
 8000e84:	2b00      	cmp	r3, #0
 8000e86:	d001      	beq.n	8000e8c <MX_I2C1_Init+0x4c>
	{
		Error_Handler();
 8000e88:	f000 f97e 	bl	8001188 <Error_Handler>
	}
	/* USER CODE BEGIN I2C1_Init 2 */

	/* USER CODE END I2C1_Init 2 */

}
 8000e8c:	bf00      	nop
 8000e8e:	bd80      	pop	{r7, pc}
 8000e90:	2000008c 	.word	0x2000008c
 8000e94:	40005400 	.word	0x40005400
 8000e98:	00061a80 	.word	0x00061a80

08000e9c <MX_TIM2_Init>:
 * @brief TIM2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM2_Init(void)
{
 8000e9c:	b580      	push	{r7, lr}
 8000e9e:	b08e      	sub	sp, #56	; 0x38
 8000ea0:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM2_Init 0 */

	/* USER CODE END TIM2_Init 0 */

	TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000ea2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000ea6:	2200      	movs	r2, #0
 8000ea8:	601a      	str	r2, [r3, #0]
 8000eaa:	605a      	str	r2, [r3, #4]
 8000eac:	609a      	str	r2, [r3, #8]
 8000eae:	60da      	str	r2, [r3, #12]
	TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000eb0:	f107 0320 	add.w	r3, r7, #32
 8000eb4:	2200      	movs	r2, #0
 8000eb6:	601a      	str	r2, [r3, #0]
 8000eb8:	605a      	str	r2, [r3, #4]
	TIM_OC_InitTypeDef sConfigOC = {0};
 8000eba:	1d3b      	adds	r3, r7, #4
 8000ebc:	2200      	movs	r2, #0
 8000ebe:	601a      	str	r2, [r3, #0]
 8000ec0:	605a      	str	r2, [r3, #4]
 8000ec2:	609a      	str	r2, [r3, #8]
 8000ec4:	60da      	str	r2, [r3, #12]
 8000ec6:	611a      	str	r2, [r3, #16]
 8000ec8:	615a      	str	r2, [r3, #20]
 8000eca:	619a      	str	r2, [r3, #24]

	/* USER CODE BEGIN TIM2_Init 1 */

	/* USER CODE END TIM2_Init 1 */
	htim2.Instance = TIM2;
 8000ecc:	4b2d      	ldr	r3, [pc, #180]	; (8000f84 <MX_TIM2_Init+0xe8>)
 8000ece:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000ed2:	601a      	str	r2, [r3, #0]
	htim2.Init.Prescaler = 160 -1;
 8000ed4:	4b2b      	ldr	r3, [pc, #172]	; (8000f84 <MX_TIM2_Init+0xe8>)
 8000ed6:	229f      	movs	r2, #159	; 0x9f
 8000ed8:	605a      	str	r2, [r3, #4]
	htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000eda:	4b2a      	ldr	r3, [pc, #168]	; (8000f84 <MX_TIM2_Init+0xe8>)
 8000edc:	2200      	movs	r2, #0
 8000ede:	609a      	str	r2, [r3, #8]
	htim2.Init.Period = 1000;
 8000ee0:	4b28      	ldr	r3, [pc, #160]	; (8000f84 <MX_TIM2_Init+0xe8>)
 8000ee2:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000ee6:	60da      	str	r2, [r3, #12]
	htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000ee8:	4b26      	ldr	r3, [pc, #152]	; (8000f84 <MX_TIM2_Init+0xe8>)
 8000eea:	2200      	movs	r2, #0
 8000eec:	611a      	str	r2, [r3, #16]
	htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000eee:	4b25      	ldr	r3, [pc, #148]	; (8000f84 <MX_TIM2_Init+0xe8>)
 8000ef0:	2200      	movs	r2, #0
 8000ef2:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000ef4:	4823      	ldr	r0, [pc, #140]	; (8000f84 <MX_TIM2_Init+0xe8>)
 8000ef6:	f001 fbdd 	bl	80026b4 <HAL_TIM_Base_Init>
 8000efa:	4603      	mov	r3, r0
 8000efc:	2b00      	cmp	r3, #0
 8000efe:	d001      	beq.n	8000f04 <MX_TIM2_Init+0x68>
	{
		Error_Handler();
 8000f00:	f000 f942 	bl	8001188 <Error_Handler>
	}
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000f04:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000f08:	62bb      	str	r3, [r7, #40]	; 0x28
	if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000f0a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000f0e:	4619      	mov	r1, r3
 8000f10:	481c      	ldr	r0, [pc, #112]	; (8000f84 <MX_TIM2_Init+0xe8>)
 8000f12:	f001 fdd5 	bl	8002ac0 <HAL_TIM_ConfigClockSource>
 8000f16:	4603      	mov	r3, r0
 8000f18:	2b00      	cmp	r3, #0
 8000f1a:	d001      	beq.n	8000f20 <MX_TIM2_Init+0x84>
	{
		Error_Handler();
 8000f1c:	f000 f934 	bl	8001188 <Error_Handler>
	}
	if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8000f20:	4818      	ldr	r0, [pc, #96]	; (8000f84 <MX_TIM2_Init+0xe8>)
 8000f22:	f001 fc16 	bl	8002752 <HAL_TIM_PWM_Init>
 8000f26:	4603      	mov	r3, r0
 8000f28:	2b00      	cmp	r3, #0
 8000f2a:	d001      	beq.n	8000f30 <MX_TIM2_Init+0x94>
	{
		Error_Handler();
 8000f2c:	f000 f92c 	bl	8001188 <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000f30:	2300      	movs	r3, #0
 8000f32:	623b      	str	r3, [r7, #32]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000f34:	2300      	movs	r3, #0
 8000f36:	627b      	str	r3, [r7, #36]	; 0x24
	if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000f38:	f107 0320 	add.w	r3, r7, #32
 8000f3c:	4619      	mov	r1, r3
 8000f3e:	4811      	ldr	r0, [pc, #68]	; (8000f84 <MX_TIM2_Init+0xe8>)
 8000f40:	f002 f92c 	bl	800319c <HAL_TIMEx_MasterConfigSynchronization>
 8000f44:	4603      	mov	r3, r0
 8000f46:	2b00      	cmp	r3, #0
 8000f48:	d001      	beq.n	8000f4e <MX_TIM2_Init+0xb2>
	{
		Error_Handler();
 8000f4a:	f000 f91d 	bl	8001188 <Error_Handler>
	}
	sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000f4e:	2360      	movs	r3, #96	; 0x60
 8000f50:	607b      	str	r3, [r7, #4]
	sConfigOC.Pulse = 0;
 8000f52:	2300      	movs	r3, #0
 8000f54:	60bb      	str	r3, [r7, #8]
	sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000f56:	2300      	movs	r3, #0
 8000f58:	60fb      	str	r3, [r7, #12]
	sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000f5a:	2300      	movs	r3, #0
 8000f5c:	617b      	str	r3, [r7, #20]
	if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000f5e:	1d3b      	adds	r3, r7, #4
 8000f60:	2204      	movs	r2, #4
 8000f62:	4619      	mov	r1, r3
 8000f64:	4807      	ldr	r0, [pc, #28]	; (8000f84 <MX_TIM2_Init+0xe8>)
 8000f66:	f001 fce9 	bl	800293c <HAL_TIM_PWM_ConfigChannel>
 8000f6a:	4603      	mov	r3, r0
 8000f6c:	2b00      	cmp	r3, #0
 8000f6e:	d001      	beq.n	8000f74 <MX_TIM2_Init+0xd8>
	{
		Error_Handler();
 8000f70:	f000 f90a 	bl	8001188 <Error_Handler>
	}
	/* USER CODE BEGIN TIM2_Init 2 */

	/* USER CODE END TIM2_Init 2 */
	HAL_TIM_MspPostInit(&htim2);
 8000f74:	4803      	ldr	r0, [pc, #12]	; (8000f84 <MX_TIM2_Init+0xe8>)
 8000f76:	f000 f9a5 	bl	80012c4 <HAL_TIM_MspPostInit>

}
 8000f7a:	bf00      	nop
 8000f7c:	3738      	adds	r7, #56	; 0x38
 8000f7e:	46bd      	mov	sp, r7
 8000f80:	bd80      	pop	{r7, pc}
 8000f82:	bf00      	nop
 8000f84:	200000e0 	.word	0x200000e0

08000f88 <MX_USART1_UART_Init>:
 * @brief USART1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART1_UART_Init(void)
{
 8000f88:	b580      	push	{r7, lr}
 8000f8a:	af00      	add	r7, sp, #0
	/* USER CODE END USART1_Init 0 */

	/* USER CODE BEGIN USART1_Init 1 */

	/* USER CODE END USART1_Init 1 */
	huart1.Instance = USART1;
 8000f8c:	4b11      	ldr	r3, [pc, #68]	; (8000fd4 <MX_USART1_UART_Init+0x4c>)
 8000f8e:	4a12      	ldr	r2, [pc, #72]	; (8000fd8 <MX_USART1_UART_Init+0x50>)
 8000f90:	601a      	str	r2, [r3, #0]
	huart1.Init.BaudRate = 115200;
 8000f92:	4b10      	ldr	r3, [pc, #64]	; (8000fd4 <MX_USART1_UART_Init+0x4c>)
 8000f94:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000f98:	605a      	str	r2, [r3, #4]
	huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000f9a:	4b0e      	ldr	r3, [pc, #56]	; (8000fd4 <MX_USART1_UART_Init+0x4c>)
 8000f9c:	2200      	movs	r2, #0
 8000f9e:	609a      	str	r2, [r3, #8]
	huart1.Init.StopBits = UART_STOPBITS_1;
 8000fa0:	4b0c      	ldr	r3, [pc, #48]	; (8000fd4 <MX_USART1_UART_Init+0x4c>)
 8000fa2:	2200      	movs	r2, #0
 8000fa4:	60da      	str	r2, [r3, #12]
	huart1.Init.Parity = UART_PARITY_NONE;
 8000fa6:	4b0b      	ldr	r3, [pc, #44]	; (8000fd4 <MX_USART1_UART_Init+0x4c>)
 8000fa8:	2200      	movs	r2, #0
 8000faa:	611a      	str	r2, [r3, #16]
	huart1.Init.Mode = UART_MODE_TX_RX;
 8000fac:	4b09      	ldr	r3, [pc, #36]	; (8000fd4 <MX_USART1_UART_Init+0x4c>)
 8000fae:	220c      	movs	r2, #12
 8000fb0:	615a      	str	r2, [r3, #20]
	huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000fb2:	4b08      	ldr	r3, [pc, #32]	; (8000fd4 <MX_USART1_UART_Init+0x4c>)
 8000fb4:	2200      	movs	r2, #0
 8000fb6:	619a      	str	r2, [r3, #24]
	huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000fb8:	4b06      	ldr	r3, [pc, #24]	; (8000fd4 <MX_USART1_UART_Init+0x4c>)
 8000fba:	2200      	movs	r2, #0
 8000fbc:	61da      	str	r2, [r3, #28]
	if (HAL_UART_Init(&huart1) != HAL_OK)
 8000fbe:	4805      	ldr	r0, [pc, #20]	; (8000fd4 <MX_USART1_UART_Init+0x4c>)
 8000fc0:	f002 f944 	bl	800324c <HAL_UART_Init>
 8000fc4:	4603      	mov	r3, r0
 8000fc6:	2b00      	cmp	r3, #0
 8000fc8:	d001      	beq.n	8000fce <MX_USART1_UART_Init+0x46>
	{
		Error_Handler();
 8000fca:	f000 f8dd 	bl	8001188 <Error_Handler>
	}
	/* USER CODE BEGIN USART1_Init 2 */

	/* USER CODE END USART1_Init 2 */

}
 8000fce:	bf00      	nop
 8000fd0:	bd80      	pop	{r7, pc}
 8000fd2:	bf00      	nop
 8000fd4:	20000128 	.word	0x20000128
 8000fd8:	40013800 	.word	0x40013800

08000fdc <MX_GPIO_Init>:
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void)
{
 8000fdc:	b580      	push	{r7, lr}
 8000fde:	b086      	sub	sp, #24
 8000fe0:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000fe2:	f107 0308 	add.w	r3, r7, #8
 8000fe6:	2200      	movs	r2, #0
 8000fe8:	601a      	str	r2, [r3, #0]
 8000fea:	605a      	str	r2, [r3, #4]
 8000fec:	609a      	str	r2, [r3, #8]
 8000fee:	60da      	str	r2, [r3, #12]
	/* USER CODE BEGIN MX_GPIO_Init_1 */
	/* USER CODE END MX_GPIO_Init_1 */

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOA_CLK_ENABLE();
 8000ff0:	4b32      	ldr	r3, [pc, #200]	; (80010bc <MX_GPIO_Init+0xe0>)
 8000ff2:	699b      	ldr	r3, [r3, #24]
 8000ff4:	4a31      	ldr	r2, [pc, #196]	; (80010bc <MX_GPIO_Init+0xe0>)
 8000ff6:	f043 0304 	orr.w	r3, r3, #4
 8000ffa:	6193      	str	r3, [r2, #24]
 8000ffc:	4b2f      	ldr	r3, [pc, #188]	; (80010bc <MX_GPIO_Init+0xe0>)
 8000ffe:	699b      	ldr	r3, [r3, #24]
 8001000:	f003 0304 	and.w	r3, r3, #4
 8001004:	607b      	str	r3, [r7, #4]
 8001006:	687b      	ldr	r3, [r7, #4]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 8001008:	4b2c      	ldr	r3, [pc, #176]	; (80010bc <MX_GPIO_Init+0xe0>)
 800100a:	699b      	ldr	r3, [r3, #24]
 800100c:	4a2b      	ldr	r2, [pc, #172]	; (80010bc <MX_GPIO_Init+0xe0>)
 800100e:	f043 0308 	orr.w	r3, r3, #8
 8001012:	6193      	str	r3, [r2, #24]
 8001014:	4b29      	ldr	r3, [pc, #164]	; (80010bc <MX_GPIO_Init+0xe0>)
 8001016:	699b      	ldr	r3, [r3, #24]
 8001018:	f003 0308 	and.w	r3, r3, #8
 800101c:	603b      	str	r3, [r7, #0]
 800101e:	683b      	ldr	r3, [r7, #0]

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 8001020:	2200      	movs	r2, #0
 8001022:	f640 110f 	movw	r1, #2319	; 0x90f
 8001026:	4826      	ldr	r0, [pc, #152]	; (80010c0 <MX_GPIO_Init+0xe4>)
 8001028:	f000 fda7 	bl	8001b7a <HAL_GPIO_WritePin>
			|GPIO_PIN_8|GPIO_PIN_11, GPIO_PIN_RESET);

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13
 800102c:	2200      	movs	r2, #0
 800102e:	f64f 4120 	movw	r1, #64544	; 0xfc20
 8001032:	4824      	ldr	r0, [pc, #144]	; (80010c4 <MX_GPIO_Init+0xe8>)
 8001034:	f000 fda1 	bl	8001b7a <HAL_GPIO_WritePin>
			|GPIO_PIN_14|GPIO_PIN_15|GPIO_PIN_5, GPIO_PIN_RESET);

	/*Configure GPIO pins : PA0 PA1 PA2 PA3
                           PA8 PA11 */
	GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 8001038:	f640 130f 	movw	r3, #2319	; 0x90f
 800103c:	60bb      	str	r3, [r7, #8]
			|GPIO_PIN_8|GPIO_PIN_11;
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800103e:	2301      	movs	r3, #1
 8001040:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001042:	2300      	movs	r3, #0
 8001044:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001046:	2302      	movs	r3, #2
 8001048:	617b      	str	r3, [r7, #20]
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800104a:	f107 0308 	add.w	r3, r7, #8
 800104e:	4619      	mov	r1, r3
 8001050:	481b      	ldr	r0, [pc, #108]	; (80010c0 <MX_GPIO_Init+0xe4>)
 8001052:	f000 fbff 	bl	8001854 <HAL_GPIO_Init>

	/*Configure GPIO pins : PA4 PA5 PA6 PA7 */
	GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8001056:	23f0      	movs	r3, #240	; 0xf0
 8001058:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800105a:	2300      	movs	r3, #0
 800105c:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Pull = GPIO_PULLUP;
 800105e:	2301      	movs	r3, #1
 8001060:	613b      	str	r3, [r7, #16]
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001062:	f107 0308 	add.w	r3, r7, #8
 8001066:	4619      	mov	r1, r3
 8001068:	4815      	ldr	r0, [pc, #84]	; (80010c0 <MX_GPIO_Init+0xe4>)
 800106a:	f000 fbf3 	bl	8001854 <HAL_GPIO_Init>

	/*Configure GPIO pins : PB10 PB11 PB12 PB13
                           PB14 PB15 PB5 */
	GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13
 800106e:	f64f 4320 	movw	r3, #64544	; 0xfc20
 8001072:	60bb      	str	r3, [r7, #8]
			|GPIO_PIN_14|GPIO_PIN_15|GPIO_PIN_5;
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001074:	2301      	movs	r3, #1
 8001076:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001078:	2300      	movs	r3, #0
 800107a:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800107c:	2302      	movs	r3, #2
 800107e:	617b      	str	r3, [r7, #20]
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001080:	f107 0308 	add.w	r3, r7, #8
 8001084:	4619      	mov	r1, r3
 8001086:	480f      	ldr	r0, [pc, #60]	; (80010c4 <MX_GPIO_Init+0xe8>)
 8001088:	f000 fbe4 	bl	8001854 <HAL_GPIO_Init>
	/* USER CODE BEGIN MX_GPIO_Init_2 */




	GPIO_InitStruct.Pin = GPIO_PIN_2;
 800108c:	2304      	movs	r3, #4
 800108e:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001090:	4b0d      	ldr	r3, [pc, #52]	; (80010c8 <MX_GPIO_Init+0xec>)
 8001092:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001094:	2300      	movs	r3, #0
 8001096:	613b      	str	r3, [r7, #16]
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001098:	f107 0308 	add.w	r3, r7, #8
 800109c:	4619      	mov	r1, r3
 800109e:	4809      	ldr	r0, [pc, #36]	; (80010c4 <MX_GPIO_Init+0xe8>)
 80010a0:	f000 fbd8 	bl	8001854 <HAL_GPIO_Init>


	HAL_NVIC_SetPriority(EXTI2_IRQn, 0, 0);
 80010a4:	2200      	movs	r2, #0
 80010a6:	2100      	movs	r1, #0
 80010a8:	2008      	movs	r0, #8
 80010aa:	f000 fb9c 	bl	80017e6 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(EXTI2_IRQn);
 80010ae:	2008      	movs	r0, #8
 80010b0:	f000 fbb5 	bl	800181e <HAL_NVIC_EnableIRQ>
	/* USER CODE END MX_GPIO_Init_2 */
}
 80010b4:	bf00      	nop
 80010b6:	3718      	adds	r7, #24
 80010b8:	46bd      	mov	sp, r7
 80010ba:	bd80      	pop	{r7, pc}
 80010bc:	40021000 	.word	0x40021000
 80010c0:	40010800 	.word	0x40010800
 80010c4:	40010c00 	.word	0x40010c00
 80010c8:	10110000 	.word	0x10110000

080010cc <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 4 */


void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80010cc:	b480      	push	{r7}
 80010ce:	b083      	sub	sp, #12
 80010d0:	af00      	add	r7, sp, #0
 80010d2:	4603      	mov	r3, r0
 80010d4:	80fb      	strh	r3, [r7, #6]
	switch(GPIO_Pin)
 80010d6:	88fb      	ldrh	r3, [r7, #6]
 80010d8:	2b04      	cmp	r3, #4
 80010da:	d00e      	beq.n	80010fa <HAL_GPIO_EXTI_Callback+0x2e>
 80010dc:	2b04      	cmp	r3, #4
 80010de:	dc10      	bgt.n	8001102 <HAL_GPIO_EXTI_Callback+0x36>
 80010e0:	2b01      	cmp	r3, #1
 80010e2:	d002      	beq.n	80010ea <HAL_GPIO_EXTI_Callback+0x1e>
 80010e4:	2b02      	cmp	r3, #2
 80010e6:	d004      	beq.n	80010f2 <HAL_GPIO_EXTI_Callback+0x26>
	case desactivateBuzzerPB:
		buzzerDesact = 1;
		break;
	}

}
 80010e8:	e00b      	b.n	8001102 <HAL_GPIO_EXTI_Callback+0x36>
		newPass = 1;
 80010ea:	4b08      	ldr	r3, [pc, #32]	; (800110c <HAL_GPIO_EXTI_Callback+0x40>)
 80010ec:	2201      	movs	r2, #1
 80010ee:	601a      	str	r2, [r3, #0]
		break;
 80010f0:	e007      	b.n	8001102 <HAL_GPIO_EXTI_Callback+0x36>
		doorUnlock = 1;
 80010f2:	4b07      	ldr	r3, [pc, #28]	; (8001110 <HAL_GPIO_EXTI_Callback+0x44>)
 80010f4:	2201      	movs	r2, #1
 80010f6:	601a      	str	r2, [r3, #0]
		break;
 80010f8:	e003      	b.n	8001102 <HAL_GPIO_EXTI_Callback+0x36>
		buzzerDesact = 1;
 80010fa:	4b06      	ldr	r3, [pc, #24]	; (8001114 <HAL_GPIO_EXTI_Callback+0x48>)
 80010fc:	2201      	movs	r2, #1
 80010fe:	601a      	str	r2, [r3, #0]
		break;
 8001100:	bf00      	nop
}
 8001102:	bf00      	nop
 8001104:	370c      	adds	r7, #12
 8001106:	46bd      	mov	sp, r7
 8001108:	bc80      	pop	{r7}
 800110a:	4770      	bx	lr
 800110c:	2000018c 	.word	0x2000018c
 8001110:	20000190 	.word	0x20000190
 8001114:	20000180 	.word	0x20000180

08001118 <SetServoAngle>:

void SetServoAngle(int angle)
{
 8001118:	b580      	push	{r7, lr}
 800111a:	b084      	sub	sp, #16
 800111c:	af00      	add	r7, sp, #0
 800111e:	6078      	str	r0, [r7, #4]
	if (angle >180)
 8001120:	687b      	ldr	r3, [r7, #4]
 8001122:	2bb4      	cmp	r3, #180	; 0xb4
 8001124:	dd02      	ble.n	800112c <SetServoAngle+0x14>
	{
		angle = 180;
 8001126:	23b4      	movs	r3, #180	; 0xb4
 8001128:	607b      	str	r3, [r7, #4]
 800112a:	e004      	b.n	8001136 <SetServoAngle+0x1e>
	}
	else if(angle < 0)
 800112c:	687b      	ldr	r3, [r7, #4]
 800112e:	2b00      	cmp	r3, #0
 8001130:	da01      	bge.n	8001136 <SetServoAngle+0x1e>
	{
		angle =0;
 8001132:	2300      	movs	r3, #0
 8001134:	607b      	str	r3, [r7, #4]

	/*	pulseWidth = 0.5 + 0.0111 * angle
	dutyCycle =  (0.5 + 0.0111 * angle) /20
	CCR1 = dutyCycle * ARR*/

	uint32_t pulse = 25 + 0.55 * angle;
 8001136:	6878      	ldr	r0, [r7, #4]
 8001138:	f7ff fa90 	bl	800065c <__aeabi_i2d>
 800113c:	a30e      	add	r3, pc, #56	; (adr r3, 8001178 <SetServoAngle+0x60>)
 800113e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001142:	f7ff f80f 	bl	8000164 <__aeabi_dmul>
 8001146:	4602      	mov	r2, r0
 8001148:	460b      	mov	r3, r1
 800114a:	4610      	mov	r0, r2
 800114c:	4619      	mov	r1, r3
 800114e:	f04f 0200 	mov.w	r2, #0
 8001152:	4b0b      	ldr	r3, [pc, #44]	; (8001180 <SetServoAngle+0x68>)
 8001154:	f7ff f936 	bl	80003c4 <__adddf3>
 8001158:	4602      	mov	r2, r0
 800115a:	460b      	mov	r3, r1
 800115c:	4610      	mov	r0, r2
 800115e:	4619      	mov	r1, r3
 8001160:	f7ff fae6 	bl	8000730 <__aeabi_d2uiz>
 8001164:	4603      	mov	r3, r0
 8001166:	60fb      	str	r3, [r7, #12]
	__HAL_TIM_SET_COMPARE(&PWM_Timer, PWM_Channel,pulse);
 8001168:	4b06      	ldr	r3, [pc, #24]	; (8001184 <SetServoAngle+0x6c>)
 800116a:	681b      	ldr	r3, [r3, #0]
 800116c:	68fa      	ldr	r2, [r7, #12]
 800116e:	639a      	str	r2, [r3, #56]	; 0x38

}
 8001170:	bf00      	nop
 8001172:	3710      	adds	r7, #16
 8001174:	46bd      	mov	sp, r7
 8001176:	bd80      	pop	{r7, pc}
 8001178:	9999999a 	.word	0x9999999a
 800117c:	3fe19999 	.word	0x3fe19999
 8001180:	40390000 	.word	0x40390000
 8001184:	200000e0 	.word	0x200000e0

08001188 <Error_Handler>:
/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void)
{
 8001188:	b480      	push	{r7}
 800118a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800118c:	b672      	cpsid	i
}
 800118e:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1)
 8001190:	e7fe      	b.n	8001190 <Error_Handler+0x8>
	...

08001194 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001194:	b580      	push	{r7, lr}
 8001196:	b082      	sub	sp, #8
 8001198:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800119a:	4b12      	ldr	r3, [pc, #72]	; (80011e4 <HAL_MspInit+0x50>)
 800119c:	699b      	ldr	r3, [r3, #24]
 800119e:	4a11      	ldr	r2, [pc, #68]	; (80011e4 <HAL_MspInit+0x50>)
 80011a0:	f043 0301 	orr.w	r3, r3, #1
 80011a4:	6193      	str	r3, [r2, #24]
 80011a6:	4b0f      	ldr	r3, [pc, #60]	; (80011e4 <HAL_MspInit+0x50>)
 80011a8:	699b      	ldr	r3, [r3, #24]
 80011aa:	f003 0301 	and.w	r3, r3, #1
 80011ae:	607b      	str	r3, [r7, #4]
 80011b0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80011b2:	4b0c      	ldr	r3, [pc, #48]	; (80011e4 <HAL_MspInit+0x50>)
 80011b4:	69db      	ldr	r3, [r3, #28]
 80011b6:	4a0b      	ldr	r2, [pc, #44]	; (80011e4 <HAL_MspInit+0x50>)
 80011b8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80011bc:	61d3      	str	r3, [r2, #28]
 80011be:	4b09      	ldr	r3, [pc, #36]	; (80011e4 <HAL_MspInit+0x50>)
 80011c0:	69db      	ldr	r3, [r3, #28]
 80011c2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80011c6:	603b      	str	r3, [r7, #0]
 80011c8:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /* Peripheral interrupt init */
  /* PVD_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PVD_IRQn, 0, 0);
 80011ca:	2200      	movs	r2, #0
 80011cc:	2100      	movs	r1, #0
 80011ce:	2001      	movs	r0, #1
 80011d0:	f000 fb09 	bl	80017e6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(PVD_IRQn);
 80011d4:	2001      	movs	r0, #1
 80011d6:	f000 fb22 	bl	800181e <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80011da:	bf00      	nop
 80011dc:	3708      	adds	r7, #8
 80011de:	46bd      	mov	sp, r7
 80011e0:	bd80      	pop	{r7, pc}
 80011e2:	bf00      	nop
 80011e4:	40021000 	.word	0x40021000

080011e8 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80011e8:	b580      	push	{r7, lr}
 80011ea:	b08a      	sub	sp, #40	; 0x28
 80011ec:	af00      	add	r7, sp, #0
 80011ee:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80011f0:	f107 0314 	add.w	r3, r7, #20
 80011f4:	2200      	movs	r2, #0
 80011f6:	601a      	str	r2, [r3, #0]
 80011f8:	605a      	str	r2, [r3, #4]
 80011fa:	609a      	str	r2, [r3, #8]
 80011fc:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 80011fe:	687b      	ldr	r3, [r7, #4]
 8001200:	681b      	ldr	r3, [r3, #0]
 8001202:	4a1e      	ldr	r2, [pc, #120]	; (800127c <HAL_I2C_MspInit+0x94>)
 8001204:	4293      	cmp	r3, r2
 8001206:	d134      	bne.n	8001272 <HAL_I2C_MspInit+0x8a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001208:	4b1d      	ldr	r3, [pc, #116]	; (8001280 <HAL_I2C_MspInit+0x98>)
 800120a:	699b      	ldr	r3, [r3, #24]
 800120c:	4a1c      	ldr	r2, [pc, #112]	; (8001280 <HAL_I2C_MspInit+0x98>)
 800120e:	f043 0308 	orr.w	r3, r3, #8
 8001212:	6193      	str	r3, [r2, #24]
 8001214:	4b1a      	ldr	r3, [pc, #104]	; (8001280 <HAL_I2C_MspInit+0x98>)
 8001216:	699b      	ldr	r3, [r3, #24]
 8001218:	f003 0308 	and.w	r3, r3, #8
 800121c:	613b      	str	r3, [r7, #16]
 800121e:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8001220:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001224:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001226:	2312      	movs	r3, #18
 8001228:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800122a:	2300      	movs	r3, #0
 800122c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800122e:	2303      	movs	r3, #3
 8001230:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001232:	f107 0314 	add.w	r3, r7, #20
 8001236:	4619      	mov	r1, r3
 8001238:	4812      	ldr	r0, [pc, #72]	; (8001284 <HAL_I2C_MspInit+0x9c>)
 800123a:	f000 fb0b 	bl	8001854 <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_I2C1_ENABLE();
 800123e:	4b12      	ldr	r3, [pc, #72]	; (8001288 <HAL_I2C_MspInit+0xa0>)
 8001240:	685b      	ldr	r3, [r3, #4]
 8001242:	627b      	str	r3, [r7, #36]	; 0x24
 8001244:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001246:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 800124a:	627b      	str	r3, [r7, #36]	; 0x24
 800124c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800124e:	f043 0302 	orr.w	r3, r3, #2
 8001252:	627b      	str	r3, [r7, #36]	; 0x24
 8001254:	4a0c      	ldr	r2, [pc, #48]	; (8001288 <HAL_I2C_MspInit+0xa0>)
 8001256:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001258:	6053      	str	r3, [r2, #4]

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800125a:	4b09      	ldr	r3, [pc, #36]	; (8001280 <HAL_I2C_MspInit+0x98>)
 800125c:	69db      	ldr	r3, [r3, #28]
 800125e:	4a08      	ldr	r2, [pc, #32]	; (8001280 <HAL_I2C_MspInit+0x98>)
 8001260:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001264:	61d3      	str	r3, [r2, #28]
 8001266:	4b06      	ldr	r3, [pc, #24]	; (8001280 <HAL_I2C_MspInit+0x98>)
 8001268:	69db      	ldr	r3, [r3, #28]
 800126a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800126e:	60fb      	str	r3, [r7, #12]
 8001270:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8001272:	bf00      	nop
 8001274:	3728      	adds	r7, #40	; 0x28
 8001276:	46bd      	mov	sp, r7
 8001278:	bd80      	pop	{r7, pc}
 800127a:	bf00      	nop
 800127c:	40005400 	.word	0x40005400
 8001280:	40021000 	.word	0x40021000
 8001284:	40010c00 	.word	0x40010c00
 8001288:	40010000 	.word	0x40010000

0800128c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 800128c:	b480      	push	{r7}
 800128e:	b085      	sub	sp, #20
 8001290:	af00      	add	r7, sp, #0
 8001292:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8001294:	687b      	ldr	r3, [r7, #4]
 8001296:	681b      	ldr	r3, [r3, #0]
 8001298:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800129c:	d10b      	bne.n	80012b6 <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800129e:	4b08      	ldr	r3, [pc, #32]	; (80012c0 <HAL_TIM_Base_MspInit+0x34>)
 80012a0:	69db      	ldr	r3, [r3, #28]
 80012a2:	4a07      	ldr	r2, [pc, #28]	; (80012c0 <HAL_TIM_Base_MspInit+0x34>)
 80012a4:	f043 0301 	orr.w	r3, r3, #1
 80012a8:	61d3      	str	r3, [r2, #28]
 80012aa:	4b05      	ldr	r3, [pc, #20]	; (80012c0 <HAL_TIM_Base_MspInit+0x34>)
 80012ac:	69db      	ldr	r3, [r3, #28]
 80012ae:	f003 0301 	and.w	r3, r3, #1
 80012b2:	60fb      	str	r3, [r7, #12]
 80012b4:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 80012b6:	bf00      	nop
 80012b8:	3714      	adds	r7, #20
 80012ba:	46bd      	mov	sp, r7
 80012bc:	bc80      	pop	{r7}
 80012be:	4770      	bx	lr
 80012c0:	40021000 	.word	0x40021000

080012c4 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80012c4:	b580      	push	{r7, lr}
 80012c6:	b088      	sub	sp, #32
 80012c8:	af00      	add	r7, sp, #0
 80012ca:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80012cc:	f107 030c 	add.w	r3, r7, #12
 80012d0:	2200      	movs	r2, #0
 80012d2:	601a      	str	r2, [r3, #0]
 80012d4:	605a      	str	r2, [r3, #4]
 80012d6:	609a      	str	r2, [r3, #8]
 80012d8:	60da      	str	r2, [r3, #12]
  if(htim->Instance==TIM2)
 80012da:	687b      	ldr	r3, [r7, #4]
 80012dc:	681b      	ldr	r3, [r3, #0]
 80012de:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80012e2:	d129      	bne.n	8001338 <HAL_TIM_MspPostInit+0x74>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80012e4:	4b16      	ldr	r3, [pc, #88]	; (8001340 <HAL_TIM_MspPostInit+0x7c>)
 80012e6:	699b      	ldr	r3, [r3, #24]
 80012e8:	4a15      	ldr	r2, [pc, #84]	; (8001340 <HAL_TIM_MspPostInit+0x7c>)
 80012ea:	f043 0308 	orr.w	r3, r3, #8
 80012ee:	6193      	str	r3, [r2, #24]
 80012f0:	4b13      	ldr	r3, [pc, #76]	; (8001340 <HAL_TIM_MspPostInit+0x7c>)
 80012f2:	699b      	ldr	r3, [r3, #24]
 80012f4:	f003 0308 	and.w	r3, r3, #8
 80012f8:	60bb      	str	r3, [r7, #8]
 80012fa:	68bb      	ldr	r3, [r7, #8]
    /**TIM2 GPIO Configuration
    PB3     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 80012fc:	2308      	movs	r3, #8
 80012fe:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001300:	2302      	movs	r3, #2
 8001302:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001304:	2302      	movs	r3, #2
 8001306:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001308:	f107 030c 	add.w	r3, r7, #12
 800130c:	4619      	mov	r1, r3
 800130e:	480d      	ldr	r0, [pc, #52]	; (8001344 <HAL_TIM_MspPostInit+0x80>)
 8001310:	f000 faa0 	bl	8001854 <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_TIM2_PARTIAL_1();
 8001314:	4b0c      	ldr	r3, [pc, #48]	; (8001348 <HAL_TIM_MspPostInit+0x84>)
 8001316:	685b      	ldr	r3, [r3, #4]
 8001318:	61fb      	str	r3, [r7, #28]
 800131a:	69fb      	ldr	r3, [r7, #28]
 800131c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001320:	61fb      	str	r3, [r7, #28]
 8001322:	69fb      	ldr	r3, [r7, #28]
 8001324:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 8001328:	61fb      	str	r3, [r7, #28]
 800132a:	69fb      	ldr	r3, [r7, #28]
 800132c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001330:	61fb      	str	r3, [r7, #28]
 8001332:	4a05      	ldr	r2, [pc, #20]	; (8001348 <HAL_TIM_MspPostInit+0x84>)
 8001334:	69fb      	ldr	r3, [r7, #28]
 8001336:	6053      	str	r3, [r2, #4]
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 8001338:	bf00      	nop
 800133a:	3720      	adds	r7, #32
 800133c:	46bd      	mov	sp, r7
 800133e:	bd80      	pop	{r7, pc}
 8001340:	40021000 	.word	0x40021000
 8001344:	40010c00 	.word	0x40010c00
 8001348:	40010000 	.word	0x40010000

0800134c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800134c:	b580      	push	{r7, lr}
 800134e:	b088      	sub	sp, #32
 8001350:	af00      	add	r7, sp, #0
 8001352:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001354:	f107 0310 	add.w	r3, r7, #16
 8001358:	2200      	movs	r2, #0
 800135a:	601a      	str	r2, [r3, #0]
 800135c:	605a      	str	r2, [r3, #4]
 800135e:	609a      	str	r2, [r3, #8]
 8001360:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 8001362:	687b      	ldr	r3, [r7, #4]
 8001364:	681b      	ldr	r3, [r3, #0]
 8001366:	4a1c      	ldr	r2, [pc, #112]	; (80013d8 <HAL_UART_MspInit+0x8c>)
 8001368:	4293      	cmp	r3, r2
 800136a:	d131      	bne.n	80013d0 <HAL_UART_MspInit+0x84>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800136c:	4b1b      	ldr	r3, [pc, #108]	; (80013dc <HAL_UART_MspInit+0x90>)
 800136e:	699b      	ldr	r3, [r3, #24]
 8001370:	4a1a      	ldr	r2, [pc, #104]	; (80013dc <HAL_UART_MspInit+0x90>)
 8001372:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001376:	6193      	str	r3, [r2, #24]
 8001378:	4b18      	ldr	r3, [pc, #96]	; (80013dc <HAL_UART_MspInit+0x90>)
 800137a:	699b      	ldr	r3, [r3, #24]
 800137c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001380:	60fb      	str	r3, [r7, #12]
 8001382:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001384:	4b15      	ldr	r3, [pc, #84]	; (80013dc <HAL_UART_MspInit+0x90>)
 8001386:	699b      	ldr	r3, [r3, #24]
 8001388:	4a14      	ldr	r2, [pc, #80]	; (80013dc <HAL_UART_MspInit+0x90>)
 800138a:	f043 0304 	orr.w	r3, r3, #4
 800138e:	6193      	str	r3, [r2, #24]
 8001390:	4b12      	ldr	r3, [pc, #72]	; (80013dc <HAL_UART_MspInit+0x90>)
 8001392:	699b      	ldr	r3, [r3, #24]
 8001394:	f003 0304 	and.w	r3, r3, #4
 8001398:	60bb      	str	r3, [r7, #8]
 800139a:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 800139c:	f44f 7300 	mov.w	r3, #512	; 0x200
 80013a0:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80013a2:	2302      	movs	r3, #2
 80013a4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80013a6:	2303      	movs	r3, #3
 80013a8:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80013aa:	f107 0310 	add.w	r3, r7, #16
 80013ae:	4619      	mov	r1, r3
 80013b0:	480b      	ldr	r0, [pc, #44]	; (80013e0 <HAL_UART_MspInit+0x94>)
 80013b2:	f000 fa4f 	bl	8001854 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 80013b6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80013ba:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80013bc:	2300      	movs	r3, #0
 80013be:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013c0:	2300      	movs	r3, #0
 80013c2:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80013c4:	f107 0310 	add.w	r3, r7, #16
 80013c8:	4619      	mov	r1, r3
 80013ca:	4805      	ldr	r0, [pc, #20]	; (80013e0 <HAL_UART_MspInit+0x94>)
 80013cc:	f000 fa42 	bl	8001854 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 80013d0:	bf00      	nop
 80013d2:	3720      	adds	r7, #32
 80013d4:	46bd      	mov	sp, r7
 80013d6:	bd80      	pop	{r7, pc}
 80013d8:	40013800 	.word	0x40013800
 80013dc:	40021000 	.word	0x40021000
 80013e0:	40010800 	.word	0x40010800

080013e4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80013e4:	b480      	push	{r7}
 80013e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80013e8:	e7fe      	b.n	80013e8 <NMI_Handler+0x4>

080013ea <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80013ea:	b480      	push	{r7}
 80013ec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80013ee:	e7fe      	b.n	80013ee <HardFault_Handler+0x4>

080013f0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80013f0:	b480      	push	{r7}
 80013f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80013f4:	e7fe      	b.n	80013f4 <MemManage_Handler+0x4>

080013f6 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80013f6:	b480      	push	{r7}
 80013f8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80013fa:	e7fe      	b.n	80013fa <BusFault_Handler+0x4>

080013fc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80013fc:	b480      	push	{r7}
 80013fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001400:	e7fe      	b.n	8001400 <UsageFault_Handler+0x4>

08001402 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001402:	b480      	push	{r7}
 8001404:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001406:	bf00      	nop
 8001408:	46bd      	mov	sp, r7
 800140a:	bc80      	pop	{r7}
 800140c:	4770      	bx	lr

0800140e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800140e:	b480      	push	{r7}
 8001410:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001412:	bf00      	nop
 8001414:	46bd      	mov	sp, r7
 8001416:	bc80      	pop	{r7}
 8001418:	4770      	bx	lr

0800141a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800141a:	b480      	push	{r7}
 800141c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800141e:	bf00      	nop
 8001420:	46bd      	mov	sp, r7
 8001422:	bc80      	pop	{r7}
 8001424:	4770      	bx	lr

08001426 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001426:	b580      	push	{r7, lr}
 8001428:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800142a:	f000 f8c5 	bl	80015b8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800142e:	bf00      	nop
 8001430:	bd80      	pop	{r7, pc}

08001432 <PVD_IRQHandler>:

/**
  * @brief This function handles PVD interrupt through EXTI line 16.
  */
void PVD_IRQHandler(void)
{
 8001432:	b580      	push	{r7, lr}
 8001434:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN PVD_IRQn 0 */

  /* USER CODE END PVD_IRQn 0 */
  HAL_PWR_PVD_IRQHandler();
 8001436:	f000 fd15 	bl	8001e64 <HAL_PWR_PVD_IRQHandler>
  /* USER CODE BEGIN PVD_IRQn 1 */

  /* USER CODE END PVD_IRQn 1 */
}
 800143a:	bf00      	nop
 800143c:	bd80      	pop	{r7, pc}

0800143e <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 800143e:	b580      	push	{r7, lr}
 8001440:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_0);
 8001442:	2001      	movs	r0, #1
 8001444:	f000 fbb2 	bl	8001bac <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 8001448:	bf00      	nop
 800144a:	bd80      	pop	{r7, pc}

0800144c <EXTI1_IRQHandler>:

/**
  * @brief This function handles EXTI line1 interrupt.
  */
void EXTI1_IRQHandler(void)
{
 800144c:	b580      	push	{r7, lr}
 800144e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI1_IRQn 0 */

  /* USER CODE END EXTI1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_1);
 8001450:	2002      	movs	r0, #2
 8001452:	f000 fbab 	bl	8001bac <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI1_IRQn 1 */

  /* USER CODE END EXTI1_IRQn 1 */
}
 8001456:	bf00      	nop
 8001458:	bd80      	pop	{r7, pc}

0800145a <EXTI2_IRQHandler>:

/**
  * @brief This function handles EXTI line2 interrupt.
  */
void EXTI2_IRQHandler(void)
{
 800145a:	b580      	push	{r7, lr}
 800145c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI2_IRQn 0 */

  /* USER CODE END EXTI2_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_2);
 800145e:	2004      	movs	r0, #4
 8001460:	f000 fba4 	bl	8001bac <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI2_IRQn 1 */

  /* USER CODE END EXTI2_IRQn 1 */
}
 8001464:	bf00      	nop
 8001466:	bd80      	pop	{r7, pc}

08001468 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001468:	b580      	push	{r7, lr}
 800146a:	b086      	sub	sp, #24
 800146c:	af00      	add	r7, sp, #0
 800146e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001470:	4a14      	ldr	r2, [pc, #80]	; (80014c4 <_sbrk+0x5c>)
 8001472:	4b15      	ldr	r3, [pc, #84]	; (80014c8 <_sbrk+0x60>)
 8001474:	1ad3      	subs	r3, r2, r3
 8001476:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001478:	697b      	ldr	r3, [r7, #20]
 800147a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800147c:	4b13      	ldr	r3, [pc, #76]	; (80014cc <_sbrk+0x64>)
 800147e:	681b      	ldr	r3, [r3, #0]
 8001480:	2b00      	cmp	r3, #0
 8001482:	d102      	bne.n	800148a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001484:	4b11      	ldr	r3, [pc, #68]	; (80014cc <_sbrk+0x64>)
 8001486:	4a12      	ldr	r2, [pc, #72]	; (80014d0 <_sbrk+0x68>)
 8001488:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800148a:	4b10      	ldr	r3, [pc, #64]	; (80014cc <_sbrk+0x64>)
 800148c:	681a      	ldr	r2, [r3, #0]
 800148e:	687b      	ldr	r3, [r7, #4]
 8001490:	4413      	add	r3, r2
 8001492:	693a      	ldr	r2, [r7, #16]
 8001494:	429a      	cmp	r2, r3
 8001496:	d207      	bcs.n	80014a8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001498:	f001 ffb6 	bl	8003408 <__errno>
 800149c:	4603      	mov	r3, r0
 800149e:	220c      	movs	r2, #12
 80014a0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80014a2:	f04f 33ff 	mov.w	r3, #4294967295
 80014a6:	e009      	b.n	80014bc <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80014a8:	4b08      	ldr	r3, [pc, #32]	; (80014cc <_sbrk+0x64>)
 80014aa:	681b      	ldr	r3, [r3, #0]
 80014ac:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80014ae:	4b07      	ldr	r3, [pc, #28]	; (80014cc <_sbrk+0x64>)
 80014b0:	681a      	ldr	r2, [r3, #0]
 80014b2:	687b      	ldr	r3, [r7, #4]
 80014b4:	4413      	add	r3, r2
 80014b6:	4a05      	ldr	r2, [pc, #20]	; (80014cc <_sbrk+0x64>)
 80014b8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80014ba:	68fb      	ldr	r3, [r7, #12]
}
 80014bc:	4618      	mov	r0, r3
 80014be:	3718      	adds	r7, #24
 80014c0:	46bd      	mov	sp, r7
 80014c2:	bd80      	pop	{r7, pc}
 80014c4:	20002800 	.word	0x20002800
 80014c8:	00000400 	.word	0x00000400
 80014cc:	2000019c 	.word	0x2000019c
 80014d0:	200001b8 	.word	0x200001b8

080014d4 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80014d4:	b480      	push	{r7}
 80014d6:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80014d8:	bf00      	nop
 80014da:	46bd      	mov	sp, r7
 80014dc:	bc80      	pop	{r7}
 80014de:	4770      	bx	lr

080014e0 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 80014e0:	f7ff fff8 	bl	80014d4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80014e4:	480b      	ldr	r0, [pc, #44]	; (8001514 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 80014e6:	490c      	ldr	r1, [pc, #48]	; (8001518 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 80014e8:	4a0c      	ldr	r2, [pc, #48]	; (800151c <LoopFillZerobss+0x16>)
  movs r3, #0
 80014ea:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80014ec:	e002      	b.n	80014f4 <LoopCopyDataInit>

080014ee <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80014ee:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80014f0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80014f2:	3304      	adds	r3, #4

080014f4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80014f4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80014f6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80014f8:	d3f9      	bcc.n	80014ee <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80014fa:	4a09      	ldr	r2, [pc, #36]	; (8001520 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 80014fc:	4c09      	ldr	r4, [pc, #36]	; (8001524 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80014fe:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001500:	e001      	b.n	8001506 <LoopFillZerobss>

08001502 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001502:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001504:	3204      	adds	r2, #4

08001506 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001506:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001508:	d3fb      	bcc.n	8001502 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800150a:	f001 ff83 	bl	8003414 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800150e:	f7ff fad9 	bl	8000ac4 <main>
  bx lr
 8001512:	4770      	bx	lr
  ldr r0, =_sdata
 8001514:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001518:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 800151c:	08003eac 	.word	0x08003eac
  ldr r2, =_sbss
 8001520:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8001524:	200001b4 	.word	0x200001b4

08001528 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001528:	e7fe      	b.n	8001528 <ADC1_2_IRQHandler>
	...

0800152c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800152c:	b580      	push	{r7, lr}
 800152e:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001530:	4b08      	ldr	r3, [pc, #32]	; (8001554 <HAL_Init+0x28>)
 8001532:	681b      	ldr	r3, [r3, #0]
 8001534:	4a07      	ldr	r2, [pc, #28]	; (8001554 <HAL_Init+0x28>)
 8001536:	f043 0310 	orr.w	r3, r3, #16
 800153a:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800153c:	2003      	movs	r0, #3
 800153e:	f000 f947 	bl	80017d0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001542:	200f      	movs	r0, #15
 8001544:	f000 f808 	bl	8001558 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001548:	f7ff fe24 	bl	8001194 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800154c:	2300      	movs	r3, #0
}
 800154e:	4618      	mov	r0, r3
 8001550:	bd80      	pop	{r7, pc}
 8001552:	bf00      	nop
 8001554:	40022000 	.word	0x40022000

08001558 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001558:	b580      	push	{r7, lr}
 800155a:	b082      	sub	sp, #8
 800155c:	af00      	add	r7, sp, #0
 800155e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001560:	4b12      	ldr	r3, [pc, #72]	; (80015ac <HAL_InitTick+0x54>)
 8001562:	681a      	ldr	r2, [r3, #0]
 8001564:	4b12      	ldr	r3, [pc, #72]	; (80015b0 <HAL_InitTick+0x58>)
 8001566:	781b      	ldrb	r3, [r3, #0]
 8001568:	4619      	mov	r1, r3
 800156a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800156e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001572:	fbb2 f3f3 	udiv	r3, r2, r3
 8001576:	4618      	mov	r0, r3
 8001578:	f000 f95f 	bl	800183a <HAL_SYSTICK_Config>
 800157c:	4603      	mov	r3, r0
 800157e:	2b00      	cmp	r3, #0
 8001580:	d001      	beq.n	8001586 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001582:	2301      	movs	r3, #1
 8001584:	e00e      	b.n	80015a4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001586:	687b      	ldr	r3, [r7, #4]
 8001588:	2b0f      	cmp	r3, #15
 800158a:	d80a      	bhi.n	80015a2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800158c:	2200      	movs	r2, #0
 800158e:	6879      	ldr	r1, [r7, #4]
 8001590:	f04f 30ff 	mov.w	r0, #4294967295
 8001594:	f000 f927 	bl	80017e6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001598:	4a06      	ldr	r2, [pc, #24]	; (80015b4 <HAL_InitTick+0x5c>)
 800159a:	687b      	ldr	r3, [r7, #4]
 800159c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800159e:	2300      	movs	r3, #0
 80015a0:	e000      	b.n	80015a4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80015a2:	2301      	movs	r3, #1
}
 80015a4:	4618      	mov	r0, r3
 80015a6:	3708      	adds	r7, #8
 80015a8:	46bd      	mov	sp, r7
 80015aa:	bd80      	pop	{r7, pc}
 80015ac:	20000000 	.word	0x20000000
 80015b0:	20000008 	.word	0x20000008
 80015b4:	20000004 	.word	0x20000004

080015b8 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80015b8:	b480      	push	{r7}
 80015ba:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80015bc:	4b05      	ldr	r3, [pc, #20]	; (80015d4 <HAL_IncTick+0x1c>)
 80015be:	781b      	ldrb	r3, [r3, #0]
 80015c0:	461a      	mov	r2, r3
 80015c2:	4b05      	ldr	r3, [pc, #20]	; (80015d8 <HAL_IncTick+0x20>)
 80015c4:	681b      	ldr	r3, [r3, #0]
 80015c6:	4413      	add	r3, r2
 80015c8:	4a03      	ldr	r2, [pc, #12]	; (80015d8 <HAL_IncTick+0x20>)
 80015ca:	6013      	str	r3, [r2, #0]
}
 80015cc:	bf00      	nop
 80015ce:	46bd      	mov	sp, r7
 80015d0:	bc80      	pop	{r7}
 80015d2:	4770      	bx	lr
 80015d4:	20000008 	.word	0x20000008
 80015d8:	200001a0 	.word	0x200001a0

080015dc <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80015dc:	b480      	push	{r7}
 80015de:	af00      	add	r7, sp, #0
  return uwTick;
 80015e0:	4b02      	ldr	r3, [pc, #8]	; (80015ec <HAL_GetTick+0x10>)
 80015e2:	681b      	ldr	r3, [r3, #0]
}
 80015e4:	4618      	mov	r0, r3
 80015e6:	46bd      	mov	sp, r7
 80015e8:	bc80      	pop	{r7}
 80015ea:	4770      	bx	lr
 80015ec:	200001a0 	.word	0x200001a0

080015f0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80015f0:	b580      	push	{r7, lr}
 80015f2:	b084      	sub	sp, #16
 80015f4:	af00      	add	r7, sp, #0
 80015f6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80015f8:	f7ff fff0 	bl	80015dc <HAL_GetTick>
 80015fc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80015fe:	687b      	ldr	r3, [r7, #4]
 8001600:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001602:	68fb      	ldr	r3, [r7, #12]
 8001604:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001608:	d005      	beq.n	8001616 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800160a:	4b0a      	ldr	r3, [pc, #40]	; (8001634 <HAL_Delay+0x44>)
 800160c:	781b      	ldrb	r3, [r3, #0]
 800160e:	461a      	mov	r2, r3
 8001610:	68fb      	ldr	r3, [r7, #12]
 8001612:	4413      	add	r3, r2
 8001614:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001616:	bf00      	nop
 8001618:	f7ff ffe0 	bl	80015dc <HAL_GetTick>
 800161c:	4602      	mov	r2, r0
 800161e:	68bb      	ldr	r3, [r7, #8]
 8001620:	1ad3      	subs	r3, r2, r3
 8001622:	68fa      	ldr	r2, [r7, #12]
 8001624:	429a      	cmp	r2, r3
 8001626:	d8f7      	bhi.n	8001618 <HAL_Delay+0x28>
  {
  }
}
 8001628:	bf00      	nop
 800162a:	bf00      	nop
 800162c:	3710      	adds	r7, #16
 800162e:	46bd      	mov	sp, r7
 8001630:	bd80      	pop	{r7, pc}
 8001632:	bf00      	nop
 8001634:	20000008 	.word	0x20000008

08001638 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001638:	b480      	push	{r7}
 800163a:	b085      	sub	sp, #20
 800163c:	af00      	add	r7, sp, #0
 800163e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001640:	687b      	ldr	r3, [r7, #4]
 8001642:	f003 0307 	and.w	r3, r3, #7
 8001646:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001648:	4b0c      	ldr	r3, [pc, #48]	; (800167c <__NVIC_SetPriorityGrouping+0x44>)
 800164a:	68db      	ldr	r3, [r3, #12]
 800164c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800164e:	68ba      	ldr	r2, [r7, #8]
 8001650:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001654:	4013      	ands	r3, r2
 8001656:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001658:	68fb      	ldr	r3, [r7, #12]
 800165a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800165c:	68bb      	ldr	r3, [r7, #8]
 800165e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001660:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001664:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001668:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800166a:	4a04      	ldr	r2, [pc, #16]	; (800167c <__NVIC_SetPriorityGrouping+0x44>)
 800166c:	68bb      	ldr	r3, [r7, #8]
 800166e:	60d3      	str	r3, [r2, #12]
}
 8001670:	bf00      	nop
 8001672:	3714      	adds	r7, #20
 8001674:	46bd      	mov	sp, r7
 8001676:	bc80      	pop	{r7}
 8001678:	4770      	bx	lr
 800167a:	bf00      	nop
 800167c:	e000ed00 	.word	0xe000ed00

08001680 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001680:	b480      	push	{r7}
 8001682:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001684:	4b04      	ldr	r3, [pc, #16]	; (8001698 <__NVIC_GetPriorityGrouping+0x18>)
 8001686:	68db      	ldr	r3, [r3, #12]
 8001688:	0a1b      	lsrs	r3, r3, #8
 800168a:	f003 0307 	and.w	r3, r3, #7
}
 800168e:	4618      	mov	r0, r3
 8001690:	46bd      	mov	sp, r7
 8001692:	bc80      	pop	{r7}
 8001694:	4770      	bx	lr
 8001696:	bf00      	nop
 8001698:	e000ed00 	.word	0xe000ed00

0800169c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800169c:	b480      	push	{r7}
 800169e:	b083      	sub	sp, #12
 80016a0:	af00      	add	r7, sp, #0
 80016a2:	4603      	mov	r3, r0
 80016a4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80016a6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80016aa:	2b00      	cmp	r3, #0
 80016ac:	db0b      	blt.n	80016c6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80016ae:	79fb      	ldrb	r3, [r7, #7]
 80016b0:	f003 021f 	and.w	r2, r3, #31
 80016b4:	4906      	ldr	r1, [pc, #24]	; (80016d0 <__NVIC_EnableIRQ+0x34>)
 80016b6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80016ba:	095b      	lsrs	r3, r3, #5
 80016bc:	2001      	movs	r0, #1
 80016be:	fa00 f202 	lsl.w	r2, r0, r2
 80016c2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80016c6:	bf00      	nop
 80016c8:	370c      	adds	r7, #12
 80016ca:	46bd      	mov	sp, r7
 80016cc:	bc80      	pop	{r7}
 80016ce:	4770      	bx	lr
 80016d0:	e000e100 	.word	0xe000e100

080016d4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80016d4:	b480      	push	{r7}
 80016d6:	b083      	sub	sp, #12
 80016d8:	af00      	add	r7, sp, #0
 80016da:	4603      	mov	r3, r0
 80016dc:	6039      	str	r1, [r7, #0]
 80016de:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80016e0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80016e4:	2b00      	cmp	r3, #0
 80016e6:	db0a      	blt.n	80016fe <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80016e8:	683b      	ldr	r3, [r7, #0]
 80016ea:	b2da      	uxtb	r2, r3
 80016ec:	490c      	ldr	r1, [pc, #48]	; (8001720 <__NVIC_SetPriority+0x4c>)
 80016ee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80016f2:	0112      	lsls	r2, r2, #4
 80016f4:	b2d2      	uxtb	r2, r2
 80016f6:	440b      	add	r3, r1
 80016f8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80016fc:	e00a      	b.n	8001714 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80016fe:	683b      	ldr	r3, [r7, #0]
 8001700:	b2da      	uxtb	r2, r3
 8001702:	4908      	ldr	r1, [pc, #32]	; (8001724 <__NVIC_SetPriority+0x50>)
 8001704:	79fb      	ldrb	r3, [r7, #7]
 8001706:	f003 030f 	and.w	r3, r3, #15
 800170a:	3b04      	subs	r3, #4
 800170c:	0112      	lsls	r2, r2, #4
 800170e:	b2d2      	uxtb	r2, r2
 8001710:	440b      	add	r3, r1
 8001712:	761a      	strb	r2, [r3, #24]
}
 8001714:	bf00      	nop
 8001716:	370c      	adds	r7, #12
 8001718:	46bd      	mov	sp, r7
 800171a:	bc80      	pop	{r7}
 800171c:	4770      	bx	lr
 800171e:	bf00      	nop
 8001720:	e000e100 	.word	0xe000e100
 8001724:	e000ed00 	.word	0xe000ed00

08001728 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001728:	b480      	push	{r7}
 800172a:	b089      	sub	sp, #36	; 0x24
 800172c:	af00      	add	r7, sp, #0
 800172e:	60f8      	str	r0, [r7, #12]
 8001730:	60b9      	str	r1, [r7, #8]
 8001732:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001734:	68fb      	ldr	r3, [r7, #12]
 8001736:	f003 0307 	and.w	r3, r3, #7
 800173a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800173c:	69fb      	ldr	r3, [r7, #28]
 800173e:	f1c3 0307 	rsb	r3, r3, #7
 8001742:	2b04      	cmp	r3, #4
 8001744:	bf28      	it	cs
 8001746:	2304      	movcs	r3, #4
 8001748:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800174a:	69fb      	ldr	r3, [r7, #28]
 800174c:	3304      	adds	r3, #4
 800174e:	2b06      	cmp	r3, #6
 8001750:	d902      	bls.n	8001758 <NVIC_EncodePriority+0x30>
 8001752:	69fb      	ldr	r3, [r7, #28]
 8001754:	3b03      	subs	r3, #3
 8001756:	e000      	b.n	800175a <NVIC_EncodePriority+0x32>
 8001758:	2300      	movs	r3, #0
 800175a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800175c:	f04f 32ff 	mov.w	r2, #4294967295
 8001760:	69bb      	ldr	r3, [r7, #24]
 8001762:	fa02 f303 	lsl.w	r3, r2, r3
 8001766:	43da      	mvns	r2, r3
 8001768:	68bb      	ldr	r3, [r7, #8]
 800176a:	401a      	ands	r2, r3
 800176c:	697b      	ldr	r3, [r7, #20]
 800176e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001770:	f04f 31ff 	mov.w	r1, #4294967295
 8001774:	697b      	ldr	r3, [r7, #20]
 8001776:	fa01 f303 	lsl.w	r3, r1, r3
 800177a:	43d9      	mvns	r1, r3
 800177c:	687b      	ldr	r3, [r7, #4]
 800177e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001780:	4313      	orrs	r3, r2
         );
}
 8001782:	4618      	mov	r0, r3
 8001784:	3724      	adds	r7, #36	; 0x24
 8001786:	46bd      	mov	sp, r7
 8001788:	bc80      	pop	{r7}
 800178a:	4770      	bx	lr

0800178c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800178c:	b580      	push	{r7, lr}
 800178e:	b082      	sub	sp, #8
 8001790:	af00      	add	r7, sp, #0
 8001792:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001794:	687b      	ldr	r3, [r7, #4]
 8001796:	3b01      	subs	r3, #1
 8001798:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800179c:	d301      	bcc.n	80017a2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800179e:	2301      	movs	r3, #1
 80017a0:	e00f      	b.n	80017c2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80017a2:	4a0a      	ldr	r2, [pc, #40]	; (80017cc <SysTick_Config+0x40>)
 80017a4:	687b      	ldr	r3, [r7, #4]
 80017a6:	3b01      	subs	r3, #1
 80017a8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80017aa:	210f      	movs	r1, #15
 80017ac:	f04f 30ff 	mov.w	r0, #4294967295
 80017b0:	f7ff ff90 	bl	80016d4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80017b4:	4b05      	ldr	r3, [pc, #20]	; (80017cc <SysTick_Config+0x40>)
 80017b6:	2200      	movs	r2, #0
 80017b8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80017ba:	4b04      	ldr	r3, [pc, #16]	; (80017cc <SysTick_Config+0x40>)
 80017bc:	2207      	movs	r2, #7
 80017be:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80017c0:	2300      	movs	r3, #0
}
 80017c2:	4618      	mov	r0, r3
 80017c4:	3708      	adds	r7, #8
 80017c6:	46bd      	mov	sp, r7
 80017c8:	bd80      	pop	{r7, pc}
 80017ca:	bf00      	nop
 80017cc:	e000e010 	.word	0xe000e010

080017d0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80017d0:	b580      	push	{r7, lr}
 80017d2:	b082      	sub	sp, #8
 80017d4:	af00      	add	r7, sp, #0
 80017d6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80017d8:	6878      	ldr	r0, [r7, #4]
 80017da:	f7ff ff2d 	bl	8001638 <__NVIC_SetPriorityGrouping>
}
 80017de:	bf00      	nop
 80017e0:	3708      	adds	r7, #8
 80017e2:	46bd      	mov	sp, r7
 80017e4:	bd80      	pop	{r7, pc}

080017e6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80017e6:	b580      	push	{r7, lr}
 80017e8:	b086      	sub	sp, #24
 80017ea:	af00      	add	r7, sp, #0
 80017ec:	4603      	mov	r3, r0
 80017ee:	60b9      	str	r1, [r7, #8]
 80017f0:	607a      	str	r2, [r7, #4]
 80017f2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80017f4:	2300      	movs	r3, #0
 80017f6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80017f8:	f7ff ff42 	bl	8001680 <__NVIC_GetPriorityGrouping>
 80017fc:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80017fe:	687a      	ldr	r2, [r7, #4]
 8001800:	68b9      	ldr	r1, [r7, #8]
 8001802:	6978      	ldr	r0, [r7, #20]
 8001804:	f7ff ff90 	bl	8001728 <NVIC_EncodePriority>
 8001808:	4602      	mov	r2, r0
 800180a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800180e:	4611      	mov	r1, r2
 8001810:	4618      	mov	r0, r3
 8001812:	f7ff ff5f 	bl	80016d4 <__NVIC_SetPriority>
}
 8001816:	bf00      	nop
 8001818:	3718      	adds	r7, #24
 800181a:	46bd      	mov	sp, r7
 800181c:	bd80      	pop	{r7, pc}

0800181e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800181e:	b580      	push	{r7, lr}
 8001820:	b082      	sub	sp, #8
 8001822:	af00      	add	r7, sp, #0
 8001824:	4603      	mov	r3, r0
 8001826:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001828:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800182c:	4618      	mov	r0, r3
 800182e:	f7ff ff35 	bl	800169c <__NVIC_EnableIRQ>
}
 8001832:	bf00      	nop
 8001834:	3708      	adds	r7, #8
 8001836:	46bd      	mov	sp, r7
 8001838:	bd80      	pop	{r7, pc}

0800183a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800183a:	b580      	push	{r7, lr}
 800183c:	b082      	sub	sp, #8
 800183e:	af00      	add	r7, sp, #0
 8001840:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001842:	6878      	ldr	r0, [r7, #4]
 8001844:	f7ff ffa2 	bl	800178c <SysTick_Config>
 8001848:	4603      	mov	r3, r0
}
 800184a:	4618      	mov	r0, r3
 800184c:	3708      	adds	r7, #8
 800184e:	46bd      	mov	sp, r7
 8001850:	bd80      	pop	{r7, pc}
	...

08001854 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001854:	b480      	push	{r7}
 8001856:	b08b      	sub	sp, #44	; 0x2c
 8001858:	af00      	add	r7, sp, #0
 800185a:	6078      	str	r0, [r7, #4]
 800185c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800185e:	2300      	movs	r3, #0
 8001860:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8001862:	2300      	movs	r3, #0
 8001864:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001866:	e161      	b.n	8001b2c <HAL_GPIO_Init+0x2d8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001868:	2201      	movs	r2, #1
 800186a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800186c:	fa02 f303 	lsl.w	r3, r2, r3
 8001870:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001872:	683b      	ldr	r3, [r7, #0]
 8001874:	681b      	ldr	r3, [r3, #0]
 8001876:	69fa      	ldr	r2, [r7, #28]
 8001878:	4013      	ands	r3, r2
 800187a:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 800187c:	69ba      	ldr	r2, [r7, #24]
 800187e:	69fb      	ldr	r3, [r7, #28]
 8001880:	429a      	cmp	r2, r3
 8001882:	f040 8150 	bne.w	8001b26 <HAL_GPIO_Init+0x2d2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001886:	683b      	ldr	r3, [r7, #0]
 8001888:	685b      	ldr	r3, [r3, #4]
 800188a:	4a97      	ldr	r2, [pc, #604]	; (8001ae8 <HAL_GPIO_Init+0x294>)
 800188c:	4293      	cmp	r3, r2
 800188e:	d05e      	beq.n	800194e <HAL_GPIO_Init+0xfa>
 8001890:	4a95      	ldr	r2, [pc, #596]	; (8001ae8 <HAL_GPIO_Init+0x294>)
 8001892:	4293      	cmp	r3, r2
 8001894:	d875      	bhi.n	8001982 <HAL_GPIO_Init+0x12e>
 8001896:	4a95      	ldr	r2, [pc, #596]	; (8001aec <HAL_GPIO_Init+0x298>)
 8001898:	4293      	cmp	r3, r2
 800189a:	d058      	beq.n	800194e <HAL_GPIO_Init+0xfa>
 800189c:	4a93      	ldr	r2, [pc, #588]	; (8001aec <HAL_GPIO_Init+0x298>)
 800189e:	4293      	cmp	r3, r2
 80018a0:	d86f      	bhi.n	8001982 <HAL_GPIO_Init+0x12e>
 80018a2:	4a93      	ldr	r2, [pc, #588]	; (8001af0 <HAL_GPIO_Init+0x29c>)
 80018a4:	4293      	cmp	r3, r2
 80018a6:	d052      	beq.n	800194e <HAL_GPIO_Init+0xfa>
 80018a8:	4a91      	ldr	r2, [pc, #580]	; (8001af0 <HAL_GPIO_Init+0x29c>)
 80018aa:	4293      	cmp	r3, r2
 80018ac:	d869      	bhi.n	8001982 <HAL_GPIO_Init+0x12e>
 80018ae:	4a91      	ldr	r2, [pc, #580]	; (8001af4 <HAL_GPIO_Init+0x2a0>)
 80018b0:	4293      	cmp	r3, r2
 80018b2:	d04c      	beq.n	800194e <HAL_GPIO_Init+0xfa>
 80018b4:	4a8f      	ldr	r2, [pc, #572]	; (8001af4 <HAL_GPIO_Init+0x2a0>)
 80018b6:	4293      	cmp	r3, r2
 80018b8:	d863      	bhi.n	8001982 <HAL_GPIO_Init+0x12e>
 80018ba:	4a8f      	ldr	r2, [pc, #572]	; (8001af8 <HAL_GPIO_Init+0x2a4>)
 80018bc:	4293      	cmp	r3, r2
 80018be:	d046      	beq.n	800194e <HAL_GPIO_Init+0xfa>
 80018c0:	4a8d      	ldr	r2, [pc, #564]	; (8001af8 <HAL_GPIO_Init+0x2a4>)
 80018c2:	4293      	cmp	r3, r2
 80018c4:	d85d      	bhi.n	8001982 <HAL_GPIO_Init+0x12e>
 80018c6:	2b12      	cmp	r3, #18
 80018c8:	d82a      	bhi.n	8001920 <HAL_GPIO_Init+0xcc>
 80018ca:	2b12      	cmp	r3, #18
 80018cc:	d859      	bhi.n	8001982 <HAL_GPIO_Init+0x12e>
 80018ce:	a201      	add	r2, pc, #4	; (adr r2, 80018d4 <HAL_GPIO_Init+0x80>)
 80018d0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80018d4:	0800194f 	.word	0x0800194f
 80018d8:	08001929 	.word	0x08001929
 80018dc:	0800193b 	.word	0x0800193b
 80018e0:	0800197d 	.word	0x0800197d
 80018e4:	08001983 	.word	0x08001983
 80018e8:	08001983 	.word	0x08001983
 80018ec:	08001983 	.word	0x08001983
 80018f0:	08001983 	.word	0x08001983
 80018f4:	08001983 	.word	0x08001983
 80018f8:	08001983 	.word	0x08001983
 80018fc:	08001983 	.word	0x08001983
 8001900:	08001983 	.word	0x08001983
 8001904:	08001983 	.word	0x08001983
 8001908:	08001983 	.word	0x08001983
 800190c:	08001983 	.word	0x08001983
 8001910:	08001983 	.word	0x08001983
 8001914:	08001983 	.word	0x08001983
 8001918:	08001931 	.word	0x08001931
 800191c:	08001945 	.word	0x08001945
 8001920:	4a76      	ldr	r2, [pc, #472]	; (8001afc <HAL_GPIO_Init+0x2a8>)
 8001922:	4293      	cmp	r3, r2
 8001924:	d013      	beq.n	800194e <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8001926:	e02c      	b.n	8001982 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001928:	683b      	ldr	r3, [r7, #0]
 800192a:	68db      	ldr	r3, [r3, #12]
 800192c:	623b      	str	r3, [r7, #32]
          break;
 800192e:	e029      	b.n	8001984 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001930:	683b      	ldr	r3, [r7, #0]
 8001932:	68db      	ldr	r3, [r3, #12]
 8001934:	3304      	adds	r3, #4
 8001936:	623b      	str	r3, [r7, #32]
          break;
 8001938:	e024      	b.n	8001984 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 800193a:	683b      	ldr	r3, [r7, #0]
 800193c:	68db      	ldr	r3, [r3, #12]
 800193e:	3308      	adds	r3, #8
 8001940:	623b      	str	r3, [r7, #32]
          break;
 8001942:	e01f      	b.n	8001984 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001944:	683b      	ldr	r3, [r7, #0]
 8001946:	68db      	ldr	r3, [r3, #12]
 8001948:	330c      	adds	r3, #12
 800194a:	623b      	str	r3, [r7, #32]
          break;
 800194c:	e01a      	b.n	8001984 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 800194e:	683b      	ldr	r3, [r7, #0]
 8001950:	689b      	ldr	r3, [r3, #8]
 8001952:	2b00      	cmp	r3, #0
 8001954:	d102      	bne.n	800195c <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001956:	2304      	movs	r3, #4
 8001958:	623b      	str	r3, [r7, #32]
          break;
 800195a:	e013      	b.n	8001984 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 800195c:	683b      	ldr	r3, [r7, #0]
 800195e:	689b      	ldr	r3, [r3, #8]
 8001960:	2b01      	cmp	r3, #1
 8001962:	d105      	bne.n	8001970 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001964:	2308      	movs	r3, #8
 8001966:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001968:	687b      	ldr	r3, [r7, #4]
 800196a:	69fa      	ldr	r2, [r7, #28]
 800196c:	611a      	str	r2, [r3, #16]
          break;
 800196e:	e009      	b.n	8001984 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001970:	2308      	movs	r3, #8
 8001972:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	69fa      	ldr	r2, [r7, #28]
 8001978:	615a      	str	r2, [r3, #20]
          break;
 800197a:	e003      	b.n	8001984 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 800197c:	2300      	movs	r3, #0
 800197e:	623b      	str	r3, [r7, #32]
          break;
 8001980:	e000      	b.n	8001984 <HAL_GPIO_Init+0x130>
          break;
 8001982:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001984:	69bb      	ldr	r3, [r7, #24]
 8001986:	2bff      	cmp	r3, #255	; 0xff
 8001988:	d801      	bhi.n	800198e <HAL_GPIO_Init+0x13a>
 800198a:	687b      	ldr	r3, [r7, #4]
 800198c:	e001      	b.n	8001992 <HAL_GPIO_Init+0x13e>
 800198e:	687b      	ldr	r3, [r7, #4]
 8001990:	3304      	adds	r3, #4
 8001992:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001994:	69bb      	ldr	r3, [r7, #24]
 8001996:	2bff      	cmp	r3, #255	; 0xff
 8001998:	d802      	bhi.n	80019a0 <HAL_GPIO_Init+0x14c>
 800199a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800199c:	009b      	lsls	r3, r3, #2
 800199e:	e002      	b.n	80019a6 <HAL_GPIO_Init+0x152>
 80019a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019a2:	3b08      	subs	r3, #8
 80019a4:	009b      	lsls	r3, r3, #2
 80019a6:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80019a8:	697b      	ldr	r3, [r7, #20]
 80019aa:	681a      	ldr	r2, [r3, #0]
 80019ac:	210f      	movs	r1, #15
 80019ae:	693b      	ldr	r3, [r7, #16]
 80019b0:	fa01 f303 	lsl.w	r3, r1, r3
 80019b4:	43db      	mvns	r3, r3
 80019b6:	401a      	ands	r2, r3
 80019b8:	6a39      	ldr	r1, [r7, #32]
 80019ba:	693b      	ldr	r3, [r7, #16]
 80019bc:	fa01 f303 	lsl.w	r3, r1, r3
 80019c0:	431a      	orrs	r2, r3
 80019c2:	697b      	ldr	r3, [r7, #20]
 80019c4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80019c6:	683b      	ldr	r3, [r7, #0]
 80019c8:	685b      	ldr	r3, [r3, #4]
 80019ca:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80019ce:	2b00      	cmp	r3, #0
 80019d0:	f000 80a9 	beq.w	8001b26 <HAL_GPIO_Init+0x2d2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80019d4:	4b4a      	ldr	r3, [pc, #296]	; (8001b00 <HAL_GPIO_Init+0x2ac>)
 80019d6:	699b      	ldr	r3, [r3, #24]
 80019d8:	4a49      	ldr	r2, [pc, #292]	; (8001b00 <HAL_GPIO_Init+0x2ac>)
 80019da:	f043 0301 	orr.w	r3, r3, #1
 80019de:	6193      	str	r3, [r2, #24]
 80019e0:	4b47      	ldr	r3, [pc, #284]	; (8001b00 <HAL_GPIO_Init+0x2ac>)
 80019e2:	699b      	ldr	r3, [r3, #24]
 80019e4:	f003 0301 	and.w	r3, r3, #1
 80019e8:	60bb      	str	r3, [r7, #8]
 80019ea:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 80019ec:	4a45      	ldr	r2, [pc, #276]	; (8001b04 <HAL_GPIO_Init+0x2b0>)
 80019ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019f0:	089b      	lsrs	r3, r3, #2
 80019f2:	3302      	adds	r3, #2
 80019f4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80019f8:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80019fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019fc:	f003 0303 	and.w	r3, r3, #3
 8001a00:	009b      	lsls	r3, r3, #2
 8001a02:	220f      	movs	r2, #15
 8001a04:	fa02 f303 	lsl.w	r3, r2, r3
 8001a08:	43db      	mvns	r3, r3
 8001a0a:	68fa      	ldr	r2, [r7, #12]
 8001a0c:	4013      	ands	r3, r2
 8001a0e:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	4a3d      	ldr	r2, [pc, #244]	; (8001b08 <HAL_GPIO_Init+0x2b4>)
 8001a14:	4293      	cmp	r3, r2
 8001a16:	d00d      	beq.n	8001a34 <HAL_GPIO_Init+0x1e0>
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	4a3c      	ldr	r2, [pc, #240]	; (8001b0c <HAL_GPIO_Init+0x2b8>)
 8001a1c:	4293      	cmp	r3, r2
 8001a1e:	d007      	beq.n	8001a30 <HAL_GPIO_Init+0x1dc>
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	4a3b      	ldr	r2, [pc, #236]	; (8001b10 <HAL_GPIO_Init+0x2bc>)
 8001a24:	4293      	cmp	r3, r2
 8001a26:	d101      	bne.n	8001a2c <HAL_GPIO_Init+0x1d8>
 8001a28:	2302      	movs	r3, #2
 8001a2a:	e004      	b.n	8001a36 <HAL_GPIO_Init+0x1e2>
 8001a2c:	2303      	movs	r3, #3
 8001a2e:	e002      	b.n	8001a36 <HAL_GPIO_Init+0x1e2>
 8001a30:	2301      	movs	r3, #1
 8001a32:	e000      	b.n	8001a36 <HAL_GPIO_Init+0x1e2>
 8001a34:	2300      	movs	r3, #0
 8001a36:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001a38:	f002 0203 	and.w	r2, r2, #3
 8001a3c:	0092      	lsls	r2, r2, #2
 8001a3e:	4093      	lsls	r3, r2
 8001a40:	68fa      	ldr	r2, [r7, #12]
 8001a42:	4313      	orrs	r3, r2
 8001a44:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001a46:	492f      	ldr	r1, [pc, #188]	; (8001b04 <HAL_GPIO_Init+0x2b0>)
 8001a48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a4a:	089b      	lsrs	r3, r3, #2
 8001a4c:	3302      	adds	r3, #2
 8001a4e:	68fa      	ldr	r2, [r7, #12]
 8001a50:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001a54:	683b      	ldr	r3, [r7, #0]
 8001a56:	685b      	ldr	r3, [r3, #4]
 8001a58:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001a5c:	2b00      	cmp	r3, #0
 8001a5e:	d006      	beq.n	8001a6e <HAL_GPIO_Init+0x21a>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001a60:	4b2c      	ldr	r3, [pc, #176]	; (8001b14 <HAL_GPIO_Init+0x2c0>)
 8001a62:	689a      	ldr	r2, [r3, #8]
 8001a64:	492b      	ldr	r1, [pc, #172]	; (8001b14 <HAL_GPIO_Init+0x2c0>)
 8001a66:	69bb      	ldr	r3, [r7, #24]
 8001a68:	4313      	orrs	r3, r2
 8001a6a:	608b      	str	r3, [r1, #8]
 8001a6c:	e006      	b.n	8001a7c <HAL_GPIO_Init+0x228>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001a6e:	4b29      	ldr	r3, [pc, #164]	; (8001b14 <HAL_GPIO_Init+0x2c0>)
 8001a70:	689a      	ldr	r2, [r3, #8]
 8001a72:	69bb      	ldr	r3, [r7, #24]
 8001a74:	43db      	mvns	r3, r3
 8001a76:	4927      	ldr	r1, [pc, #156]	; (8001b14 <HAL_GPIO_Init+0x2c0>)
 8001a78:	4013      	ands	r3, r2
 8001a7a:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001a7c:	683b      	ldr	r3, [r7, #0]
 8001a7e:	685b      	ldr	r3, [r3, #4]
 8001a80:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001a84:	2b00      	cmp	r3, #0
 8001a86:	d006      	beq.n	8001a96 <HAL_GPIO_Init+0x242>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001a88:	4b22      	ldr	r3, [pc, #136]	; (8001b14 <HAL_GPIO_Init+0x2c0>)
 8001a8a:	68da      	ldr	r2, [r3, #12]
 8001a8c:	4921      	ldr	r1, [pc, #132]	; (8001b14 <HAL_GPIO_Init+0x2c0>)
 8001a8e:	69bb      	ldr	r3, [r7, #24]
 8001a90:	4313      	orrs	r3, r2
 8001a92:	60cb      	str	r3, [r1, #12]
 8001a94:	e006      	b.n	8001aa4 <HAL_GPIO_Init+0x250>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001a96:	4b1f      	ldr	r3, [pc, #124]	; (8001b14 <HAL_GPIO_Init+0x2c0>)
 8001a98:	68da      	ldr	r2, [r3, #12]
 8001a9a:	69bb      	ldr	r3, [r7, #24]
 8001a9c:	43db      	mvns	r3, r3
 8001a9e:	491d      	ldr	r1, [pc, #116]	; (8001b14 <HAL_GPIO_Init+0x2c0>)
 8001aa0:	4013      	ands	r3, r2
 8001aa2:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001aa4:	683b      	ldr	r3, [r7, #0]
 8001aa6:	685b      	ldr	r3, [r3, #4]
 8001aa8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001aac:	2b00      	cmp	r3, #0
 8001aae:	d006      	beq.n	8001abe <HAL_GPIO_Init+0x26a>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001ab0:	4b18      	ldr	r3, [pc, #96]	; (8001b14 <HAL_GPIO_Init+0x2c0>)
 8001ab2:	685a      	ldr	r2, [r3, #4]
 8001ab4:	4917      	ldr	r1, [pc, #92]	; (8001b14 <HAL_GPIO_Init+0x2c0>)
 8001ab6:	69bb      	ldr	r3, [r7, #24]
 8001ab8:	4313      	orrs	r3, r2
 8001aba:	604b      	str	r3, [r1, #4]
 8001abc:	e006      	b.n	8001acc <HAL_GPIO_Init+0x278>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001abe:	4b15      	ldr	r3, [pc, #84]	; (8001b14 <HAL_GPIO_Init+0x2c0>)
 8001ac0:	685a      	ldr	r2, [r3, #4]
 8001ac2:	69bb      	ldr	r3, [r7, #24]
 8001ac4:	43db      	mvns	r3, r3
 8001ac6:	4913      	ldr	r1, [pc, #76]	; (8001b14 <HAL_GPIO_Init+0x2c0>)
 8001ac8:	4013      	ands	r3, r2
 8001aca:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001acc:	683b      	ldr	r3, [r7, #0]
 8001ace:	685b      	ldr	r3, [r3, #4]
 8001ad0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001ad4:	2b00      	cmp	r3, #0
 8001ad6:	d01f      	beq.n	8001b18 <HAL_GPIO_Init+0x2c4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001ad8:	4b0e      	ldr	r3, [pc, #56]	; (8001b14 <HAL_GPIO_Init+0x2c0>)
 8001ada:	681a      	ldr	r2, [r3, #0]
 8001adc:	490d      	ldr	r1, [pc, #52]	; (8001b14 <HAL_GPIO_Init+0x2c0>)
 8001ade:	69bb      	ldr	r3, [r7, #24]
 8001ae0:	4313      	orrs	r3, r2
 8001ae2:	600b      	str	r3, [r1, #0]
 8001ae4:	e01f      	b.n	8001b26 <HAL_GPIO_Init+0x2d2>
 8001ae6:	bf00      	nop
 8001ae8:	10320000 	.word	0x10320000
 8001aec:	10310000 	.word	0x10310000
 8001af0:	10220000 	.word	0x10220000
 8001af4:	10210000 	.word	0x10210000
 8001af8:	10120000 	.word	0x10120000
 8001afc:	10110000 	.word	0x10110000
 8001b00:	40021000 	.word	0x40021000
 8001b04:	40010000 	.word	0x40010000
 8001b08:	40010800 	.word	0x40010800
 8001b0c:	40010c00 	.word	0x40010c00
 8001b10:	40011000 	.word	0x40011000
 8001b14:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001b18:	4b0b      	ldr	r3, [pc, #44]	; (8001b48 <HAL_GPIO_Init+0x2f4>)
 8001b1a:	681a      	ldr	r2, [r3, #0]
 8001b1c:	69bb      	ldr	r3, [r7, #24]
 8001b1e:	43db      	mvns	r3, r3
 8001b20:	4909      	ldr	r1, [pc, #36]	; (8001b48 <HAL_GPIO_Init+0x2f4>)
 8001b22:	4013      	ands	r3, r2
 8001b24:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8001b26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b28:	3301      	adds	r3, #1
 8001b2a:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001b2c:	683b      	ldr	r3, [r7, #0]
 8001b2e:	681a      	ldr	r2, [r3, #0]
 8001b30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b32:	fa22 f303 	lsr.w	r3, r2, r3
 8001b36:	2b00      	cmp	r3, #0
 8001b38:	f47f ae96 	bne.w	8001868 <HAL_GPIO_Init+0x14>
  }
}
 8001b3c:	bf00      	nop
 8001b3e:	bf00      	nop
 8001b40:	372c      	adds	r7, #44	; 0x2c
 8001b42:	46bd      	mov	sp, r7
 8001b44:	bc80      	pop	{r7}
 8001b46:	4770      	bx	lr
 8001b48:	40010400 	.word	0x40010400

08001b4c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001b4c:	b480      	push	{r7}
 8001b4e:	b085      	sub	sp, #20
 8001b50:	af00      	add	r7, sp, #0
 8001b52:	6078      	str	r0, [r7, #4]
 8001b54:	460b      	mov	r3, r1
 8001b56:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	689a      	ldr	r2, [r3, #8]
 8001b5c:	887b      	ldrh	r3, [r7, #2]
 8001b5e:	4013      	ands	r3, r2
 8001b60:	2b00      	cmp	r3, #0
 8001b62:	d002      	beq.n	8001b6a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001b64:	2301      	movs	r3, #1
 8001b66:	73fb      	strb	r3, [r7, #15]
 8001b68:	e001      	b.n	8001b6e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001b6a:	2300      	movs	r3, #0
 8001b6c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001b6e:	7bfb      	ldrb	r3, [r7, #15]
}
 8001b70:	4618      	mov	r0, r3
 8001b72:	3714      	adds	r7, #20
 8001b74:	46bd      	mov	sp, r7
 8001b76:	bc80      	pop	{r7}
 8001b78:	4770      	bx	lr

08001b7a <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001b7a:	b480      	push	{r7}
 8001b7c:	b083      	sub	sp, #12
 8001b7e:	af00      	add	r7, sp, #0
 8001b80:	6078      	str	r0, [r7, #4]
 8001b82:	460b      	mov	r3, r1
 8001b84:	807b      	strh	r3, [r7, #2]
 8001b86:	4613      	mov	r3, r2
 8001b88:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001b8a:	787b      	ldrb	r3, [r7, #1]
 8001b8c:	2b00      	cmp	r3, #0
 8001b8e:	d003      	beq.n	8001b98 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001b90:	887a      	ldrh	r2, [r7, #2]
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8001b96:	e003      	b.n	8001ba0 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001b98:	887b      	ldrh	r3, [r7, #2]
 8001b9a:	041a      	lsls	r2, r3, #16
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	611a      	str	r2, [r3, #16]
}
 8001ba0:	bf00      	nop
 8001ba2:	370c      	adds	r7, #12
 8001ba4:	46bd      	mov	sp, r7
 8001ba6:	bc80      	pop	{r7}
 8001ba8:	4770      	bx	lr
	...

08001bac <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001bac:	b580      	push	{r7, lr}
 8001bae:	b082      	sub	sp, #8
 8001bb0:	af00      	add	r7, sp, #0
 8001bb2:	4603      	mov	r3, r0
 8001bb4:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8001bb6:	4b08      	ldr	r3, [pc, #32]	; (8001bd8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001bb8:	695a      	ldr	r2, [r3, #20]
 8001bba:	88fb      	ldrh	r3, [r7, #6]
 8001bbc:	4013      	ands	r3, r2
 8001bbe:	2b00      	cmp	r3, #0
 8001bc0:	d006      	beq.n	8001bd0 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8001bc2:	4a05      	ldr	r2, [pc, #20]	; (8001bd8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001bc4:	88fb      	ldrh	r3, [r7, #6]
 8001bc6:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001bc8:	88fb      	ldrh	r3, [r7, #6]
 8001bca:	4618      	mov	r0, r3
 8001bcc:	f7ff fa7e 	bl	80010cc <HAL_GPIO_EXTI_Callback>
  }
}
 8001bd0:	bf00      	nop
 8001bd2:	3708      	adds	r7, #8
 8001bd4:	46bd      	mov	sp, r7
 8001bd6:	bd80      	pop	{r7, pc}
 8001bd8:	40010400 	.word	0x40010400

08001bdc <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001bdc:	b580      	push	{r7, lr}
 8001bde:	b084      	sub	sp, #16
 8001be0:	af00      	add	r7, sp, #0
 8001be2:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	2b00      	cmp	r3, #0
 8001be8:	d101      	bne.n	8001bee <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001bea:	2301      	movs	r3, #1
 8001bec:	e12b      	b.n	8001e46 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001bf4:	b2db      	uxtb	r3, r3
 8001bf6:	2b00      	cmp	r3, #0
 8001bf8:	d106      	bne.n	8001c08 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	2200      	movs	r2, #0
 8001bfe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8001c02:	6878      	ldr	r0, [r7, #4]
 8001c04:	f7ff faf0 	bl	80011e8 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	2224      	movs	r2, #36	; 0x24
 8001c0c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	681b      	ldr	r3, [r3, #0]
 8001c14:	681a      	ldr	r2, [r3, #0]
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	681b      	ldr	r3, [r3, #0]
 8001c1a:	f022 0201 	bic.w	r2, r2, #1
 8001c1e:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	681b      	ldr	r3, [r3, #0]
 8001c24:	681a      	ldr	r2, [r3, #0]
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	681b      	ldr	r3, [r3, #0]
 8001c2a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001c2e:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	681b      	ldr	r3, [r3, #0]
 8001c34:	681a      	ldr	r2, [r3, #0]
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	681b      	ldr	r3, [r3, #0]
 8001c3a:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001c3e:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8001c40:	f000 fcf2 	bl	8002628 <HAL_RCC_GetPCLK1Freq>
 8001c44:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	685b      	ldr	r3, [r3, #4]
 8001c4a:	4a81      	ldr	r2, [pc, #516]	; (8001e50 <HAL_I2C_Init+0x274>)
 8001c4c:	4293      	cmp	r3, r2
 8001c4e:	d807      	bhi.n	8001c60 <HAL_I2C_Init+0x84>
 8001c50:	68fb      	ldr	r3, [r7, #12]
 8001c52:	4a80      	ldr	r2, [pc, #512]	; (8001e54 <HAL_I2C_Init+0x278>)
 8001c54:	4293      	cmp	r3, r2
 8001c56:	bf94      	ite	ls
 8001c58:	2301      	movls	r3, #1
 8001c5a:	2300      	movhi	r3, #0
 8001c5c:	b2db      	uxtb	r3, r3
 8001c5e:	e006      	b.n	8001c6e <HAL_I2C_Init+0x92>
 8001c60:	68fb      	ldr	r3, [r7, #12]
 8001c62:	4a7d      	ldr	r2, [pc, #500]	; (8001e58 <HAL_I2C_Init+0x27c>)
 8001c64:	4293      	cmp	r3, r2
 8001c66:	bf94      	ite	ls
 8001c68:	2301      	movls	r3, #1
 8001c6a:	2300      	movhi	r3, #0
 8001c6c:	b2db      	uxtb	r3, r3
 8001c6e:	2b00      	cmp	r3, #0
 8001c70:	d001      	beq.n	8001c76 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8001c72:	2301      	movs	r3, #1
 8001c74:	e0e7      	b.n	8001e46 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8001c76:	68fb      	ldr	r3, [r7, #12]
 8001c78:	4a78      	ldr	r2, [pc, #480]	; (8001e5c <HAL_I2C_Init+0x280>)
 8001c7a:	fba2 2303 	umull	r2, r3, r2, r3
 8001c7e:	0c9b      	lsrs	r3, r3, #18
 8001c80:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	681b      	ldr	r3, [r3, #0]
 8001c86:	685b      	ldr	r3, [r3, #4]
 8001c88:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	681b      	ldr	r3, [r3, #0]
 8001c90:	68ba      	ldr	r2, [r7, #8]
 8001c92:	430a      	orrs	r2, r1
 8001c94:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	681b      	ldr	r3, [r3, #0]
 8001c9a:	6a1b      	ldr	r3, [r3, #32]
 8001c9c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	685b      	ldr	r3, [r3, #4]
 8001ca4:	4a6a      	ldr	r2, [pc, #424]	; (8001e50 <HAL_I2C_Init+0x274>)
 8001ca6:	4293      	cmp	r3, r2
 8001ca8:	d802      	bhi.n	8001cb0 <HAL_I2C_Init+0xd4>
 8001caa:	68bb      	ldr	r3, [r7, #8]
 8001cac:	3301      	adds	r3, #1
 8001cae:	e009      	b.n	8001cc4 <HAL_I2C_Init+0xe8>
 8001cb0:	68bb      	ldr	r3, [r7, #8]
 8001cb2:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8001cb6:	fb02 f303 	mul.w	r3, r2, r3
 8001cba:	4a69      	ldr	r2, [pc, #420]	; (8001e60 <HAL_I2C_Init+0x284>)
 8001cbc:	fba2 2303 	umull	r2, r3, r2, r3
 8001cc0:	099b      	lsrs	r3, r3, #6
 8001cc2:	3301      	adds	r3, #1
 8001cc4:	687a      	ldr	r2, [r7, #4]
 8001cc6:	6812      	ldr	r2, [r2, #0]
 8001cc8:	430b      	orrs	r3, r1
 8001cca:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	681b      	ldr	r3, [r3, #0]
 8001cd0:	69db      	ldr	r3, [r3, #28]
 8001cd2:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8001cd6:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	685b      	ldr	r3, [r3, #4]
 8001cde:	495c      	ldr	r1, [pc, #368]	; (8001e50 <HAL_I2C_Init+0x274>)
 8001ce0:	428b      	cmp	r3, r1
 8001ce2:	d819      	bhi.n	8001d18 <HAL_I2C_Init+0x13c>
 8001ce4:	68fb      	ldr	r3, [r7, #12]
 8001ce6:	1e59      	subs	r1, r3, #1
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	685b      	ldr	r3, [r3, #4]
 8001cec:	005b      	lsls	r3, r3, #1
 8001cee:	fbb1 f3f3 	udiv	r3, r1, r3
 8001cf2:	1c59      	adds	r1, r3, #1
 8001cf4:	f640 73fc 	movw	r3, #4092	; 0xffc
 8001cf8:	400b      	ands	r3, r1
 8001cfa:	2b00      	cmp	r3, #0
 8001cfc:	d00a      	beq.n	8001d14 <HAL_I2C_Init+0x138>
 8001cfe:	68fb      	ldr	r3, [r7, #12]
 8001d00:	1e59      	subs	r1, r3, #1
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	685b      	ldr	r3, [r3, #4]
 8001d06:	005b      	lsls	r3, r3, #1
 8001d08:	fbb1 f3f3 	udiv	r3, r1, r3
 8001d0c:	3301      	adds	r3, #1
 8001d0e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001d12:	e051      	b.n	8001db8 <HAL_I2C_Init+0x1dc>
 8001d14:	2304      	movs	r3, #4
 8001d16:	e04f      	b.n	8001db8 <HAL_I2C_Init+0x1dc>
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	689b      	ldr	r3, [r3, #8]
 8001d1c:	2b00      	cmp	r3, #0
 8001d1e:	d111      	bne.n	8001d44 <HAL_I2C_Init+0x168>
 8001d20:	68fb      	ldr	r3, [r7, #12]
 8001d22:	1e58      	subs	r0, r3, #1
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	6859      	ldr	r1, [r3, #4]
 8001d28:	460b      	mov	r3, r1
 8001d2a:	005b      	lsls	r3, r3, #1
 8001d2c:	440b      	add	r3, r1
 8001d2e:	fbb0 f3f3 	udiv	r3, r0, r3
 8001d32:	3301      	adds	r3, #1
 8001d34:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001d38:	2b00      	cmp	r3, #0
 8001d3a:	bf0c      	ite	eq
 8001d3c:	2301      	moveq	r3, #1
 8001d3e:	2300      	movne	r3, #0
 8001d40:	b2db      	uxtb	r3, r3
 8001d42:	e012      	b.n	8001d6a <HAL_I2C_Init+0x18e>
 8001d44:	68fb      	ldr	r3, [r7, #12]
 8001d46:	1e58      	subs	r0, r3, #1
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	6859      	ldr	r1, [r3, #4]
 8001d4c:	460b      	mov	r3, r1
 8001d4e:	009b      	lsls	r3, r3, #2
 8001d50:	440b      	add	r3, r1
 8001d52:	0099      	lsls	r1, r3, #2
 8001d54:	440b      	add	r3, r1
 8001d56:	fbb0 f3f3 	udiv	r3, r0, r3
 8001d5a:	3301      	adds	r3, #1
 8001d5c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001d60:	2b00      	cmp	r3, #0
 8001d62:	bf0c      	ite	eq
 8001d64:	2301      	moveq	r3, #1
 8001d66:	2300      	movne	r3, #0
 8001d68:	b2db      	uxtb	r3, r3
 8001d6a:	2b00      	cmp	r3, #0
 8001d6c:	d001      	beq.n	8001d72 <HAL_I2C_Init+0x196>
 8001d6e:	2301      	movs	r3, #1
 8001d70:	e022      	b.n	8001db8 <HAL_I2C_Init+0x1dc>
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	689b      	ldr	r3, [r3, #8]
 8001d76:	2b00      	cmp	r3, #0
 8001d78:	d10e      	bne.n	8001d98 <HAL_I2C_Init+0x1bc>
 8001d7a:	68fb      	ldr	r3, [r7, #12]
 8001d7c:	1e58      	subs	r0, r3, #1
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	6859      	ldr	r1, [r3, #4]
 8001d82:	460b      	mov	r3, r1
 8001d84:	005b      	lsls	r3, r3, #1
 8001d86:	440b      	add	r3, r1
 8001d88:	fbb0 f3f3 	udiv	r3, r0, r3
 8001d8c:	3301      	adds	r3, #1
 8001d8e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001d92:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001d96:	e00f      	b.n	8001db8 <HAL_I2C_Init+0x1dc>
 8001d98:	68fb      	ldr	r3, [r7, #12]
 8001d9a:	1e58      	subs	r0, r3, #1
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	6859      	ldr	r1, [r3, #4]
 8001da0:	460b      	mov	r3, r1
 8001da2:	009b      	lsls	r3, r3, #2
 8001da4:	440b      	add	r3, r1
 8001da6:	0099      	lsls	r1, r3, #2
 8001da8:	440b      	add	r3, r1
 8001daa:	fbb0 f3f3 	udiv	r3, r0, r3
 8001dae:	3301      	adds	r3, #1
 8001db0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001db4:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001db8:	6879      	ldr	r1, [r7, #4]
 8001dba:	6809      	ldr	r1, [r1, #0]
 8001dbc:	4313      	orrs	r3, r2
 8001dbe:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	681b      	ldr	r3, [r3, #0]
 8001dc4:	681b      	ldr	r3, [r3, #0]
 8001dc6:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	69da      	ldr	r2, [r3, #28]
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	6a1b      	ldr	r3, [r3, #32]
 8001dd2:	431a      	orrs	r2, r3
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	681b      	ldr	r3, [r3, #0]
 8001dd8:	430a      	orrs	r2, r1
 8001dda:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	681b      	ldr	r3, [r3, #0]
 8001de0:	689b      	ldr	r3, [r3, #8]
 8001de2:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8001de6:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8001dea:	687a      	ldr	r2, [r7, #4]
 8001dec:	6911      	ldr	r1, [r2, #16]
 8001dee:	687a      	ldr	r2, [r7, #4]
 8001df0:	68d2      	ldr	r2, [r2, #12]
 8001df2:	4311      	orrs	r1, r2
 8001df4:	687a      	ldr	r2, [r7, #4]
 8001df6:	6812      	ldr	r2, [r2, #0]
 8001df8:	430b      	orrs	r3, r1
 8001dfa:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	681b      	ldr	r3, [r3, #0]
 8001e00:	68db      	ldr	r3, [r3, #12]
 8001e02:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	695a      	ldr	r2, [r3, #20]
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	699b      	ldr	r3, [r3, #24]
 8001e0e:	431a      	orrs	r2, r3
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	681b      	ldr	r3, [r3, #0]
 8001e14:	430a      	orrs	r2, r1
 8001e16:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	681b      	ldr	r3, [r3, #0]
 8001e1c:	681a      	ldr	r2, [r3, #0]
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	681b      	ldr	r3, [r3, #0]
 8001e22:	f042 0201 	orr.w	r2, r2, #1
 8001e26:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	2200      	movs	r2, #0
 8001e2c:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	2220      	movs	r2, #32
 8001e32:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	2200      	movs	r2, #0
 8001e3a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	2200      	movs	r2, #0
 8001e40:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8001e44:	2300      	movs	r3, #0
}
 8001e46:	4618      	mov	r0, r3
 8001e48:	3710      	adds	r7, #16
 8001e4a:	46bd      	mov	sp, r7
 8001e4c:	bd80      	pop	{r7, pc}
 8001e4e:	bf00      	nop
 8001e50:	000186a0 	.word	0x000186a0
 8001e54:	001e847f 	.word	0x001e847f
 8001e58:	003d08ff 	.word	0x003d08ff
 8001e5c:	431bde83 	.word	0x431bde83
 8001e60:	10624dd3 	.word	0x10624dd3

08001e64 <HAL_PWR_PVD_IRQHandler>:
  * @brief  This function handles the PWR PVD interrupt request.
  * @note   This API should be called under the PVD_IRQHandler().
  * @retval None
  */
void HAL_PWR_PVD_IRQHandler(void)
{
 8001e64:	b580      	push	{r7, lr}
 8001e66:	af00      	add	r7, sp, #0
  /* Check PWR exti flag */
  if(__HAL_PWR_PVD_EXTI_GET_FLAG() != RESET)
 8001e68:	4b06      	ldr	r3, [pc, #24]	; (8001e84 <HAL_PWR_PVD_IRQHandler+0x20>)
 8001e6a:	695b      	ldr	r3, [r3, #20]
 8001e6c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001e70:	2b00      	cmp	r3, #0
 8001e72:	d005      	beq.n	8001e80 <HAL_PWR_PVD_IRQHandler+0x1c>
  {
    /* PWR PVD interrupt user callback */
    HAL_PWR_PVDCallback();
 8001e74:	f000 f808 	bl	8001e88 <HAL_PWR_PVDCallback>

    /* Clear PWR Exti pending bit */
    __HAL_PWR_PVD_EXTI_CLEAR_FLAG();
 8001e78:	4b02      	ldr	r3, [pc, #8]	; (8001e84 <HAL_PWR_PVD_IRQHandler+0x20>)
 8001e7a:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8001e7e:	615a      	str	r2, [r3, #20]
  }
}
 8001e80:	bf00      	nop
 8001e82:	bd80      	pop	{r7, pc}
 8001e84:	40010400 	.word	0x40010400

08001e88 <HAL_PWR_PVDCallback>:
/**
  * @brief  PWR PVD interrupt callback
  * @retval None
  */
__weak void HAL_PWR_PVDCallback(void)
{
 8001e88:	b480      	push	{r7}
 8001e8a:	af00      	add	r7, sp, #0
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_PWR_PVDCallback could be implemented in the user file
   */ 
}
 8001e8c:	bf00      	nop
 8001e8e:	46bd      	mov	sp, r7
 8001e90:	bc80      	pop	{r7}
 8001e92:	4770      	bx	lr

08001e94 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001e94:	b580      	push	{r7, lr}
 8001e96:	b086      	sub	sp, #24
 8001e98:	af00      	add	r7, sp, #0
 8001e9a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	2b00      	cmp	r3, #0
 8001ea0:	d101      	bne.n	8001ea6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001ea2:	2301      	movs	r3, #1
 8001ea4:	e272      	b.n	800238c <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	681b      	ldr	r3, [r3, #0]
 8001eaa:	f003 0301 	and.w	r3, r3, #1
 8001eae:	2b00      	cmp	r3, #0
 8001eb0:	f000 8087 	beq.w	8001fc2 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001eb4:	4b92      	ldr	r3, [pc, #584]	; (8002100 <HAL_RCC_OscConfig+0x26c>)
 8001eb6:	685b      	ldr	r3, [r3, #4]
 8001eb8:	f003 030c 	and.w	r3, r3, #12
 8001ebc:	2b04      	cmp	r3, #4
 8001ebe:	d00c      	beq.n	8001eda <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001ec0:	4b8f      	ldr	r3, [pc, #572]	; (8002100 <HAL_RCC_OscConfig+0x26c>)
 8001ec2:	685b      	ldr	r3, [r3, #4]
 8001ec4:	f003 030c 	and.w	r3, r3, #12
 8001ec8:	2b08      	cmp	r3, #8
 8001eca:	d112      	bne.n	8001ef2 <HAL_RCC_OscConfig+0x5e>
 8001ecc:	4b8c      	ldr	r3, [pc, #560]	; (8002100 <HAL_RCC_OscConfig+0x26c>)
 8001ece:	685b      	ldr	r3, [r3, #4]
 8001ed0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001ed4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001ed8:	d10b      	bne.n	8001ef2 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001eda:	4b89      	ldr	r3, [pc, #548]	; (8002100 <HAL_RCC_OscConfig+0x26c>)
 8001edc:	681b      	ldr	r3, [r3, #0]
 8001ede:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001ee2:	2b00      	cmp	r3, #0
 8001ee4:	d06c      	beq.n	8001fc0 <HAL_RCC_OscConfig+0x12c>
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	685b      	ldr	r3, [r3, #4]
 8001eea:	2b00      	cmp	r3, #0
 8001eec:	d168      	bne.n	8001fc0 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8001eee:	2301      	movs	r3, #1
 8001ef0:	e24c      	b.n	800238c <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	685b      	ldr	r3, [r3, #4]
 8001ef6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001efa:	d106      	bne.n	8001f0a <HAL_RCC_OscConfig+0x76>
 8001efc:	4b80      	ldr	r3, [pc, #512]	; (8002100 <HAL_RCC_OscConfig+0x26c>)
 8001efe:	681b      	ldr	r3, [r3, #0]
 8001f00:	4a7f      	ldr	r2, [pc, #508]	; (8002100 <HAL_RCC_OscConfig+0x26c>)
 8001f02:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001f06:	6013      	str	r3, [r2, #0]
 8001f08:	e02e      	b.n	8001f68 <HAL_RCC_OscConfig+0xd4>
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	685b      	ldr	r3, [r3, #4]
 8001f0e:	2b00      	cmp	r3, #0
 8001f10:	d10c      	bne.n	8001f2c <HAL_RCC_OscConfig+0x98>
 8001f12:	4b7b      	ldr	r3, [pc, #492]	; (8002100 <HAL_RCC_OscConfig+0x26c>)
 8001f14:	681b      	ldr	r3, [r3, #0]
 8001f16:	4a7a      	ldr	r2, [pc, #488]	; (8002100 <HAL_RCC_OscConfig+0x26c>)
 8001f18:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001f1c:	6013      	str	r3, [r2, #0]
 8001f1e:	4b78      	ldr	r3, [pc, #480]	; (8002100 <HAL_RCC_OscConfig+0x26c>)
 8001f20:	681b      	ldr	r3, [r3, #0]
 8001f22:	4a77      	ldr	r2, [pc, #476]	; (8002100 <HAL_RCC_OscConfig+0x26c>)
 8001f24:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001f28:	6013      	str	r3, [r2, #0]
 8001f2a:	e01d      	b.n	8001f68 <HAL_RCC_OscConfig+0xd4>
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	685b      	ldr	r3, [r3, #4]
 8001f30:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001f34:	d10c      	bne.n	8001f50 <HAL_RCC_OscConfig+0xbc>
 8001f36:	4b72      	ldr	r3, [pc, #456]	; (8002100 <HAL_RCC_OscConfig+0x26c>)
 8001f38:	681b      	ldr	r3, [r3, #0]
 8001f3a:	4a71      	ldr	r2, [pc, #452]	; (8002100 <HAL_RCC_OscConfig+0x26c>)
 8001f3c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001f40:	6013      	str	r3, [r2, #0]
 8001f42:	4b6f      	ldr	r3, [pc, #444]	; (8002100 <HAL_RCC_OscConfig+0x26c>)
 8001f44:	681b      	ldr	r3, [r3, #0]
 8001f46:	4a6e      	ldr	r2, [pc, #440]	; (8002100 <HAL_RCC_OscConfig+0x26c>)
 8001f48:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001f4c:	6013      	str	r3, [r2, #0]
 8001f4e:	e00b      	b.n	8001f68 <HAL_RCC_OscConfig+0xd4>
 8001f50:	4b6b      	ldr	r3, [pc, #428]	; (8002100 <HAL_RCC_OscConfig+0x26c>)
 8001f52:	681b      	ldr	r3, [r3, #0]
 8001f54:	4a6a      	ldr	r2, [pc, #424]	; (8002100 <HAL_RCC_OscConfig+0x26c>)
 8001f56:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001f5a:	6013      	str	r3, [r2, #0]
 8001f5c:	4b68      	ldr	r3, [pc, #416]	; (8002100 <HAL_RCC_OscConfig+0x26c>)
 8001f5e:	681b      	ldr	r3, [r3, #0]
 8001f60:	4a67      	ldr	r2, [pc, #412]	; (8002100 <HAL_RCC_OscConfig+0x26c>)
 8001f62:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001f66:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	685b      	ldr	r3, [r3, #4]
 8001f6c:	2b00      	cmp	r3, #0
 8001f6e:	d013      	beq.n	8001f98 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f70:	f7ff fb34 	bl	80015dc <HAL_GetTick>
 8001f74:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001f76:	e008      	b.n	8001f8a <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001f78:	f7ff fb30 	bl	80015dc <HAL_GetTick>
 8001f7c:	4602      	mov	r2, r0
 8001f7e:	693b      	ldr	r3, [r7, #16]
 8001f80:	1ad3      	subs	r3, r2, r3
 8001f82:	2b64      	cmp	r3, #100	; 0x64
 8001f84:	d901      	bls.n	8001f8a <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8001f86:	2303      	movs	r3, #3
 8001f88:	e200      	b.n	800238c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001f8a:	4b5d      	ldr	r3, [pc, #372]	; (8002100 <HAL_RCC_OscConfig+0x26c>)
 8001f8c:	681b      	ldr	r3, [r3, #0]
 8001f8e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f92:	2b00      	cmp	r3, #0
 8001f94:	d0f0      	beq.n	8001f78 <HAL_RCC_OscConfig+0xe4>
 8001f96:	e014      	b.n	8001fc2 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f98:	f7ff fb20 	bl	80015dc <HAL_GetTick>
 8001f9c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001f9e:	e008      	b.n	8001fb2 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001fa0:	f7ff fb1c 	bl	80015dc <HAL_GetTick>
 8001fa4:	4602      	mov	r2, r0
 8001fa6:	693b      	ldr	r3, [r7, #16]
 8001fa8:	1ad3      	subs	r3, r2, r3
 8001faa:	2b64      	cmp	r3, #100	; 0x64
 8001fac:	d901      	bls.n	8001fb2 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8001fae:	2303      	movs	r3, #3
 8001fb0:	e1ec      	b.n	800238c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001fb2:	4b53      	ldr	r3, [pc, #332]	; (8002100 <HAL_RCC_OscConfig+0x26c>)
 8001fb4:	681b      	ldr	r3, [r3, #0]
 8001fb6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001fba:	2b00      	cmp	r3, #0
 8001fbc:	d1f0      	bne.n	8001fa0 <HAL_RCC_OscConfig+0x10c>
 8001fbe:	e000      	b.n	8001fc2 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001fc0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	681b      	ldr	r3, [r3, #0]
 8001fc6:	f003 0302 	and.w	r3, r3, #2
 8001fca:	2b00      	cmp	r3, #0
 8001fcc:	d063      	beq.n	8002096 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001fce:	4b4c      	ldr	r3, [pc, #304]	; (8002100 <HAL_RCC_OscConfig+0x26c>)
 8001fd0:	685b      	ldr	r3, [r3, #4]
 8001fd2:	f003 030c 	and.w	r3, r3, #12
 8001fd6:	2b00      	cmp	r3, #0
 8001fd8:	d00b      	beq.n	8001ff2 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8001fda:	4b49      	ldr	r3, [pc, #292]	; (8002100 <HAL_RCC_OscConfig+0x26c>)
 8001fdc:	685b      	ldr	r3, [r3, #4]
 8001fde:	f003 030c 	and.w	r3, r3, #12
 8001fe2:	2b08      	cmp	r3, #8
 8001fe4:	d11c      	bne.n	8002020 <HAL_RCC_OscConfig+0x18c>
 8001fe6:	4b46      	ldr	r3, [pc, #280]	; (8002100 <HAL_RCC_OscConfig+0x26c>)
 8001fe8:	685b      	ldr	r3, [r3, #4]
 8001fea:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001fee:	2b00      	cmp	r3, #0
 8001ff0:	d116      	bne.n	8002020 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001ff2:	4b43      	ldr	r3, [pc, #268]	; (8002100 <HAL_RCC_OscConfig+0x26c>)
 8001ff4:	681b      	ldr	r3, [r3, #0]
 8001ff6:	f003 0302 	and.w	r3, r3, #2
 8001ffa:	2b00      	cmp	r3, #0
 8001ffc:	d005      	beq.n	800200a <HAL_RCC_OscConfig+0x176>
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	691b      	ldr	r3, [r3, #16]
 8002002:	2b01      	cmp	r3, #1
 8002004:	d001      	beq.n	800200a <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8002006:	2301      	movs	r3, #1
 8002008:	e1c0      	b.n	800238c <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800200a:	4b3d      	ldr	r3, [pc, #244]	; (8002100 <HAL_RCC_OscConfig+0x26c>)
 800200c:	681b      	ldr	r3, [r3, #0]
 800200e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	695b      	ldr	r3, [r3, #20]
 8002016:	00db      	lsls	r3, r3, #3
 8002018:	4939      	ldr	r1, [pc, #228]	; (8002100 <HAL_RCC_OscConfig+0x26c>)
 800201a:	4313      	orrs	r3, r2
 800201c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800201e:	e03a      	b.n	8002096 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	691b      	ldr	r3, [r3, #16]
 8002024:	2b00      	cmp	r3, #0
 8002026:	d020      	beq.n	800206a <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002028:	4b36      	ldr	r3, [pc, #216]	; (8002104 <HAL_RCC_OscConfig+0x270>)
 800202a:	2201      	movs	r2, #1
 800202c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800202e:	f7ff fad5 	bl	80015dc <HAL_GetTick>
 8002032:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002034:	e008      	b.n	8002048 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002036:	f7ff fad1 	bl	80015dc <HAL_GetTick>
 800203a:	4602      	mov	r2, r0
 800203c:	693b      	ldr	r3, [r7, #16]
 800203e:	1ad3      	subs	r3, r2, r3
 8002040:	2b02      	cmp	r3, #2
 8002042:	d901      	bls.n	8002048 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8002044:	2303      	movs	r3, #3
 8002046:	e1a1      	b.n	800238c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002048:	4b2d      	ldr	r3, [pc, #180]	; (8002100 <HAL_RCC_OscConfig+0x26c>)
 800204a:	681b      	ldr	r3, [r3, #0]
 800204c:	f003 0302 	and.w	r3, r3, #2
 8002050:	2b00      	cmp	r3, #0
 8002052:	d0f0      	beq.n	8002036 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002054:	4b2a      	ldr	r3, [pc, #168]	; (8002100 <HAL_RCC_OscConfig+0x26c>)
 8002056:	681b      	ldr	r3, [r3, #0]
 8002058:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	695b      	ldr	r3, [r3, #20]
 8002060:	00db      	lsls	r3, r3, #3
 8002062:	4927      	ldr	r1, [pc, #156]	; (8002100 <HAL_RCC_OscConfig+0x26c>)
 8002064:	4313      	orrs	r3, r2
 8002066:	600b      	str	r3, [r1, #0]
 8002068:	e015      	b.n	8002096 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800206a:	4b26      	ldr	r3, [pc, #152]	; (8002104 <HAL_RCC_OscConfig+0x270>)
 800206c:	2200      	movs	r2, #0
 800206e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002070:	f7ff fab4 	bl	80015dc <HAL_GetTick>
 8002074:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002076:	e008      	b.n	800208a <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002078:	f7ff fab0 	bl	80015dc <HAL_GetTick>
 800207c:	4602      	mov	r2, r0
 800207e:	693b      	ldr	r3, [r7, #16]
 8002080:	1ad3      	subs	r3, r2, r3
 8002082:	2b02      	cmp	r3, #2
 8002084:	d901      	bls.n	800208a <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8002086:	2303      	movs	r3, #3
 8002088:	e180      	b.n	800238c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800208a:	4b1d      	ldr	r3, [pc, #116]	; (8002100 <HAL_RCC_OscConfig+0x26c>)
 800208c:	681b      	ldr	r3, [r3, #0]
 800208e:	f003 0302 	and.w	r3, r3, #2
 8002092:	2b00      	cmp	r3, #0
 8002094:	d1f0      	bne.n	8002078 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	681b      	ldr	r3, [r3, #0]
 800209a:	f003 0308 	and.w	r3, r3, #8
 800209e:	2b00      	cmp	r3, #0
 80020a0:	d03a      	beq.n	8002118 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	699b      	ldr	r3, [r3, #24]
 80020a6:	2b00      	cmp	r3, #0
 80020a8:	d019      	beq.n	80020de <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80020aa:	4b17      	ldr	r3, [pc, #92]	; (8002108 <HAL_RCC_OscConfig+0x274>)
 80020ac:	2201      	movs	r2, #1
 80020ae:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80020b0:	f7ff fa94 	bl	80015dc <HAL_GetTick>
 80020b4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80020b6:	e008      	b.n	80020ca <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80020b8:	f7ff fa90 	bl	80015dc <HAL_GetTick>
 80020bc:	4602      	mov	r2, r0
 80020be:	693b      	ldr	r3, [r7, #16]
 80020c0:	1ad3      	subs	r3, r2, r3
 80020c2:	2b02      	cmp	r3, #2
 80020c4:	d901      	bls.n	80020ca <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 80020c6:	2303      	movs	r3, #3
 80020c8:	e160      	b.n	800238c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80020ca:	4b0d      	ldr	r3, [pc, #52]	; (8002100 <HAL_RCC_OscConfig+0x26c>)
 80020cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80020ce:	f003 0302 	and.w	r3, r3, #2
 80020d2:	2b00      	cmp	r3, #0
 80020d4:	d0f0      	beq.n	80020b8 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80020d6:	2001      	movs	r0, #1
 80020d8:	f000 face 	bl	8002678 <RCC_Delay>
 80020dc:	e01c      	b.n	8002118 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80020de:	4b0a      	ldr	r3, [pc, #40]	; (8002108 <HAL_RCC_OscConfig+0x274>)
 80020e0:	2200      	movs	r2, #0
 80020e2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80020e4:	f7ff fa7a 	bl	80015dc <HAL_GetTick>
 80020e8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80020ea:	e00f      	b.n	800210c <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80020ec:	f7ff fa76 	bl	80015dc <HAL_GetTick>
 80020f0:	4602      	mov	r2, r0
 80020f2:	693b      	ldr	r3, [r7, #16]
 80020f4:	1ad3      	subs	r3, r2, r3
 80020f6:	2b02      	cmp	r3, #2
 80020f8:	d908      	bls.n	800210c <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 80020fa:	2303      	movs	r3, #3
 80020fc:	e146      	b.n	800238c <HAL_RCC_OscConfig+0x4f8>
 80020fe:	bf00      	nop
 8002100:	40021000 	.word	0x40021000
 8002104:	42420000 	.word	0x42420000
 8002108:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800210c:	4b92      	ldr	r3, [pc, #584]	; (8002358 <HAL_RCC_OscConfig+0x4c4>)
 800210e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002110:	f003 0302 	and.w	r3, r3, #2
 8002114:	2b00      	cmp	r3, #0
 8002116:	d1e9      	bne.n	80020ec <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	681b      	ldr	r3, [r3, #0]
 800211c:	f003 0304 	and.w	r3, r3, #4
 8002120:	2b00      	cmp	r3, #0
 8002122:	f000 80a6 	beq.w	8002272 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002126:	2300      	movs	r3, #0
 8002128:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800212a:	4b8b      	ldr	r3, [pc, #556]	; (8002358 <HAL_RCC_OscConfig+0x4c4>)
 800212c:	69db      	ldr	r3, [r3, #28]
 800212e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002132:	2b00      	cmp	r3, #0
 8002134:	d10d      	bne.n	8002152 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002136:	4b88      	ldr	r3, [pc, #544]	; (8002358 <HAL_RCC_OscConfig+0x4c4>)
 8002138:	69db      	ldr	r3, [r3, #28]
 800213a:	4a87      	ldr	r2, [pc, #540]	; (8002358 <HAL_RCC_OscConfig+0x4c4>)
 800213c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002140:	61d3      	str	r3, [r2, #28]
 8002142:	4b85      	ldr	r3, [pc, #532]	; (8002358 <HAL_RCC_OscConfig+0x4c4>)
 8002144:	69db      	ldr	r3, [r3, #28]
 8002146:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800214a:	60bb      	str	r3, [r7, #8]
 800214c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800214e:	2301      	movs	r3, #1
 8002150:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002152:	4b82      	ldr	r3, [pc, #520]	; (800235c <HAL_RCC_OscConfig+0x4c8>)
 8002154:	681b      	ldr	r3, [r3, #0]
 8002156:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800215a:	2b00      	cmp	r3, #0
 800215c:	d118      	bne.n	8002190 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800215e:	4b7f      	ldr	r3, [pc, #508]	; (800235c <HAL_RCC_OscConfig+0x4c8>)
 8002160:	681b      	ldr	r3, [r3, #0]
 8002162:	4a7e      	ldr	r2, [pc, #504]	; (800235c <HAL_RCC_OscConfig+0x4c8>)
 8002164:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002168:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800216a:	f7ff fa37 	bl	80015dc <HAL_GetTick>
 800216e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002170:	e008      	b.n	8002184 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002172:	f7ff fa33 	bl	80015dc <HAL_GetTick>
 8002176:	4602      	mov	r2, r0
 8002178:	693b      	ldr	r3, [r7, #16]
 800217a:	1ad3      	subs	r3, r2, r3
 800217c:	2b64      	cmp	r3, #100	; 0x64
 800217e:	d901      	bls.n	8002184 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8002180:	2303      	movs	r3, #3
 8002182:	e103      	b.n	800238c <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002184:	4b75      	ldr	r3, [pc, #468]	; (800235c <HAL_RCC_OscConfig+0x4c8>)
 8002186:	681b      	ldr	r3, [r3, #0]
 8002188:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800218c:	2b00      	cmp	r3, #0
 800218e:	d0f0      	beq.n	8002172 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	68db      	ldr	r3, [r3, #12]
 8002194:	2b01      	cmp	r3, #1
 8002196:	d106      	bne.n	80021a6 <HAL_RCC_OscConfig+0x312>
 8002198:	4b6f      	ldr	r3, [pc, #444]	; (8002358 <HAL_RCC_OscConfig+0x4c4>)
 800219a:	6a1b      	ldr	r3, [r3, #32]
 800219c:	4a6e      	ldr	r2, [pc, #440]	; (8002358 <HAL_RCC_OscConfig+0x4c4>)
 800219e:	f043 0301 	orr.w	r3, r3, #1
 80021a2:	6213      	str	r3, [r2, #32]
 80021a4:	e02d      	b.n	8002202 <HAL_RCC_OscConfig+0x36e>
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	68db      	ldr	r3, [r3, #12]
 80021aa:	2b00      	cmp	r3, #0
 80021ac:	d10c      	bne.n	80021c8 <HAL_RCC_OscConfig+0x334>
 80021ae:	4b6a      	ldr	r3, [pc, #424]	; (8002358 <HAL_RCC_OscConfig+0x4c4>)
 80021b0:	6a1b      	ldr	r3, [r3, #32]
 80021b2:	4a69      	ldr	r2, [pc, #420]	; (8002358 <HAL_RCC_OscConfig+0x4c4>)
 80021b4:	f023 0301 	bic.w	r3, r3, #1
 80021b8:	6213      	str	r3, [r2, #32]
 80021ba:	4b67      	ldr	r3, [pc, #412]	; (8002358 <HAL_RCC_OscConfig+0x4c4>)
 80021bc:	6a1b      	ldr	r3, [r3, #32]
 80021be:	4a66      	ldr	r2, [pc, #408]	; (8002358 <HAL_RCC_OscConfig+0x4c4>)
 80021c0:	f023 0304 	bic.w	r3, r3, #4
 80021c4:	6213      	str	r3, [r2, #32]
 80021c6:	e01c      	b.n	8002202 <HAL_RCC_OscConfig+0x36e>
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	68db      	ldr	r3, [r3, #12]
 80021cc:	2b05      	cmp	r3, #5
 80021ce:	d10c      	bne.n	80021ea <HAL_RCC_OscConfig+0x356>
 80021d0:	4b61      	ldr	r3, [pc, #388]	; (8002358 <HAL_RCC_OscConfig+0x4c4>)
 80021d2:	6a1b      	ldr	r3, [r3, #32]
 80021d4:	4a60      	ldr	r2, [pc, #384]	; (8002358 <HAL_RCC_OscConfig+0x4c4>)
 80021d6:	f043 0304 	orr.w	r3, r3, #4
 80021da:	6213      	str	r3, [r2, #32]
 80021dc:	4b5e      	ldr	r3, [pc, #376]	; (8002358 <HAL_RCC_OscConfig+0x4c4>)
 80021de:	6a1b      	ldr	r3, [r3, #32]
 80021e0:	4a5d      	ldr	r2, [pc, #372]	; (8002358 <HAL_RCC_OscConfig+0x4c4>)
 80021e2:	f043 0301 	orr.w	r3, r3, #1
 80021e6:	6213      	str	r3, [r2, #32]
 80021e8:	e00b      	b.n	8002202 <HAL_RCC_OscConfig+0x36e>
 80021ea:	4b5b      	ldr	r3, [pc, #364]	; (8002358 <HAL_RCC_OscConfig+0x4c4>)
 80021ec:	6a1b      	ldr	r3, [r3, #32]
 80021ee:	4a5a      	ldr	r2, [pc, #360]	; (8002358 <HAL_RCC_OscConfig+0x4c4>)
 80021f0:	f023 0301 	bic.w	r3, r3, #1
 80021f4:	6213      	str	r3, [r2, #32]
 80021f6:	4b58      	ldr	r3, [pc, #352]	; (8002358 <HAL_RCC_OscConfig+0x4c4>)
 80021f8:	6a1b      	ldr	r3, [r3, #32]
 80021fa:	4a57      	ldr	r2, [pc, #348]	; (8002358 <HAL_RCC_OscConfig+0x4c4>)
 80021fc:	f023 0304 	bic.w	r3, r3, #4
 8002200:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	68db      	ldr	r3, [r3, #12]
 8002206:	2b00      	cmp	r3, #0
 8002208:	d015      	beq.n	8002236 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800220a:	f7ff f9e7 	bl	80015dc <HAL_GetTick>
 800220e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002210:	e00a      	b.n	8002228 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002212:	f7ff f9e3 	bl	80015dc <HAL_GetTick>
 8002216:	4602      	mov	r2, r0
 8002218:	693b      	ldr	r3, [r7, #16]
 800221a:	1ad3      	subs	r3, r2, r3
 800221c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002220:	4293      	cmp	r3, r2
 8002222:	d901      	bls.n	8002228 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8002224:	2303      	movs	r3, #3
 8002226:	e0b1      	b.n	800238c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002228:	4b4b      	ldr	r3, [pc, #300]	; (8002358 <HAL_RCC_OscConfig+0x4c4>)
 800222a:	6a1b      	ldr	r3, [r3, #32]
 800222c:	f003 0302 	and.w	r3, r3, #2
 8002230:	2b00      	cmp	r3, #0
 8002232:	d0ee      	beq.n	8002212 <HAL_RCC_OscConfig+0x37e>
 8002234:	e014      	b.n	8002260 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002236:	f7ff f9d1 	bl	80015dc <HAL_GetTick>
 800223a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800223c:	e00a      	b.n	8002254 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800223e:	f7ff f9cd 	bl	80015dc <HAL_GetTick>
 8002242:	4602      	mov	r2, r0
 8002244:	693b      	ldr	r3, [r7, #16]
 8002246:	1ad3      	subs	r3, r2, r3
 8002248:	f241 3288 	movw	r2, #5000	; 0x1388
 800224c:	4293      	cmp	r3, r2
 800224e:	d901      	bls.n	8002254 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8002250:	2303      	movs	r3, #3
 8002252:	e09b      	b.n	800238c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002254:	4b40      	ldr	r3, [pc, #256]	; (8002358 <HAL_RCC_OscConfig+0x4c4>)
 8002256:	6a1b      	ldr	r3, [r3, #32]
 8002258:	f003 0302 	and.w	r3, r3, #2
 800225c:	2b00      	cmp	r3, #0
 800225e:	d1ee      	bne.n	800223e <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002260:	7dfb      	ldrb	r3, [r7, #23]
 8002262:	2b01      	cmp	r3, #1
 8002264:	d105      	bne.n	8002272 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002266:	4b3c      	ldr	r3, [pc, #240]	; (8002358 <HAL_RCC_OscConfig+0x4c4>)
 8002268:	69db      	ldr	r3, [r3, #28]
 800226a:	4a3b      	ldr	r2, [pc, #236]	; (8002358 <HAL_RCC_OscConfig+0x4c4>)
 800226c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002270:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	69db      	ldr	r3, [r3, #28]
 8002276:	2b00      	cmp	r3, #0
 8002278:	f000 8087 	beq.w	800238a <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800227c:	4b36      	ldr	r3, [pc, #216]	; (8002358 <HAL_RCC_OscConfig+0x4c4>)
 800227e:	685b      	ldr	r3, [r3, #4]
 8002280:	f003 030c 	and.w	r3, r3, #12
 8002284:	2b08      	cmp	r3, #8
 8002286:	d061      	beq.n	800234c <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	69db      	ldr	r3, [r3, #28]
 800228c:	2b02      	cmp	r3, #2
 800228e:	d146      	bne.n	800231e <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002290:	4b33      	ldr	r3, [pc, #204]	; (8002360 <HAL_RCC_OscConfig+0x4cc>)
 8002292:	2200      	movs	r2, #0
 8002294:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002296:	f7ff f9a1 	bl	80015dc <HAL_GetTick>
 800229a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800229c:	e008      	b.n	80022b0 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800229e:	f7ff f99d 	bl	80015dc <HAL_GetTick>
 80022a2:	4602      	mov	r2, r0
 80022a4:	693b      	ldr	r3, [r7, #16]
 80022a6:	1ad3      	subs	r3, r2, r3
 80022a8:	2b02      	cmp	r3, #2
 80022aa:	d901      	bls.n	80022b0 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80022ac:	2303      	movs	r3, #3
 80022ae:	e06d      	b.n	800238c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80022b0:	4b29      	ldr	r3, [pc, #164]	; (8002358 <HAL_RCC_OscConfig+0x4c4>)
 80022b2:	681b      	ldr	r3, [r3, #0]
 80022b4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80022b8:	2b00      	cmp	r3, #0
 80022ba:	d1f0      	bne.n	800229e <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	6a1b      	ldr	r3, [r3, #32]
 80022c0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80022c4:	d108      	bne.n	80022d8 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80022c6:	4b24      	ldr	r3, [pc, #144]	; (8002358 <HAL_RCC_OscConfig+0x4c4>)
 80022c8:	685b      	ldr	r3, [r3, #4]
 80022ca:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	689b      	ldr	r3, [r3, #8]
 80022d2:	4921      	ldr	r1, [pc, #132]	; (8002358 <HAL_RCC_OscConfig+0x4c4>)
 80022d4:	4313      	orrs	r3, r2
 80022d6:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80022d8:	4b1f      	ldr	r3, [pc, #124]	; (8002358 <HAL_RCC_OscConfig+0x4c4>)
 80022da:	685b      	ldr	r3, [r3, #4]
 80022dc:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	6a19      	ldr	r1, [r3, #32]
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022e8:	430b      	orrs	r3, r1
 80022ea:	491b      	ldr	r1, [pc, #108]	; (8002358 <HAL_RCC_OscConfig+0x4c4>)
 80022ec:	4313      	orrs	r3, r2
 80022ee:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80022f0:	4b1b      	ldr	r3, [pc, #108]	; (8002360 <HAL_RCC_OscConfig+0x4cc>)
 80022f2:	2201      	movs	r2, #1
 80022f4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80022f6:	f7ff f971 	bl	80015dc <HAL_GetTick>
 80022fa:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80022fc:	e008      	b.n	8002310 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80022fe:	f7ff f96d 	bl	80015dc <HAL_GetTick>
 8002302:	4602      	mov	r2, r0
 8002304:	693b      	ldr	r3, [r7, #16]
 8002306:	1ad3      	subs	r3, r2, r3
 8002308:	2b02      	cmp	r3, #2
 800230a:	d901      	bls.n	8002310 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 800230c:	2303      	movs	r3, #3
 800230e:	e03d      	b.n	800238c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002310:	4b11      	ldr	r3, [pc, #68]	; (8002358 <HAL_RCC_OscConfig+0x4c4>)
 8002312:	681b      	ldr	r3, [r3, #0]
 8002314:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002318:	2b00      	cmp	r3, #0
 800231a:	d0f0      	beq.n	80022fe <HAL_RCC_OscConfig+0x46a>
 800231c:	e035      	b.n	800238a <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800231e:	4b10      	ldr	r3, [pc, #64]	; (8002360 <HAL_RCC_OscConfig+0x4cc>)
 8002320:	2200      	movs	r2, #0
 8002322:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002324:	f7ff f95a 	bl	80015dc <HAL_GetTick>
 8002328:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800232a:	e008      	b.n	800233e <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800232c:	f7ff f956 	bl	80015dc <HAL_GetTick>
 8002330:	4602      	mov	r2, r0
 8002332:	693b      	ldr	r3, [r7, #16]
 8002334:	1ad3      	subs	r3, r2, r3
 8002336:	2b02      	cmp	r3, #2
 8002338:	d901      	bls.n	800233e <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 800233a:	2303      	movs	r3, #3
 800233c:	e026      	b.n	800238c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800233e:	4b06      	ldr	r3, [pc, #24]	; (8002358 <HAL_RCC_OscConfig+0x4c4>)
 8002340:	681b      	ldr	r3, [r3, #0]
 8002342:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002346:	2b00      	cmp	r3, #0
 8002348:	d1f0      	bne.n	800232c <HAL_RCC_OscConfig+0x498>
 800234a:	e01e      	b.n	800238a <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	69db      	ldr	r3, [r3, #28]
 8002350:	2b01      	cmp	r3, #1
 8002352:	d107      	bne.n	8002364 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8002354:	2301      	movs	r3, #1
 8002356:	e019      	b.n	800238c <HAL_RCC_OscConfig+0x4f8>
 8002358:	40021000 	.word	0x40021000
 800235c:	40007000 	.word	0x40007000
 8002360:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002364:	4b0b      	ldr	r3, [pc, #44]	; (8002394 <HAL_RCC_OscConfig+0x500>)
 8002366:	685b      	ldr	r3, [r3, #4]
 8002368:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800236a:	68fb      	ldr	r3, [r7, #12]
 800236c:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	6a1b      	ldr	r3, [r3, #32]
 8002374:	429a      	cmp	r2, r3
 8002376:	d106      	bne.n	8002386 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8002378:	68fb      	ldr	r3, [r7, #12]
 800237a:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002382:	429a      	cmp	r2, r3
 8002384:	d001      	beq.n	800238a <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8002386:	2301      	movs	r3, #1
 8002388:	e000      	b.n	800238c <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 800238a:	2300      	movs	r3, #0
}
 800238c:	4618      	mov	r0, r3
 800238e:	3718      	adds	r7, #24
 8002390:	46bd      	mov	sp, r7
 8002392:	bd80      	pop	{r7, pc}
 8002394:	40021000 	.word	0x40021000

08002398 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002398:	b580      	push	{r7, lr}
 800239a:	b084      	sub	sp, #16
 800239c:	af00      	add	r7, sp, #0
 800239e:	6078      	str	r0, [r7, #4]
 80023a0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	2b00      	cmp	r3, #0
 80023a6:	d101      	bne.n	80023ac <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80023a8:	2301      	movs	r3, #1
 80023aa:	e0d0      	b.n	800254e <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80023ac:	4b6a      	ldr	r3, [pc, #424]	; (8002558 <HAL_RCC_ClockConfig+0x1c0>)
 80023ae:	681b      	ldr	r3, [r3, #0]
 80023b0:	f003 0307 	and.w	r3, r3, #7
 80023b4:	683a      	ldr	r2, [r7, #0]
 80023b6:	429a      	cmp	r2, r3
 80023b8:	d910      	bls.n	80023dc <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80023ba:	4b67      	ldr	r3, [pc, #412]	; (8002558 <HAL_RCC_ClockConfig+0x1c0>)
 80023bc:	681b      	ldr	r3, [r3, #0]
 80023be:	f023 0207 	bic.w	r2, r3, #7
 80023c2:	4965      	ldr	r1, [pc, #404]	; (8002558 <HAL_RCC_ClockConfig+0x1c0>)
 80023c4:	683b      	ldr	r3, [r7, #0]
 80023c6:	4313      	orrs	r3, r2
 80023c8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80023ca:	4b63      	ldr	r3, [pc, #396]	; (8002558 <HAL_RCC_ClockConfig+0x1c0>)
 80023cc:	681b      	ldr	r3, [r3, #0]
 80023ce:	f003 0307 	and.w	r3, r3, #7
 80023d2:	683a      	ldr	r2, [r7, #0]
 80023d4:	429a      	cmp	r2, r3
 80023d6:	d001      	beq.n	80023dc <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80023d8:	2301      	movs	r3, #1
 80023da:	e0b8      	b.n	800254e <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	681b      	ldr	r3, [r3, #0]
 80023e0:	f003 0302 	and.w	r3, r3, #2
 80023e4:	2b00      	cmp	r3, #0
 80023e6:	d020      	beq.n	800242a <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	681b      	ldr	r3, [r3, #0]
 80023ec:	f003 0304 	and.w	r3, r3, #4
 80023f0:	2b00      	cmp	r3, #0
 80023f2:	d005      	beq.n	8002400 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80023f4:	4b59      	ldr	r3, [pc, #356]	; (800255c <HAL_RCC_ClockConfig+0x1c4>)
 80023f6:	685b      	ldr	r3, [r3, #4]
 80023f8:	4a58      	ldr	r2, [pc, #352]	; (800255c <HAL_RCC_ClockConfig+0x1c4>)
 80023fa:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80023fe:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	681b      	ldr	r3, [r3, #0]
 8002404:	f003 0308 	and.w	r3, r3, #8
 8002408:	2b00      	cmp	r3, #0
 800240a:	d005      	beq.n	8002418 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800240c:	4b53      	ldr	r3, [pc, #332]	; (800255c <HAL_RCC_ClockConfig+0x1c4>)
 800240e:	685b      	ldr	r3, [r3, #4]
 8002410:	4a52      	ldr	r2, [pc, #328]	; (800255c <HAL_RCC_ClockConfig+0x1c4>)
 8002412:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8002416:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002418:	4b50      	ldr	r3, [pc, #320]	; (800255c <HAL_RCC_ClockConfig+0x1c4>)
 800241a:	685b      	ldr	r3, [r3, #4]
 800241c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	689b      	ldr	r3, [r3, #8]
 8002424:	494d      	ldr	r1, [pc, #308]	; (800255c <HAL_RCC_ClockConfig+0x1c4>)
 8002426:	4313      	orrs	r3, r2
 8002428:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	681b      	ldr	r3, [r3, #0]
 800242e:	f003 0301 	and.w	r3, r3, #1
 8002432:	2b00      	cmp	r3, #0
 8002434:	d040      	beq.n	80024b8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	685b      	ldr	r3, [r3, #4]
 800243a:	2b01      	cmp	r3, #1
 800243c:	d107      	bne.n	800244e <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800243e:	4b47      	ldr	r3, [pc, #284]	; (800255c <HAL_RCC_ClockConfig+0x1c4>)
 8002440:	681b      	ldr	r3, [r3, #0]
 8002442:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002446:	2b00      	cmp	r3, #0
 8002448:	d115      	bne.n	8002476 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800244a:	2301      	movs	r3, #1
 800244c:	e07f      	b.n	800254e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	685b      	ldr	r3, [r3, #4]
 8002452:	2b02      	cmp	r3, #2
 8002454:	d107      	bne.n	8002466 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002456:	4b41      	ldr	r3, [pc, #260]	; (800255c <HAL_RCC_ClockConfig+0x1c4>)
 8002458:	681b      	ldr	r3, [r3, #0]
 800245a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800245e:	2b00      	cmp	r3, #0
 8002460:	d109      	bne.n	8002476 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002462:	2301      	movs	r3, #1
 8002464:	e073      	b.n	800254e <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002466:	4b3d      	ldr	r3, [pc, #244]	; (800255c <HAL_RCC_ClockConfig+0x1c4>)
 8002468:	681b      	ldr	r3, [r3, #0]
 800246a:	f003 0302 	and.w	r3, r3, #2
 800246e:	2b00      	cmp	r3, #0
 8002470:	d101      	bne.n	8002476 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002472:	2301      	movs	r3, #1
 8002474:	e06b      	b.n	800254e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002476:	4b39      	ldr	r3, [pc, #228]	; (800255c <HAL_RCC_ClockConfig+0x1c4>)
 8002478:	685b      	ldr	r3, [r3, #4]
 800247a:	f023 0203 	bic.w	r2, r3, #3
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	685b      	ldr	r3, [r3, #4]
 8002482:	4936      	ldr	r1, [pc, #216]	; (800255c <HAL_RCC_ClockConfig+0x1c4>)
 8002484:	4313      	orrs	r3, r2
 8002486:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002488:	f7ff f8a8 	bl	80015dc <HAL_GetTick>
 800248c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800248e:	e00a      	b.n	80024a6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002490:	f7ff f8a4 	bl	80015dc <HAL_GetTick>
 8002494:	4602      	mov	r2, r0
 8002496:	68fb      	ldr	r3, [r7, #12]
 8002498:	1ad3      	subs	r3, r2, r3
 800249a:	f241 3288 	movw	r2, #5000	; 0x1388
 800249e:	4293      	cmp	r3, r2
 80024a0:	d901      	bls.n	80024a6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80024a2:	2303      	movs	r3, #3
 80024a4:	e053      	b.n	800254e <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80024a6:	4b2d      	ldr	r3, [pc, #180]	; (800255c <HAL_RCC_ClockConfig+0x1c4>)
 80024a8:	685b      	ldr	r3, [r3, #4]
 80024aa:	f003 020c 	and.w	r2, r3, #12
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	685b      	ldr	r3, [r3, #4]
 80024b2:	009b      	lsls	r3, r3, #2
 80024b4:	429a      	cmp	r2, r3
 80024b6:	d1eb      	bne.n	8002490 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80024b8:	4b27      	ldr	r3, [pc, #156]	; (8002558 <HAL_RCC_ClockConfig+0x1c0>)
 80024ba:	681b      	ldr	r3, [r3, #0]
 80024bc:	f003 0307 	and.w	r3, r3, #7
 80024c0:	683a      	ldr	r2, [r7, #0]
 80024c2:	429a      	cmp	r2, r3
 80024c4:	d210      	bcs.n	80024e8 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80024c6:	4b24      	ldr	r3, [pc, #144]	; (8002558 <HAL_RCC_ClockConfig+0x1c0>)
 80024c8:	681b      	ldr	r3, [r3, #0]
 80024ca:	f023 0207 	bic.w	r2, r3, #7
 80024ce:	4922      	ldr	r1, [pc, #136]	; (8002558 <HAL_RCC_ClockConfig+0x1c0>)
 80024d0:	683b      	ldr	r3, [r7, #0]
 80024d2:	4313      	orrs	r3, r2
 80024d4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80024d6:	4b20      	ldr	r3, [pc, #128]	; (8002558 <HAL_RCC_ClockConfig+0x1c0>)
 80024d8:	681b      	ldr	r3, [r3, #0]
 80024da:	f003 0307 	and.w	r3, r3, #7
 80024de:	683a      	ldr	r2, [r7, #0]
 80024e0:	429a      	cmp	r2, r3
 80024e2:	d001      	beq.n	80024e8 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80024e4:	2301      	movs	r3, #1
 80024e6:	e032      	b.n	800254e <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	681b      	ldr	r3, [r3, #0]
 80024ec:	f003 0304 	and.w	r3, r3, #4
 80024f0:	2b00      	cmp	r3, #0
 80024f2:	d008      	beq.n	8002506 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80024f4:	4b19      	ldr	r3, [pc, #100]	; (800255c <HAL_RCC_ClockConfig+0x1c4>)
 80024f6:	685b      	ldr	r3, [r3, #4]
 80024f8:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	68db      	ldr	r3, [r3, #12]
 8002500:	4916      	ldr	r1, [pc, #88]	; (800255c <HAL_RCC_ClockConfig+0x1c4>)
 8002502:	4313      	orrs	r3, r2
 8002504:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	681b      	ldr	r3, [r3, #0]
 800250a:	f003 0308 	and.w	r3, r3, #8
 800250e:	2b00      	cmp	r3, #0
 8002510:	d009      	beq.n	8002526 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002512:	4b12      	ldr	r3, [pc, #72]	; (800255c <HAL_RCC_ClockConfig+0x1c4>)
 8002514:	685b      	ldr	r3, [r3, #4]
 8002516:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	691b      	ldr	r3, [r3, #16]
 800251e:	00db      	lsls	r3, r3, #3
 8002520:	490e      	ldr	r1, [pc, #56]	; (800255c <HAL_RCC_ClockConfig+0x1c4>)
 8002522:	4313      	orrs	r3, r2
 8002524:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002526:	f000 f821 	bl	800256c <HAL_RCC_GetSysClockFreq>
 800252a:	4602      	mov	r2, r0
 800252c:	4b0b      	ldr	r3, [pc, #44]	; (800255c <HAL_RCC_ClockConfig+0x1c4>)
 800252e:	685b      	ldr	r3, [r3, #4]
 8002530:	091b      	lsrs	r3, r3, #4
 8002532:	f003 030f 	and.w	r3, r3, #15
 8002536:	490a      	ldr	r1, [pc, #40]	; (8002560 <HAL_RCC_ClockConfig+0x1c8>)
 8002538:	5ccb      	ldrb	r3, [r1, r3]
 800253a:	fa22 f303 	lsr.w	r3, r2, r3
 800253e:	4a09      	ldr	r2, [pc, #36]	; (8002564 <HAL_RCC_ClockConfig+0x1cc>)
 8002540:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8002542:	4b09      	ldr	r3, [pc, #36]	; (8002568 <HAL_RCC_ClockConfig+0x1d0>)
 8002544:	681b      	ldr	r3, [r3, #0]
 8002546:	4618      	mov	r0, r3
 8002548:	f7ff f806 	bl	8001558 <HAL_InitTick>

  return HAL_OK;
 800254c:	2300      	movs	r3, #0
}
 800254e:	4618      	mov	r0, r3
 8002550:	3710      	adds	r7, #16
 8002552:	46bd      	mov	sp, r7
 8002554:	bd80      	pop	{r7, pc}
 8002556:	bf00      	nop
 8002558:	40022000 	.word	0x40022000
 800255c:	40021000 	.word	0x40021000
 8002560:	08003e44 	.word	0x08003e44
 8002564:	20000000 	.word	0x20000000
 8002568:	20000004 	.word	0x20000004

0800256c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800256c:	b480      	push	{r7}
 800256e:	b087      	sub	sp, #28
 8002570:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002572:	2300      	movs	r3, #0
 8002574:	60fb      	str	r3, [r7, #12]
 8002576:	2300      	movs	r3, #0
 8002578:	60bb      	str	r3, [r7, #8]
 800257a:	2300      	movs	r3, #0
 800257c:	617b      	str	r3, [r7, #20]
 800257e:	2300      	movs	r3, #0
 8002580:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8002582:	2300      	movs	r3, #0
 8002584:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8002586:	4b1e      	ldr	r3, [pc, #120]	; (8002600 <HAL_RCC_GetSysClockFreq+0x94>)
 8002588:	685b      	ldr	r3, [r3, #4]
 800258a:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 800258c:	68fb      	ldr	r3, [r7, #12]
 800258e:	f003 030c 	and.w	r3, r3, #12
 8002592:	2b04      	cmp	r3, #4
 8002594:	d002      	beq.n	800259c <HAL_RCC_GetSysClockFreq+0x30>
 8002596:	2b08      	cmp	r3, #8
 8002598:	d003      	beq.n	80025a2 <HAL_RCC_GetSysClockFreq+0x36>
 800259a:	e027      	b.n	80025ec <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 800259c:	4b19      	ldr	r3, [pc, #100]	; (8002604 <HAL_RCC_GetSysClockFreq+0x98>)
 800259e:	613b      	str	r3, [r7, #16]
      break;
 80025a0:	e027      	b.n	80025f2 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80025a2:	68fb      	ldr	r3, [r7, #12]
 80025a4:	0c9b      	lsrs	r3, r3, #18
 80025a6:	f003 030f 	and.w	r3, r3, #15
 80025aa:	4a17      	ldr	r2, [pc, #92]	; (8002608 <HAL_RCC_GetSysClockFreq+0x9c>)
 80025ac:	5cd3      	ldrb	r3, [r2, r3]
 80025ae:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80025b0:	68fb      	ldr	r3, [r7, #12]
 80025b2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80025b6:	2b00      	cmp	r3, #0
 80025b8:	d010      	beq.n	80025dc <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80025ba:	4b11      	ldr	r3, [pc, #68]	; (8002600 <HAL_RCC_GetSysClockFreq+0x94>)
 80025bc:	685b      	ldr	r3, [r3, #4]
 80025be:	0c5b      	lsrs	r3, r3, #17
 80025c0:	f003 0301 	and.w	r3, r3, #1
 80025c4:	4a11      	ldr	r2, [pc, #68]	; (800260c <HAL_RCC_GetSysClockFreq+0xa0>)
 80025c6:	5cd3      	ldrb	r3, [r2, r3]
 80025c8:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	4a0d      	ldr	r2, [pc, #52]	; (8002604 <HAL_RCC_GetSysClockFreq+0x98>)
 80025ce:	fb03 f202 	mul.w	r2, r3, r2
 80025d2:	68bb      	ldr	r3, [r7, #8]
 80025d4:	fbb2 f3f3 	udiv	r3, r2, r3
 80025d8:	617b      	str	r3, [r7, #20]
 80025da:	e004      	b.n	80025e6 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	4a0c      	ldr	r2, [pc, #48]	; (8002610 <HAL_RCC_GetSysClockFreq+0xa4>)
 80025e0:	fb02 f303 	mul.w	r3, r2, r3
 80025e4:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 80025e6:	697b      	ldr	r3, [r7, #20]
 80025e8:	613b      	str	r3, [r7, #16]
      break;
 80025ea:	e002      	b.n	80025f2 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80025ec:	4b05      	ldr	r3, [pc, #20]	; (8002604 <HAL_RCC_GetSysClockFreq+0x98>)
 80025ee:	613b      	str	r3, [r7, #16]
      break;
 80025f0:	bf00      	nop
    }
  }
  return sysclockfreq;
 80025f2:	693b      	ldr	r3, [r7, #16]
}
 80025f4:	4618      	mov	r0, r3
 80025f6:	371c      	adds	r7, #28
 80025f8:	46bd      	mov	sp, r7
 80025fa:	bc80      	pop	{r7}
 80025fc:	4770      	bx	lr
 80025fe:	bf00      	nop
 8002600:	40021000 	.word	0x40021000
 8002604:	007a1200 	.word	0x007a1200
 8002608:	08003e5c 	.word	0x08003e5c
 800260c:	08003e6c 	.word	0x08003e6c
 8002610:	003d0900 	.word	0x003d0900

08002614 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002614:	b480      	push	{r7}
 8002616:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002618:	4b02      	ldr	r3, [pc, #8]	; (8002624 <HAL_RCC_GetHCLKFreq+0x10>)
 800261a:	681b      	ldr	r3, [r3, #0]
}
 800261c:	4618      	mov	r0, r3
 800261e:	46bd      	mov	sp, r7
 8002620:	bc80      	pop	{r7}
 8002622:	4770      	bx	lr
 8002624:	20000000 	.word	0x20000000

08002628 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002628:	b580      	push	{r7, lr}
 800262a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800262c:	f7ff fff2 	bl	8002614 <HAL_RCC_GetHCLKFreq>
 8002630:	4602      	mov	r2, r0
 8002632:	4b05      	ldr	r3, [pc, #20]	; (8002648 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002634:	685b      	ldr	r3, [r3, #4]
 8002636:	0a1b      	lsrs	r3, r3, #8
 8002638:	f003 0307 	and.w	r3, r3, #7
 800263c:	4903      	ldr	r1, [pc, #12]	; (800264c <HAL_RCC_GetPCLK1Freq+0x24>)
 800263e:	5ccb      	ldrb	r3, [r1, r3]
 8002640:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002644:	4618      	mov	r0, r3
 8002646:	bd80      	pop	{r7, pc}
 8002648:	40021000 	.word	0x40021000
 800264c:	08003e54 	.word	0x08003e54

08002650 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002650:	b580      	push	{r7, lr}
 8002652:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002654:	f7ff ffde 	bl	8002614 <HAL_RCC_GetHCLKFreq>
 8002658:	4602      	mov	r2, r0
 800265a:	4b05      	ldr	r3, [pc, #20]	; (8002670 <HAL_RCC_GetPCLK2Freq+0x20>)
 800265c:	685b      	ldr	r3, [r3, #4]
 800265e:	0adb      	lsrs	r3, r3, #11
 8002660:	f003 0307 	and.w	r3, r3, #7
 8002664:	4903      	ldr	r1, [pc, #12]	; (8002674 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002666:	5ccb      	ldrb	r3, [r1, r3]
 8002668:	fa22 f303 	lsr.w	r3, r2, r3
}
 800266c:	4618      	mov	r0, r3
 800266e:	bd80      	pop	{r7, pc}
 8002670:	40021000 	.word	0x40021000
 8002674:	08003e54 	.word	0x08003e54

08002678 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8002678:	b480      	push	{r7}
 800267a:	b085      	sub	sp, #20
 800267c:	af00      	add	r7, sp, #0
 800267e:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8002680:	4b0a      	ldr	r3, [pc, #40]	; (80026ac <RCC_Delay+0x34>)
 8002682:	681b      	ldr	r3, [r3, #0]
 8002684:	4a0a      	ldr	r2, [pc, #40]	; (80026b0 <RCC_Delay+0x38>)
 8002686:	fba2 2303 	umull	r2, r3, r2, r3
 800268a:	0a5b      	lsrs	r3, r3, #9
 800268c:	687a      	ldr	r2, [r7, #4]
 800268e:	fb02 f303 	mul.w	r3, r2, r3
 8002692:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8002694:	bf00      	nop
  }
  while (Delay --);
 8002696:	68fb      	ldr	r3, [r7, #12]
 8002698:	1e5a      	subs	r2, r3, #1
 800269a:	60fa      	str	r2, [r7, #12]
 800269c:	2b00      	cmp	r3, #0
 800269e:	d1f9      	bne.n	8002694 <RCC_Delay+0x1c>
}
 80026a0:	bf00      	nop
 80026a2:	bf00      	nop
 80026a4:	3714      	adds	r7, #20
 80026a6:	46bd      	mov	sp, r7
 80026a8:	bc80      	pop	{r7}
 80026aa:	4770      	bx	lr
 80026ac:	20000000 	.word	0x20000000
 80026b0:	10624dd3 	.word	0x10624dd3

080026b4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80026b4:	b580      	push	{r7, lr}
 80026b6:	b082      	sub	sp, #8
 80026b8:	af00      	add	r7, sp, #0
 80026ba:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	2b00      	cmp	r3, #0
 80026c0:	d101      	bne.n	80026c6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80026c2:	2301      	movs	r3, #1
 80026c4:	e041      	b.n	800274a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80026cc:	b2db      	uxtb	r3, r3
 80026ce:	2b00      	cmp	r3, #0
 80026d0:	d106      	bne.n	80026e0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	2200      	movs	r2, #0
 80026d6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80026da:	6878      	ldr	r0, [r7, #4]
 80026dc:	f7fe fdd6 	bl	800128c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	2202      	movs	r2, #2
 80026e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	681a      	ldr	r2, [r3, #0]
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	3304      	adds	r3, #4
 80026f0:	4619      	mov	r1, r3
 80026f2:	4610      	mov	r0, r2
 80026f4:	f000 faac 	bl	8002c50 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	2201      	movs	r2, #1
 80026fc:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	2201      	movs	r2, #1
 8002704:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	2201      	movs	r2, #1
 800270c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	2201      	movs	r2, #1
 8002714:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	2201      	movs	r2, #1
 800271c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	2201      	movs	r2, #1
 8002724:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	2201      	movs	r2, #1
 800272c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	2201      	movs	r2, #1
 8002734:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	2201      	movs	r2, #1
 800273c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	2201      	movs	r2, #1
 8002744:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002748:	2300      	movs	r3, #0
}
 800274a:	4618      	mov	r0, r3
 800274c:	3708      	adds	r7, #8
 800274e:	46bd      	mov	sp, r7
 8002750:	bd80      	pop	{r7, pc}

08002752 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8002752:	b580      	push	{r7, lr}
 8002754:	b082      	sub	sp, #8
 8002756:	af00      	add	r7, sp, #0
 8002758:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	2b00      	cmp	r3, #0
 800275e:	d101      	bne.n	8002764 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8002760:	2301      	movs	r3, #1
 8002762:	e041      	b.n	80027e8 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800276a:	b2db      	uxtb	r3, r3
 800276c:	2b00      	cmp	r3, #0
 800276e:	d106      	bne.n	800277e <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	2200      	movs	r2, #0
 8002774:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8002778:	6878      	ldr	r0, [r7, #4]
 800277a:	f000 f839 	bl	80027f0 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	2202      	movs	r2, #2
 8002782:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	681a      	ldr	r2, [r3, #0]
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	3304      	adds	r3, #4
 800278e:	4619      	mov	r1, r3
 8002790:	4610      	mov	r0, r2
 8002792:	f000 fa5d 	bl	8002c50 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	2201      	movs	r2, #1
 800279a:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	2201      	movs	r2, #1
 80027a2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	2201      	movs	r2, #1
 80027aa:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	2201      	movs	r2, #1
 80027b2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	2201      	movs	r2, #1
 80027ba:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	2201      	movs	r2, #1
 80027c2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	2201      	movs	r2, #1
 80027ca:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	2201      	movs	r2, #1
 80027d2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	2201      	movs	r2, #1
 80027da:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	2201      	movs	r2, #1
 80027e2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80027e6:	2300      	movs	r3, #0
}
 80027e8:	4618      	mov	r0, r3
 80027ea:	3708      	adds	r7, #8
 80027ec:	46bd      	mov	sp, r7
 80027ee:	bd80      	pop	{r7, pc}

080027f0 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80027f0:	b480      	push	{r7}
 80027f2:	b083      	sub	sp, #12
 80027f4:	af00      	add	r7, sp, #0
 80027f6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80027f8:	bf00      	nop
 80027fa:	370c      	adds	r7, #12
 80027fc:	46bd      	mov	sp, r7
 80027fe:	bc80      	pop	{r7}
 8002800:	4770      	bx	lr
	...

08002804 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8002804:	b580      	push	{r7, lr}
 8002806:	b084      	sub	sp, #16
 8002808:	af00      	add	r7, sp, #0
 800280a:	6078      	str	r0, [r7, #4]
 800280c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800280e:	683b      	ldr	r3, [r7, #0]
 8002810:	2b00      	cmp	r3, #0
 8002812:	d109      	bne.n	8002828 <HAL_TIM_PWM_Start+0x24>
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800281a:	b2db      	uxtb	r3, r3
 800281c:	2b01      	cmp	r3, #1
 800281e:	bf14      	ite	ne
 8002820:	2301      	movne	r3, #1
 8002822:	2300      	moveq	r3, #0
 8002824:	b2db      	uxtb	r3, r3
 8002826:	e022      	b.n	800286e <HAL_TIM_PWM_Start+0x6a>
 8002828:	683b      	ldr	r3, [r7, #0]
 800282a:	2b04      	cmp	r3, #4
 800282c:	d109      	bne.n	8002842 <HAL_TIM_PWM_Start+0x3e>
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8002834:	b2db      	uxtb	r3, r3
 8002836:	2b01      	cmp	r3, #1
 8002838:	bf14      	ite	ne
 800283a:	2301      	movne	r3, #1
 800283c:	2300      	moveq	r3, #0
 800283e:	b2db      	uxtb	r3, r3
 8002840:	e015      	b.n	800286e <HAL_TIM_PWM_Start+0x6a>
 8002842:	683b      	ldr	r3, [r7, #0]
 8002844:	2b08      	cmp	r3, #8
 8002846:	d109      	bne.n	800285c <HAL_TIM_PWM_Start+0x58>
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800284e:	b2db      	uxtb	r3, r3
 8002850:	2b01      	cmp	r3, #1
 8002852:	bf14      	ite	ne
 8002854:	2301      	movne	r3, #1
 8002856:	2300      	moveq	r3, #0
 8002858:	b2db      	uxtb	r3, r3
 800285a:	e008      	b.n	800286e <HAL_TIM_PWM_Start+0x6a>
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002862:	b2db      	uxtb	r3, r3
 8002864:	2b01      	cmp	r3, #1
 8002866:	bf14      	ite	ne
 8002868:	2301      	movne	r3, #1
 800286a:	2300      	moveq	r3, #0
 800286c:	b2db      	uxtb	r3, r3
 800286e:	2b00      	cmp	r3, #0
 8002870:	d001      	beq.n	8002876 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8002872:	2301      	movs	r3, #1
 8002874:	e059      	b.n	800292a <HAL_TIM_PWM_Start+0x126>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8002876:	683b      	ldr	r3, [r7, #0]
 8002878:	2b00      	cmp	r3, #0
 800287a:	d104      	bne.n	8002886 <HAL_TIM_PWM_Start+0x82>
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	2202      	movs	r2, #2
 8002880:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002884:	e013      	b.n	80028ae <HAL_TIM_PWM_Start+0xaa>
 8002886:	683b      	ldr	r3, [r7, #0]
 8002888:	2b04      	cmp	r3, #4
 800288a:	d104      	bne.n	8002896 <HAL_TIM_PWM_Start+0x92>
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	2202      	movs	r2, #2
 8002890:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002894:	e00b      	b.n	80028ae <HAL_TIM_PWM_Start+0xaa>
 8002896:	683b      	ldr	r3, [r7, #0]
 8002898:	2b08      	cmp	r3, #8
 800289a:	d104      	bne.n	80028a6 <HAL_TIM_PWM_Start+0xa2>
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	2202      	movs	r2, #2
 80028a0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80028a4:	e003      	b.n	80028ae <HAL_TIM_PWM_Start+0xaa>
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	2202      	movs	r2, #2
 80028aa:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	681b      	ldr	r3, [r3, #0]
 80028b2:	2201      	movs	r2, #1
 80028b4:	6839      	ldr	r1, [r7, #0]
 80028b6:	4618      	mov	r0, r3
 80028b8:	f000 fc4c 	bl	8003154 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	681b      	ldr	r3, [r3, #0]
 80028c0:	4a1c      	ldr	r2, [pc, #112]	; (8002934 <HAL_TIM_PWM_Start+0x130>)
 80028c2:	4293      	cmp	r3, r2
 80028c4:	d107      	bne.n	80028d6 <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	681b      	ldr	r3, [r3, #0]
 80028ca:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	681b      	ldr	r3, [r3, #0]
 80028d0:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80028d4:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	681b      	ldr	r3, [r3, #0]
 80028da:	4a16      	ldr	r2, [pc, #88]	; (8002934 <HAL_TIM_PWM_Start+0x130>)
 80028dc:	4293      	cmp	r3, r2
 80028de:	d009      	beq.n	80028f4 <HAL_TIM_PWM_Start+0xf0>
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	681b      	ldr	r3, [r3, #0]
 80028e4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80028e8:	d004      	beq.n	80028f4 <HAL_TIM_PWM_Start+0xf0>
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	681b      	ldr	r3, [r3, #0]
 80028ee:	4a12      	ldr	r2, [pc, #72]	; (8002938 <HAL_TIM_PWM_Start+0x134>)
 80028f0:	4293      	cmp	r3, r2
 80028f2:	d111      	bne.n	8002918 <HAL_TIM_PWM_Start+0x114>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	681b      	ldr	r3, [r3, #0]
 80028f8:	689b      	ldr	r3, [r3, #8]
 80028fa:	f003 0307 	and.w	r3, r3, #7
 80028fe:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002900:	68fb      	ldr	r3, [r7, #12]
 8002902:	2b06      	cmp	r3, #6
 8002904:	d010      	beq.n	8002928 <HAL_TIM_PWM_Start+0x124>
    {
      __HAL_TIM_ENABLE(htim);
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	681b      	ldr	r3, [r3, #0]
 800290a:	681a      	ldr	r2, [r3, #0]
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	681b      	ldr	r3, [r3, #0]
 8002910:	f042 0201 	orr.w	r2, r2, #1
 8002914:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002916:	e007      	b.n	8002928 <HAL_TIM_PWM_Start+0x124>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	681b      	ldr	r3, [r3, #0]
 800291c:	681a      	ldr	r2, [r3, #0]
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	681b      	ldr	r3, [r3, #0]
 8002922:	f042 0201 	orr.w	r2, r2, #1
 8002926:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002928:	2300      	movs	r3, #0
}
 800292a:	4618      	mov	r0, r3
 800292c:	3710      	adds	r7, #16
 800292e:	46bd      	mov	sp, r7
 8002930:	bd80      	pop	{r7, pc}
 8002932:	bf00      	nop
 8002934:	40012c00 	.word	0x40012c00
 8002938:	40000400 	.word	0x40000400

0800293c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800293c:	b580      	push	{r7, lr}
 800293e:	b086      	sub	sp, #24
 8002940:	af00      	add	r7, sp, #0
 8002942:	60f8      	str	r0, [r7, #12]
 8002944:	60b9      	str	r1, [r7, #8]
 8002946:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002948:	2300      	movs	r3, #0
 800294a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800294c:	68fb      	ldr	r3, [r7, #12]
 800294e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002952:	2b01      	cmp	r3, #1
 8002954:	d101      	bne.n	800295a <HAL_TIM_PWM_ConfigChannel+0x1e>
 8002956:	2302      	movs	r3, #2
 8002958:	e0ae      	b.n	8002ab8 <HAL_TIM_PWM_ConfigChannel+0x17c>
 800295a:	68fb      	ldr	r3, [r7, #12]
 800295c:	2201      	movs	r2, #1
 800295e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	2b0c      	cmp	r3, #12
 8002966:	f200 809f 	bhi.w	8002aa8 <HAL_TIM_PWM_ConfigChannel+0x16c>
 800296a:	a201      	add	r2, pc, #4	; (adr r2, 8002970 <HAL_TIM_PWM_ConfigChannel+0x34>)
 800296c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002970:	080029a5 	.word	0x080029a5
 8002974:	08002aa9 	.word	0x08002aa9
 8002978:	08002aa9 	.word	0x08002aa9
 800297c:	08002aa9 	.word	0x08002aa9
 8002980:	080029e5 	.word	0x080029e5
 8002984:	08002aa9 	.word	0x08002aa9
 8002988:	08002aa9 	.word	0x08002aa9
 800298c:	08002aa9 	.word	0x08002aa9
 8002990:	08002a27 	.word	0x08002a27
 8002994:	08002aa9 	.word	0x08002aa9
 8002998:	08002aa9 	.word	0x08002aa9
 800299c:	08002aa9 	.word	0x08002aa9
 80029a0:	08002a67 	.word	0x08002a67
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80029a4:	68fb      	ldr	r3, [r7, #12]
 80029a6:	681b      	ldr	r3, [r3, #0]
 80029a8:	68b9      	ldr	r1, [r7, #8]
 80029aa:	4618      	mov	r0, r3
 80029ac:	f000 f9b4 	bl	8002d18 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80029b0:	68fb      	ldr	r3, [r7, #12]
 80029b2:	681b      	ldr	r3, [r3, #0]
 80029b4:	699a      	ldr	r2, [r3, #24]
 80029b6:	68fb      	ldr	r3, [r7, #12]
 80029b8:	681b      	ldr	r3, [r3, #0]
 80029ba:	f042 0208 	orr.w	r2, r2, #8
 80029be:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80029c0:	68fb      	ldr	r3, [r7, #12]
 80029c2:	681b      	ldr	r3, [r3, #0]
 80029c4:	699a      	ldr	r2, [r3, #24]
 80029c6:	68fb      	ldr	r3, [r7, #12]
 80029c8:	681b      	ldr	r3, [r3, #0]
 80029ca:	f022 0204 	bic.w	r2, r2, #4
 80029ce:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80029d0:	68fb      	ldr	r3, [r7, #12]
 80029d2:	681b      	ldr	r3, [r3, #0]
 80029d4:	6999      	ldr	r1, [r3, #24]
 80029d6:	68bb      	ldr	r3, [r7, #8]
 80029d8:	691a      	ldr	r2, [r3, #16]
 80029da:	68fb      	ldr	r3, [r7, #12]
 80029dc:	681b      	ldr	r3, [r3, #0]
 80029de:	430a      	orrs	r2, r1
 80029e0:	619a      	str	r2, [r3, #24]
      break;
 80029e2:	e064      	b.n	8002aae <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80029e4:	68fb      	ldr	r3, [r7, #12]
 80029e6:	681b      	ldr	r3, [r3, #0]
 80029e8:	68b9      	ldr	r1, [r7, #8]
 80029ea:	4618      	mov	r0, r3
 80029ec:	f000 f9fa 	bl	8002de4 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80029f0:	68fb      	ldr	r3, [r7, #12]
 80029f2:	681b      	ldr	r3, [r3, #0]
 80029f4:	699a      	ldr	r2, [r3, #24]
 80029f6:	68fb      	ldr	r3, [r7, #12]
 80029f8:	681b      	ldr	r3, [r3, #0]
 80029fa:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80029fe:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8002a00:	68fb      	ldr	r3, [r7, #12]
 8002a02:	681b      	ldr	r3, [r3, #0]
 8002a04:	699a      	ldr	r2, [r3, #24]
 8002a06:	68fb      	ldr	r3, [r7, #12]
 8002a08:	681b      	ldr	r3, [r3, #0]
 8002a0a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002a0e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8002a10:	68fb      	ldr	r3, [r7, #12]
 8002a12:	681b      	ldr	r3, [r3, #0]
 8002a14:	6999      	ldr	r1, [r3, #24]
 8002a16:	68bb      	ldr	r3, [r7, #8]
 8002a18:	691b      	ldr	r3, [r3, #16]
 8002a1a:	021a      	lsls	r2, r3, #8
 8002a1c:	68fb      	ldr	r3, [r7, #12]
 8002a1e:	681b      	ldr	r3, [r3, #0]
 8002a20:	430a      	orrs	r2, r1
 8002a22:	619a      	str	r2, [r3, #24]
      break;
 8002a24:	e043      	b.n	8002aae <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8002a26:	68fb      	ldr	r3, [r7, #12]
 8002a28:	681b      	ldr	r3, [r3, #0]
 8002a2a:	68b9      	ldr	r1, [r7, #8]
 8002a2c:	4618      	mov	r0, r3
 8002a2e:	f000 fa43 	bl	8002eb8 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8002a32:	68fb      	ldr	r3, [r7, #12]
 8002a34:	681b      	ldr	r3, [r3, #0]
 8002a36:	69da      	ldr	r2, [r3, #28]
 8002a38:	68fb      	ldr	r3, [r7, #12]
 8002a3a:	681b      	ldr	r3, [r3, #0]
 8002a3c:	f042 0208 	orr.w	r2, r2, #8
 8002a40:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8002a42:	68fb      	ldr	r3, [r7, #12]
 8002a44:	681b      	ldr	r3, [r3, #0]
 8002a46:	69da      	ldr	r2, [r3, #28]
 8002a48:	68fb      	ldr	r3, [r7, #12]
 8002a4a:	681b      	ldr	r3, [r3, #0]
 8002a4c:	f022 0204 	bic.w	r2, r2, #4
 8002a50:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8002a52:	68fb      	ldr	r3, [r7, #12]
 8002a54:	681b      	ldr	r3, [r3, #0]
 8002a56:	69d9      	ldr	r1, [r3, #28]
 8002a58:	68bb      	ldr	r3, [r7, #8]
 8002a5a:	691a      	ldr	r2, [r3, #16]
 8002a5c:	68fb      	ldr	r3, [r7, #12]
 8002a5e:	681b      	ldr	r3, [r3, #0]
 8002a60:	430a      	orrs	r2, r1
 8002a62:	61da      	str	r2, [r3, #28]
      break;
 8002a64:	e023      	b.n	8002aae <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8002a66:	68fb      	ldr	r3, [r7, #12]
 8002a68:	681b      	ldr	r3, [r3, #0]
 8002a6a:	68b9      	ldr	r1, [r7, #8]
 8002a6c:	4618      	mov	r0, r3
 8002a6e:	f000 fa8d 	bl	8002f8c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8002a72:	68fb      	ldr	r3, [r7, #12]
 8002a74:	681b      	ldr	r3, [r3, #0]
 8002a76:	69da      	ldr	r2, [r3, #28]
 8002a78:	68fb      	ldr	r3, [r7, #12]
 8002a7a:	681b      	ldr	r3, [r3, #0]
 8002a7c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002a80:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8002a82:	68fb      	ldr	r3, [r7, #12]
 8002a84:	681b      	ldr	r3, [r3, #0]
 8002a86:	69da      	ldr	r2, [r3, #28]
 8002a88:	68fb      	ldr	r3, [r7, #12]
 8002a8a:	681b      	ldr	r3, [r3, #0]
 8002a8c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002a90:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8002a92:	68fb      	ldr	r3, [r7, #12]
 8002a94:	681b      	ldr	r3, [r3, #0]
 8002a96:	69d9      	ldr	r1, [r3, #28]
 8002a98:	68bb      	ldr	r3, [r7, #8]
 8002a9a:	691b      	ldr	r3, [r3, #16]
 8002a9c:	021a      	lsls	r2, r3, #8
 8002a9e:	68fb      	ldr	r3, [r7, #12]
 8002aa0:	681b      	ldr	r3, [r3, #0]
 8002aa2:	430a      	orrs	r2, r1
 8002aa4:	61da      	str	r2, [r3, #28]
      break;
 8002aa6:	e002      	b.n	8002aae <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8002aa8:	2301      	movs	r3, #1
 8002aaa:	75fb      	strb	r3, [r7, #23]
      break;
 8002aac:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8002aae:	68fb      	ldr	r3, [r7, #12]
 8002ab0:	2200      	movs	r2, #0
 8002ab2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8002ab6:	7dfb      	ldrb	r3, [r7, #23]
}
 8002ab8:	4618      	mov	r0, r3
 8002aba:	3718      	adds	r7, #24
 8002abc:	46bd      	mov	sp, r7
 8002abe:	bd80      	pop	{r7, pc}

08002ac0 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8002ac0:	b580      	push	{r7, lr}
 8002ac2:	b084      	sub	sp, #16
 8002ac4:	af00      	add	r7, sp, #0
 8002ac6:	6078      	str	r0, [r7, #4]
 8002ac8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002aca:	2300      	movs	r3, #0
 8002acc:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002ad4:	2b01      	cmp	r3, #1
 8002ad6:	d101      	bne.n	8002adc <HAL_TIM_ConfigClockSource+0x1c>
 8002ad8:	2302      	movs	r3, #2
 8002ada:	e0b4      	b.n	8002c46 <HAL_TIM_ConfigClockSource+0x186>
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	2201      	movs	r2, #1
 8002ae0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	2202      	movs	r2, #2
 8002ae8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	681b      	ldr	r3, [r3, #0]
 8002af0:	689b      	ldr	r3, [r3, #8]
 8002af2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002af4:	68bb      	ldr	r3, [r7, #8]
 8002af6:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8002afa:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002afc:	68bb      	ldr	r3, [r7, #8]
 8002afe:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002b02:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	681b      	ldr	r3, [r3, #0]
 8002b08:	68ba      	ldr	r2, [r7, #8]
 8002b0a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002b0c:	683b      	ldr	r3, [r7, #0]
 8002b0e:	681b      	ldr	r3, [r3, #0]
 8002b10:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002b14:	d03e      	beq.n	8002b94 <HAL_TIM_ConfigClockSource+0xd4>
 8002b16:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002b1a:	f200 8087 	bhi.w	8002c2c <HAL_TIM_ConfigClockSource+0x16c>
 8002b1e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002b22:	f000 8086 	beq.w	8002c32 <HAL_TIM_ConfigClockSource+0x172>
 8002b26:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002b2a:	d87f      	bhi.n	8002c2c <HAL_TIM_ConfigClockSource+0x16c>
 8002b2c:	2b70      	cmp	r3, #112	; 0x70
 8002b2e:	d01a      	beq.n	8002b66 <HAL_TIM_ConfigClockSource+0xa6>
 8002b30:	2b70      	cmp	r3, #112	; 0x70
 8002b32:	d87b      	bhi.n	8002c2c <HAL_TIM_ConfigClockSource+0x16c>
 8002b34:	2b60      	cmp	r3, #96	; 0x60
 8002b36:	d050      	beq.n	8002bda <HAL_TIM_ConfigClockSource+0x11a>
 8002b38:	2b60      	cmp	r3, #96	; 0x60
 8002b3a:	d877      	bhi.n	8002c2c <HAL_TIM_ConfigClockSource+0x16c>
 8002b3c:	2b50      	cmp	r3, #80	; 0x50
 8002b3e:	d03c      	beq.n	8002bba <HAL_TIM_ConfigClockSource+0xfa>
 8002b40:	2b50      	cmp	r3, #80	; 0x50
 8002b42:	d873      	bhi.n	8002c2c <HAL_TIM_ConfigClockSource+0x16c>
 8002b44:	2b40      	cmp	r3, #64	; 0x40
 8002b46:	d058      	beq.n	8002bfa <HAL_TIM_ConfigClockSource+0x13a>
 8002b48:	2b40      	cmp	r3, #64	; 0x40
 8002b4a:	d86f      	bhi.n	8002c2c <HAL_TIM_ConfigClockSource+0x16c>
 8002b4c:	2b30      	cmp	r3, #48	; 0x30
 8002b4e:	d064      	beq.n	8002c1a <HAL_TIM_ConfigClockSource+0x15a>
 8002b50:	2b30      	cmp	r3, #48	; 0x30
 8002b52:	d86b      	bhi.n	8002c2c <HAL_TIM_ConfigClockSource+0x16c>
 8002b54:	2b20      	cmp	r3, #32
 8002b56:	d060      	beq.n	8002c1a <HAL_TIM_ConfigClockSource+0x15a>
 8002b58:	2b20      	cmp	r3, #32
 8002b5a:	d867      	bhi.n	8002c2c <HAL_TIM_ConfigClockSource+0x16c>
 8002b5c:	2b00      	cmp	r3, #0
 8002b5e:	d05c      	beq.n	8002c1a <HAL_TIM_ConfigClockSource+0x15a>
 8002b60:	2b10      	cmp	r3, #16
 8002b62:	d05a      	beq.n	8002c1a <HAL_TIM_ConfigClockSource+0x15a>
 8002b64:	e062      	b.n	8002c2c <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	6818      	ldr	r0, [r3, #0]
 8002b6a:	683b      	ldr	r3, [r7, #0]
 8002b6c:	6899      	ldr	r1, [r3, #8]
 8002b6e:	683b      	ldr	r3, [r7, #0]
 8002b70:	685a      	ldr	r2, [r3, #4]
 8002b72:	683b      	ldr	r3, [r7, #0]
 8002b74:	68db      	ldr	r3, [r3, #12]
 8002b76:	f000 face 	bl	8003116 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	681b      	ldr	r3, [r3, #0]
 8002b7e:	689b      	ldr	r3, [r3, #8]
 8002b80:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8002b82:	68bb      	ldr	r3, [r7, #8]
 8002b84:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8002b88:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	681b      	ldr	r3, [r3, #0]
 8002b8e:	68ba      	ldr	r2, [r7, #8]
 8002b90:	609a      	str	r2, [r3, #8]
      break;
 8002b92:	e04f      	b.n	8002c34 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	6818      	ldr	r0, [r3, #0]
 8002b98:	683b      	ldr	r3, [r7, #0]
 8002b9a:	6899      	ldr	r1, [r3, #8]
 8002b9c:	683b      	ldr	r3, [r7, #0]
 8002b9e:	685a      	ldr	r2, [r3, #4]
 8002ba0:	683b      	ldr	r3, [r7, #0]
 8002ba2:	68db      	ldr	r3, [r3, #12]
 8002ba4:	f000 fab7 	bl	8003116 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	681b      	ldr	r3, [r3, #0]
 8002bac:	689a      	ldr	r2, [r3, #8]
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	681b      	ldr	r3, [r3, #0]
 8002bb2:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002bb6:	609a      	str	r2, [r3, #8]
      break;
 8002bb8:	e03c      	b.n	8002c34 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	6818      	ldr	r0, [r3, #0]
 8002bbe:	683b      	ldr	r3, [r7, #0]
 8002bc0:	6859      	ldr	r1, [r3, #4]
 8002bc2:	683b      	ldr	r3, [r7, #0]
 8002bc4:	68db      	ldr	r3, [r3, #12]
 8002bc6:	461a      	mov	r2, r3
 8002bc8:	f000 fa2e 	bl	8003028 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	681b      	ldr	r3, [r3, #0]
 8002bd0:	2150      	movs	r1, #80	; 0x50
 8002bd2:	4618      	mov	r0, r3
 8002bd4:	f000 fa85 	bl	80030e2 <TIM_ITRx_SetConfig>
      break;
 8002bd8:	e02c      	b.n	8002c34 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	6818      	ldr	r0, [r3, #0]
 8002bde:	683b      	ldr	r3, [r7, #0]
 8002be0:	6859      	ldr	r1, [r3, #4]
 8002be2:	683b      	ldr	r3, [r7, #0]
 8002be4:	68db      	ldr	r3, [r3, #12]
 8002be6:	461a      	mov	r2, r3
 8002be8:	f000 fa4c 	bl	8003084 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	681b      	ldr	r3, [r3, #0]
 8002bf0:	2160      	movs	r1, #96	; 0x60
 8002bf2:	4618      	mov	r0, r3
 8002bf4:	f000 fa75 	bl	80030e2 <TIM_ITRx_SetConfig>
      break;
 8002bf8:	e01c      	b.n	8002c34 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	6818      	ldr	r0, [r3, #0]
 8002bfe:	683b      	ldr	r3, [r7, #0]
 8002c00:	6859      	ldr	r1, [r3, #4]
 8002c02:	683b      	ldr	r3, [r7, #0]
 8002c04:	68db      	ldr	r3, [r3, #12]
 8002c06:	461a      	mov	r2, r3
 8002c08:	f000 fa0e 	bl	8003028 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	681b      	ldr	r3, [r3, #0]
 8002c10:	2140      	movs	r1, #64	; 0x40
 8002c12:	4618      	mov	r0, r3
 8002c14:	f000 fa65 	bl	80030e2 <TIM_ITRx_SetConfig>
      break;
 8002c18:	e00c      	b.n	8002c34 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	681a      	ldr	r2, [r3, #0]
 8002c1e:	683b      	ldr	r3, [r7, #0]
 8002c20:	681b      	ldr	r3, [r3, #0]
 8002c22:	4619      	mov	r1, r3
 8002c24:	4610      	mov	r0, r2
 8002c26:	f000 fa5c 	bl	80030e2 <TIM_ITRx_SetConfig>
      break;
 8002c2a:	e003      	b.n	8002c34 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8002c2c:	2301      	movs	r3, #1
 8002c2e:	73fb      	strb	r3, [r7, #15]
      break;
 8002c30:	e000      	b.n	8002c34 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8002c32:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	2201      	movs	r2, #1
 8002c38:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	2200      	movs	r2, #0
 8002c40:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8002c44:	7bfb      	ldrb	r3, [r7, #15]
}
 8002c46:	4618      	mov	r0, r3
 8002c48:	3710      	adds	r7, #16
 8002c4a:	46bd      	mov	sp, r7
 8002c4c:	bd80      	pop	{r7, pc}
	...

08002c50 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8002c50:	b480      	push	{r7}
 8002c52:	b085      	sub	sp, #20
 8002c54:	af00      	add	r7, sp, #0
 8002c56:	6078      	str	r0, [r7, #4]
 8002c58:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	681b      	ldr	r3, [r3, #0]
 8002c5e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	4a2b      	ldr	r2, [pc, #172]	; (8002d10 <TIM_Base_SetConfig+0xc0>)
 8002c64:	4293      	cmp	r3, r2
 8002c66:	d007      	beq.n	8002c78 <TIM_Base_SetConfig+0x28>
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002c6e:	d003      	beq.n	8002c78 <TIM_Base_SetConfig+0x28>
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	4a28      	ldr	r2, [pc, #160]	; (8002d14 <TIM_Base_SetConfig+0xc4>)
 8002c74:	4293      	cmp	r3, r2
 8002c76:	d108      	bne.n	8002c8a <TIM_Base_SetConfig+0x3a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002c78:	68fb      	ldr	r3, [r7, #12]
 8002c7a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002c7e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002c80:	683b      	ldr	r3, [r7, #0]
 8002c82:	685b      	ldr	r3, [r3, #4]
 8002c84:	68fa      	ldr	r2, [r7, #12]
 8002c86:	4313      	orrs	r3, r2
 8002c88:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	4a20      	ldr	r2, [pc, #128]	; (8002d10 <TIM_Base_SetConfig+0xc0>)
 8002c8e:	4293      	cmp	r3, r2
 8002c90:	d007      	beq.n	8002ca2 <TIM_Base_SetConfig+0x52>
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002c98:	d003      	beq.n	8002ca2 <TIM_Base_SetConfig+0x52>
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	4a1d      	ldr	r2, [pc, #116]	; (8002d14 <TIM_Base_SetConfig+0xc4>)
 8002c9e:	4293      	cmp	r3, r2
 8002ca0:	d108      	bne.n	8002cb4 <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002ca2:	68fb      	ldr	r3, [r7, #12]
 8002ca4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002ca8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002caa:	683b      	ldr	r3, [r7, #0]
 8002cac:	68db      	ldr	r3, [r3, #12]
 8002cae:	68fa      	ldr	r2, [r7, #12]
 8002cb0:	4313      	orrs	r3, r2
 8002cb2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002cb4:	68fb      	ldr	r3, [r7, #12]
 8002cb6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002cba:	683b      	ldr	r3, [r7, #0]
 8002cbc:	695b      	ldr	r3, [r3, #20]
 8002cbe:	4313      	orrs	r3, r2
 8002cc0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	68fa      	ldr	r2, [r7, #12]
 8002cc6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002cc8:	683b      	ldr	r3, [r7, #0]
 8002cca:	689a      	ldr	r2, [r3, #8]
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002cd0:	683b      	ldr	r3, [r7, #0]
 8002cd2:	681a      	ldr	r2, [r3, #0]
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	4a0d      	ldr	r2, [pc, #52]	; (8002d10 <TIM_Base_SetConfig+0xc0>)
 8002cdc:	4293      	cmp	r3, r2
 8002cde:	d103      	bne.n	8002ce8 <TIM_Base_SetConfig+0x98>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002ce0:	683b      	ldr	r3, [r7, #0]
 8002ce2:	691a      	ldr	r2, [r3, #16]
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	2201      	movs	r2, #1
 8002cec:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	691b      	ldr	r3, [r3, #16]
 8002cf2:	f003 0301 	and.w	r3, r3, #1
 8002cf6:	2b00      	cmp	r3, #0
 8002cf8:	d005      	beq.n	8002d06 <TIM_Base_SetConfig+0xb6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	691b      	ldr	r3, [r3, #16]
 8002cfe:	f023 0201 	bic.w	r2, r3, #1
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	611a      	str	r2, [r3, #16]
  }
}
 8002d06:	bf00      	nop
 8002d08:	3714      	adds	r7, #20
 8002d0a:	46bd      	mov	sp, r7
 8002d0c:	bc80      	pop	{r7}
 8002d0e:	4770      	bx	lr
 8002d10:	40012c00 	.word	0x40012c00
 8002d14:	40000400 	.word	0x40000400

08002d18 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8002d18:	b480      	push	{r7}
 8002d1a:	b087      	sub	sp, #28
 8002d1c:	af00      	add	r7, sp, #0
 8002d1e:	6078      	str	r0, [r7, #4]
 8002d20:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	6a1b      	ldr	r3, [r3, #32]
 8002d26:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	6a1b      	ldr	r3, [r3, #32]
 8002d2c:	f023 0201 	bic.w	r2, r3, #1
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	685b      	ldr	r3, [r3, #4]
 8002d38:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	699b      	ldr	r3, [r3, #24]
 8002d3e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8002d40:	68fb      	ldr	r3, [r7, #12]
 8002d42:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002d46:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8002d48:	68fb      	ldr	r3, [r7, #12]
 8002d4a:	f023 0303 	bic.w	r3, r3, #3
 8002d4e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002d50:	683b      	ldr	r3, [r7, #0]
 8002d52:	681b      	ldr	r3, [r3, #0]
 8002d54:	68fa      	ldr	r2, [r7, #12]
 8002d56:	4313      	orrs	r3, r2
 8002d58:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8002d5a:	697b      	ldr	r3, [r7, #20]
 8002d5c:	f023 0302 	bic.w	r3, r3, #2
 8002d60:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8002d62:	683b      	ldr	r3, [r7, #0]
 8002d64:	689b      	ldr	r3, [r3, #8]
 8002d66:	697a      	ldr	r2, [r7, #20]
 8002d68:	4313      	orrs	r3, r2
 8002d6a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	4a1c      	ldr	r2, [pc, #112]	; (8002de0 <TIM_OC1_SetConfig+0xc8>)
 8002d70:	4293      	cmp	r3, r2
 8002d72:	d10c      	bne.n	8002d8e <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8002d74:	697b      	ldr	r3, [r7, #20]
 8002d76:	f023 0308 	bic.w	r3, r3, #8
 8002d7a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8002d7c:	683b      	ldr	r3, [r7, #0]
 8002d7e:	68db      	ldr	r3, [r3, #12]
 8002d80:	697a      	ldr	r2, [r7, #20]
 8002d82:	4313      	orrs	r3, r2
 8002d84:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8002d86:	697b      	ldr	r3, [r7, #20]
 8002d88:	f023 0304 	bic.w	r3, r3, #4
 8002d8c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	4a13      	ldr	r2, [pc, #76]	; (8002de0 <TIM_OC1_SetConfig+0xc8>)
 8002d92:	4293      	cmp	r3, r2
 8002d94:	d111      	bne.n	8002dba <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8002d96:	693b      	ldr	r3, [r7, #16]
 8002d98:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002d9c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8002d9e:	693b      	ldr	r3, [r7, #16]
 8002da0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8002da4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8002da6:	683b      	ldr	r3, [r7, #0]
 8002da8:	695b      	ldr	r3, [r3, #20]
 8002daa:	693a      	ldr	r2, [r7, #16]
 8002dac:	4313      	orrs	r3, r2
 8002dae:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8002db0:	683b      	ldr	r3, [r7, #0]
 8002db2:	699b      	ldr	r3, [r3, #24]
 8002db4:	693a      	ldr	r2, [r7, #16]
 8002db6:	4313      	orrs	r3, r2
 8002db8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	693a      	ldr	r2, [r7, #16]
 8002dbe:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	68fa      	ldr	r2, [r7, #12]
 8002dc4:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8002dc6:	683b      	ldr	r3, [r7, #0]
 8002dc8:	685a      	ldr	r2, [r3, #4]
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	697a      	ldr	r2, [r7, #20]
 8002dd2:	621a      	str	r2, [r3, #32]
}
 8002dd4:	bf00      	nop
 8002dd6:	371c      	adds	r7, #28
 8002dd8:	46bd      	mov	sp, r7
 8002dda:	bc80      	pop	{r7}
 8002ddc:	4770      	bx	lr
 8002dde:	bf00      	nop
 8002de0:	40012c00 	.word	0x40012c00

08002de4 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8002de4:	b480      	push	{r7}
 8002de6:	b087      	sub	sp, #28
 8002de8:	af00      	add	r7, sp, #0
 8002dea:	6078      	str	r0, [r7, #4]
 8002dec:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	6a1b      	ldr	r3, [r3, #32]
 8002df2:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	6a1b      	ldr	r3, [r3, #32]
 8002df8:	f023 0210 	bic.w	r2, r3, #16
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	685b      	ldr	r3, [r3, #4]
 8002e04:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	699b      	ldr	r3, [r3, #24]
 8002e0a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8002e0c:	68fb      	ldr	r3, [r7, #12]
 8002e0e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002e12:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8002e14:	68fb      	ldr	r3, [r7, #12]
 8002e16:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002e1a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002e1c:	683b      	ldr	r3, [r7, #0]
 8002e1e:	681b      	ldr	r3, [r3, #0]
 8002e20:	021b      	lsls	r3, r3, #8
 8002e22:	68fa      	ldr	r2, [r7, #12]
 8002e24:	4313      	orrs	r3, r2
 8002e26:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8002e28:	697b      	ldr	r3, [r7, #20]
 8002e2a:	f023 0320 	bic.w	r3, r3, #32
 8002e2e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8002e30:	683b      	ldr	r3, [r7, #0]
 8002e32:	689b      	ldr	r3, [r3, #8]
 8002e34:	011b      	lsls	r3, r3, #4
 8002e36:	697a      	ldr	r2, [r7, #20]
 8002e38:	4313      	orrs	r3, r2
 8002e3a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	4a1d      	ldr	r2, [pc, #116]	; (8002eb4 <TIM_OC2_SetConfig+0xd0>)
 8002e40:	4293      	cmp	r3, r2
 8002e42:	d10d      	bne.n	8002e60 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8002e44:	697b      	ldr	r3, [r7, #20]
 8002e46:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002e4a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8002e4c:	683b      	ldr	r3, [r7, #0]
 8002e4e:	68db      	ldr	r3, [r3, #12]
 8002e50:	011b      	lsls	r3, r3, #4
 8002e52:	697a      	ldr	r2, [r7, #20]
 8002e54:	4313      	orrs	r3, r2
 8002e56:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8002e58:	697b      	ldr	r3, [r7, #20]
 8002e5a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002e5e:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	4a14      	ldr	r2, [pc, #80]	; (8002eb4 <TIM_OC2_SetConfig+0xd0>)
 8002e64:	4293      	cmp	r3, r2
 8002e66:	d113      	bne.n	8002e90 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8002e68:	693b      	ldr	r3, [r7, #16]
 8002e6a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8002e6e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8002e70:	693b      	ldr	r3, [r7, #16]
 8002e72:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8002e76:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8002e78:	683b      	ldr	r3, [r7, #0]
 8002e7a:	695b      	ldr	r3, [r3, #20]
 8002e7c:	009b      	lsls	r3, r3, #2
 8002e7e:	693a      	ldr	r2, [r7, #16]
 8002e80:	4313      	orrs	r3, r2
 8002e82:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8002e84:	683b      	ldr	r3, [r7, #0]
 8002e86:	699b      	ldr	r3, [r3, #24]
 8002e88:	009b      	lsls	r3, r3, #2
 8002e8a:	693a      	ldr	r2, [r7, #16]
 8002e8c:	4313      	orrs	r3, r2
 8002e8e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	693a      	ldr	r2, [r7, #16]
 8002e94:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	68fa      	ldr	r2, [r7, #12]
 8002e9a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8002e9c:	683b      	ldr	r3, [r7, #0]
 8002e9e:	685a      	ldr	r2, [r3, #4]
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	697a      	ldr	r2, [r7, #20]
 8002ea8:	621a      	str	r2, [r3, #32]
}
 8002eaa:	bf00      	nop
 8002eac:	371c      	adds	r7, #28
 8002eae:	46bd      	mov	sp, r7
 8002eb0:	bc80      	pop	{r7}
 8002eb2:	4770      	bx	lr
 8002eb4:	40012c00 	.word	0x40012c00

08002eb8 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8002eb8:	b480      	push	{r7}
 8002eba:	b087      	sub	sp, #28
 8002ebc:	af00      	add	r7, sp, #0
 8002ebe:	6078      	str	r0, [r7, #4]
 8002ec0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	6a1b      	ldr	r3, [r3, #32]
 8002ec6:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	6a1b      	ldr	r3, [r3, #32]
 8002ecc:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	685b      	ldr	r3, [r3, #4]
 8002ed8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	69db      	ldr	r3, [r3, #28]
 8002ede:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8002ee0:	68fb      	ldr	r3, [r7, #12]
 8002ee2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002ee6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8002ee8:	68fb      	ldr	r3, [r7, #12]
 8002eea:	f023 0303 	bic.w	r3, r3, #3
 8002eee:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002ef0:	683b      	ldr	r3, [r7, #0]
 8002ef2:	681b      	ldr	r3, [r3, #0]
 8002ef4:	68fa      	ldr	r2, [r7, #12]
 8002ef6:	4313      	orrs	r3, r2
 8002ef8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8002efa:	697b      	ldr	r3, [r7, #20]
 8002efc:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8002f00:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8002f02:	683b      	ldr	r3, [r7, #0]
 8002f04:	689b      	ldr	r3, [r3, #8]
 8002f06:	021b      	lsls	r3, r3, #8
 8002f08:	697a      	ldr	r2, [r7, #20]
 8002f0a:	4313      	orrs	r3, r2
 8002f0c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	4a1d      	ldr	r2, [pc, #116]	; (8002f88 <TIM_OC3_SetConfig+0xd0>)
 8002f12:	4293      	cmp	r3, r2
 8002f14:	d10d      	bne.n	8002f32 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8002f16:	697b      	ldr	r3, [r7, #20]
 8002f18:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8002f1c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8002f1e:	683b      	ldr	r3, [r7, #0]
 8002f20:	68db      	ldr	r3, [r3, #12]
 8002f22:	021b      	lsls	r3, r3, #8
 8002f24:	697a      	ldr	r2, [r7, #20]
 8002f26:	4313      	orrs	r3, r2
 8002f28:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8002f2a:	697b      	ldr	r3, [r7, #20]
 8002f2c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8002f30:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	4a14      	ldr	r2, [pc, #80]	; (8002f88 <TIM_OC3_SetConfig+0xd0>)
 8002f36:	4293      	cmp	r3, r2
 8002f38:	d113      	bne.n	8002f62 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8002f3a:	693b      	ldr	r3, [r7, #16]
 8002f3c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8002f40:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8002f42:	693b      	ldr	r3, [r7, #16]
 8002f44:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8002f48:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8002f4a:	683b      	ldr	r3, [r7, #0]
 8002f4c:	695b      	ldr	r3, [r3, #20]
 8002f4e:	011b      	lsls	r3, r3, #4
 8002f50:	693a      	ldr	r2, [r7, #16]
 8002f52:	4313      	orrs	r3, r2
 8002f54:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8002f56:	683b      	ldr	r3, [r7, #0]
 8002f58:	699b      	ldr	r3, [r3, #24]
 8002f5a:	011b      	lsls	r3, r3, #4
 8002f5c:	693a      	ldr	r2, [r7, #16]
 8002f5e:	4313      	orrs	r3, r2
 8002f60:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	693a      	ldr	r2, [r7, #16]
 8002f66:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	68fa      	ldr	r2, [r7, #12]
 8002f6c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8002f6e:	683b      	ldr	r3, [r7, #0]
 8002f70:	685a      	ldr	r2, [r3, #4]
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	697a      	ldr	r2, [r7, #20]
 8002f7a:	621a      	str	r2, [r3, #32]
}
 8002f7c:	bf00      	nop
 8002f7e:	371c      	adds	r7, #28
 8002f80:	46bd      	mov	sp, r7
 8002f82:	bc80      	pop	{r7}
 8002f84:	4770      	bx	lr
 8002f86:	bf00      	nop
 8002f88:	40012c00 	.word	0x40012c00

08002f8c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8002f8c:	b480      	push	{r7}
 8002f8e:	b087      	sub	sp, #28
 8002f90:	af00      	add	r7, sp, #0
 8002f92:	6078      	str	r0, [r7, #4]
 8002f94:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	6a1b      	ldr	r3, [r3, #32]
 8002f9a:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	6a1b      	ldr	r3, [r3, #32]
 8002fa0:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	685b      	ldr	r3, [r3, #4]
 8002fac:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	69db      	ldr	r3, [r3, #28]
 8002fb2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8002fb4:	68fb      	ldr	r3, [r7, #12]
 8002fb6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002fba:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8002fbc:	68fb      	ldr	r3, [r7, #12]
 8002fbe:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002fc2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002fc4:	683b      	ldr	r3, [r7, #0]
 8002fc6:	681b      	ldr	r3, [r3, #0]
 8002fc8:	021b      	lsls	r3, r3, #8
 8002fca:	68fa      	ldr	r2, [r7, #12]
 8002fcc:	4313      	orrs	r3, r2
 8002fce:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8002fd0:	693b      	ldr	r3, [r7, #16]
 8002fd2:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8002fd6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8002fd8:	683b      	ldr	r3, [r7, #0]
 8002fda:	689b      	ldr	r3, [r3, #8]
 8002fdc:	031b      	lsls	r3, r3, #12
 8002fde:	693a      	ldr	r2, [r7, #16]
 8002fe0:	4313      	orrs	r3, r2
 8002fe2:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	4a0f      	ldr	r2, [pc, #60]	; (8003024 <TIM_OC4_SetConfig+0x98>)
 8002fe8:	4293      	cmp	r3, r2
 8002fea:	d109      	bne.n	8003000 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8002fec:	697b      	ldr	r3, [r7, #20]
 8002fee:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002ff2:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8002ff4:	683b      	ldr	r3, [r7, #0]
 8002ff6:	695b      	ldr	r3, [r3, #20]
 8002ff8:	019b      	lsls	r3, r3, #6
 8002ffa:	697a      	ldr	r2, [r7, #20]
 8002ffc:	4313      	orrs	r3, r2
 8002ffe:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	697a      	ldr	r2, [r7, #20]
 8003004:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	68fa      	ldr	r2, [r7, #12]
 800300a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800300c:	683b      	ldr	r3, [r7, #0]
 800300e:	685a      	ldr	r2, [r3, #4]
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	693a      	ldr	r2, [r7, #16]
 8003018:	621a      	str	r2, [r3, #32]
}
 800301a:	bf00      	nop
 800301c:	371c      	adds	r7, #28
 800301e:	46bd      	mov	sp, r7
 8003020:	bc80      	pop	{r7}
 8003022:	4770      	bx	lr
 8003024:	40012c00 	.word	0x40012c00

08003028 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003028:	b480      	push	{r7}
 800302a:	b087      	sub	sp, #28
 800302c:	af00      	add	r7, sp, #0
 800302e:	60f8      	str	r0, [r7, #12]
 8003030:	60b9      	str	r1, [r7, #8]
 8003032:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003034:	68fb      	ldr	r3, [r7, #12]
 8003036:	6a1b      	ldr	r3, [r3, #32]
 8003038:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800303a:	68fb      	ldr	r3, [r7, #12]
 800303c:	6a1b      	ldr	r3, [r3, #32]
 800303e:	f023 0201 	bic.w	r2, r3, #1
 8003042:	68fb      	ldr	r3, [r7, #12]
 8003044:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003046:	68fb      	ldr	r3, [r7, #12]
 8003048:	699b      	ldr	r3, [r3, #24]
 800304a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800304c:	693b      	ldr	r3, [r7, #16]
 800304e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003052:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	011b      	lsls	r3, r3, #4
 8003058:	693a      	ldr	r2, [r7, #16]
 800305a:	4313      	orrs	r3, r2
 800305c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800305e:	697b      	ldr	r3, [r7, #20]
 8003060:	f023 030a 	bic.w	r3, r3, #10
 8003064:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8003066:	697a      	ldr	r2, [r7, #20]
 8003068:	68bb      	ldr	r3, [r7, #8]
 800306a:	4313      	orrs	r3, r2
 800306c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800306e:	68fb      	ldr	r3, [r7, #12]
 8003070:	693a      	ldr	r2, [r7, #16]
 8003072:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003074:	68fb      	ldr	r3, [r7, #12]
 8003076:	697a      	ldr	r2, [r7, #20]
 8003078:	621a      	str	r2, [r3, #32]
}
 800307a:	bf00      	nop
 800307c:	371c      	adds	r7, #28
 800307e:	46bd      	mov	sp, r7
 8003080:	bc80      	pop	{r7}
 8003082:	4770      	bx	lr

08003084 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003084:	b480      	push	{r7}
 8003086:	b087      	sub	sp, #28
 8003088:	af00      	add	r7, sp, #0
 800308a:	60f8      	str	r0, [r7, #12]
 800308c:	60b9      	str	r1, [r7, #8]
 800308e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8003090:	68fb      	ldr	r3, [r7, #12]
 8003092:	6a1b      	ldr	r3, [r3, #32]
 8003094:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003096:	68fb      	ldr	r3, [r7, #12]
 8003098:	6a1b      	ldr	r3, [r3, #32]
 800309a:	f023 0210 	bic.w	r2, r3, #16
 800309e:	68fb      	ldr	r3, [r7, #12]
 80030a0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80030a2:	68fb      	ldr	r3, [r7, #12]
 80030a4:	699b      	ldr	r3, [r3, #24]
 80030a6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80030a8:	693b      	ldr	r3, [r7, #16]
 80030aa:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80030ae:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	031b      	lsls	r3, r3, #12
 80030b4:	693a      	ldr	r2, [r7, #16]
 80030b6:	4313      	orrs	r3, r2
 80030b8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80030ba:	697b      	ldr	r3, [r7, #20]
 80030bc:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80030c0:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 80030c2:	68bb      	ldr	r3, [r7, #8]
 80030c4:	011b      	lsls	r3, r3, #4
 80030c6:	697a      	ldr	r2, [r7, #20]
 80030c8:	4313      	orrs	r3, r2
 80030ca:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80030cc:	68fb      	ldr	r3, [r7, #12]
 80030ce:	693a      	ldr	r2, [r7, #16]
 80030d0:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80030d2:	68fb      	ldr	r3, [r7, #12]
 80030d4:	697a      	ldr	r2, [r7, #20]
 80030d6:	621a      	str	r2, [r3, #32]
}
 80030d8:	bf00      	nop
 80030da:	371c      	adds	r7, #28
 80030dc:	46bd      	mov	sp, r7
 80030de:	bc80      	pop	{r7}
 80030e0:	4770      	bx	lr

080030e2 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80030e2:	b480      	push	{r7}
 80030e4:	b085      	sub	sp, #20
 80030e6:	af00      	add	r7, sp, #0
 80030e8:	6078      	str	r0, [r7, #4]
 80030ea:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	689b      	ldr	r3, [r3, #8]
 80030f0:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80030f2:	68fb      	ldr	r3, [r7, #12]
 80030f4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80030f8:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80030fa:	683a      	ldr	r2, [r7, #0]
 80030fc:	68fb      	ldr	r3, [r7, #12]
 80030fe:	4313      	orrs	r3, r2
 8003100:	f043 0307 	orr.w	r3, r3, #7
 8003104:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	68fa      	ldr	r2, [r7, #12]
 800310a:	609a      	str	r2, [r3, #8]
}
 800310c:	bf00      	nop
 800310e:	3714      	adds	r7, #20
 8003110:	46bd      	mov	sp, r7
 8003112:	bc80      	pop	{r7}
 8003114:	4770      	bx	lr

08003116 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003116:	b480      	push	{r7}
 8003118:	b087      	sub	sp, #28
 800311a:	af00      	add	r7, sp, #0
 800311c:	60f8      	str	r0, [r7, #12]
 800311e:	60b9      	str	r1, [r7, #8]
 8003120:	607a      	str	r2, [r7, #4]
 8003122:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8003124:	68fb      	ldr	r3, [r7, #12]
 8003126:	689b      	ldr	r3, [r3, #8]
 8003128:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800312a:	697b      	ldr	r3, [r7, #20]
 800312c:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003130:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003132:	683b      	ldr	r3, [r7, #0]
 8003134:	021a      	lsls	r2, r3, #8
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	431a      	orrs	r2, r3
 800313a:	68bb      	ldr	r3, [r7, #8]
 800313c:	4313      	orrs	r3, r2
 800313e:	697a      	ldr	r2, [r7, #20]
 8003140:	4313      	orrs	r3, r2
 8003142:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003144:	68fb      	ldr	r3, [r7, #12]
 8003146:	697a      	ldr	r2, [r7, #20]
 8003148:	609a      	str	r2, [r3, #8]
}
 800314a:	bf00      	nop
 800314c:	371c      	adds	r7, #28
 800314e:	46bd      	mov	sp, r7
 8003150:	bc80      	pop	{r7}
 8003152:	4770      	bx	lr

08003154 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8003154:	b480      	push	{r7}
 8003156:	b087      	sub	sp, #28
 8003158:	af00      	add	r7, sp, #0
 800315a:	60f8      	str	r0, [r7, #12]
 800315c:	60b9      	str	r1, [r7, #8]
 800315e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8003160:	68bb      	ldr	r3, [r7, #8]
 8003162:	f003 031f 	and.w	r3, r3, #31
 8003166:	2201      	movs	r2, #1
 8003168:	fa02 f303 	lsl.w	r3, r2, r3
 800316c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800316e:	68fb      	ldr	r3, [r7, #12]
 8003170:	6a1a      	ldr	r2, [r3, #32]
 8003172:	697b      	ldr	r3, [r7, #20]
 8003174:	43db      	mvns	r3, r3
 8003176:	401a      	ands	r2, r3
 8003178:	68fb      	ldr	r3, [r7, #12]
 800317a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800317c:	68fb      	ldr	r3, [r7, #12]
 800317e:	6a1a      	ldr	r2, [r3, #32]
 8003180:	68bb      	ldr	r3, [r7, #8]
 8003182:	f003 031f 	and.w	r3, r3, #31
 8003186:	6879      	ldr	r1, [r7, #4]
 8003188:	fa01 f303 	lsl.w	r3, r1, r3
 800318c:	431a      	orrs	r2, r3
 800318e:	68fb      	ldr	r3, [r7, #12]
 8003190:	621a      	str	r2, [r3, #32]
}
 8003192:	bf00      	nop
 8003194:	371c      	adds	r7, #28
 8003196:	46bd      	mov	sp, r7
 8003198:	bc80      	pop	{r7}
 800319a:	4770      	bx	lr

0800319c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800319c:	b480      	push	{r7}
 800319e:	b085      	sub	sp, #20
 80031a0:	af00      	add	r7, sp, #0
 80031a2:	6078      	str	r0, [r7, #4]
 80031a4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80031ac:	2b01      	cmp	r3, #1
 80031ae:	d101      	bne.n	80031b4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80031b0:	2302      	movs	r3, #2
 80031b2:	e041      	b.n	8003238 <HAL_TIMEx_MasterConfigSynchronization+0x9c>
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	2201      	movs	r2, #1
 80031b8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	2202      	movs	r2, #2
 80031c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	681b      	ldr	r3, [r3, #0]
 80031c8:	685b      	ldr	r3, [r3, #4]
 80031ca:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	681b      	ldr	r3, [r3, #0]
 80031d0:	689b      	ldr	r3, [r3, #8]
 80031d2:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80031d4:	68fb      	ldr	r3, [r7, #12]
 80031d6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80031da:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80031dc:	683b      	ldr	r3, [r7, #0]
 80031de:	681b      	ldr	r3, [r3, #0]
 80031e0:	68fa      	ldr	r2, [r7, #12]
 80031e2:	4313      	orrs	r3, r2
 80031e4:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	681b      	ldr	r3, [r3, #0]
 80031ea:	68fa      	ldr	r2, [r7, #12]
 80031ec:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	681b      	ldr	r3, [r3, #0]
 80031f2:	4a14      	ldr	r2, [pc, #80]	; (8003244 <HAL_TIMEx_MasterConfigSynchronization+0xa8>)
 80031f4:	4293      	cmp	r3, r2
 80031f6:	d009      	beq.n	800320c <HAL_TIMEx_MasterConfigSynchronization+0x70>
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	681b      	ldr	r3, [r3, #0]
 80031fc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003200:	d004      	beq.n	800320c <HAL_TIMEx_MasterConfigSynchronization+0x70>
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	681b      	ldr	r3, [r3, #0]
 8003206:	4a10      	ldr	r2, [pc, #64]	; (8003248 <HAL_TIMEx_MasterConfigSynchronization+0xac>)
 8003208:	4293      	cmp	r3, r2
 800320a:	d10c      	bne.n	8003226 <HAL_TIMEx_MasterConfigSynchronization+0x8a>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800320c:	68bb      	ldr	r3, [r7, #8]
 800320e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003212:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003214:	683b      	ldr	r3, [r7, #0]
 8003216:	685b      	ldr	r3, [r3, #4]
 8003218:	68ba      	ldr	r2, [r7, #8]
 800321a:	4313      	orrs	r3, r2
 800321c:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	681b      	ldr	r3, [r3, #0]
 8003222:	68ba      	ldr	r2, [r7, #8]
 8003224:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	2201      	movs	r2, #1
 800322a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	2200      	movs	r2, #0
 8003232:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003236:	2300      	movs	r3, #0
}
 8003238:	4618      	mov	r0, r3
 800323a:	3714      	adds	r7, #20
 800323c:	46bd      	mov	sp, r7
 800323e:	bc80      	pop	{r7}
 8003240:	4770      	bx	lr
 8003242:	bf00      	nop
 8003244:	40012c00 	.word	0x40012c00
 8003248:	40000400 	.word	0x40000400

0800324c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800324c:	b580      	push	{r7, lr}
 800324e:	b082      	sub	sp, #8
 8003250:	af00      	add	r7, sp, #0
 8003252:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	2b00      	cmp	r3, #0
 8003258:	d101      	bne.n	800325e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800325a:	2301      	movs	r3, #1
 800325c:	e042      	b.n	80032e4 <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003264:	b2db      	uxtb	r3, r3
 8003266:	2b00      	cmp	r3, #0
 8003268:	d106      	bne.n	8003278 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	2200      	movs	r2, #0
 800326e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003272:	6878      	ldr	r0, [r7, #4]
 8003274:	f7fe f86a 	bl	800134c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	2224      	movs	r2, #36	; 0x24
 800327c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	681b      	ldr	r3, [r3, #0]
 8003284:	68da      	ldr	r2, [r3, #12]
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	681b      	ldr	r3, [r3, #0]
 800328a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800328e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003290:	6878      	ldr	r0, [r7, #4]
 8003292:	f000 f82b 	bl	80032ec <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	681b      	ldr	r3, [r3, #0]
 800329a:	691a      	ldr	r2, [r3, #16]
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	681b      	ldr	r3, [r3, #0]
 80032a0:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80032a4:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	681b      	ldr	r3, [r3, #0]
 80032aa:	695a      	ldr	r2, [r3, #20]
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	681b      	ldr	r3, [r3, #0]
 80032b0:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80032b4:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	681b      	ldr	r3, [r3, #0]
 80032ba:	68da      	ldr	r2, [r3, #12]
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	681b      	ldr	r3, [r3, #0]
 80032c0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80032c4:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	2200      	movs	r2, #0
 80032ca:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	2220      	movs	r2, #32
 80032d0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	2220      	movs	r2, #32
 80032d8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	2200      	movs	r2, #0
 80032e0:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 80032e2:	2300      	movs	r3, #0
}
 80032e4:	4618      	mov	r0, r3
 80032e6:	3708      	adds	r7, #8
 80032e8:	46bd      	mov	sp, r7
 80032ea:	bd80      	pop	{r7, pc}

080032ec <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80032ec:	b580      	push	{r7, lr}
 80032ee:	b084      	sub	sp, #16
 80032f0:	af00      	add	r7, sp, #0
 80032f2:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	681b      	ldr	r3, [r3, #0]
 80032f8:	691b      	ldr	r3, [r3, #16]
 80032fa:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	68da      	ldr	r2, [r3, #12]
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	681b      	ldr	r3, [r3, #0]
 8003306:	430a      	orrs	r2, r1
 8003308:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	689a      	ldr	r2, [r3, #8]
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	691b      	ldr	r3, [r3, #16]
 8003312:	431a      	orrs	r2, r3
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	695b      	ldr	r3, [r3, #20]
 8003318:	4313      	orrs	r3, r2
 800331a:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	681b      	ldr	r3, [r3, #0]
 8003320:	68db      	ldr	r3, [r3, #12]
 8003322:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8003326:	f023 030c 	bic.w	r3, r3, #12
 800332a:	687a      	ldr	r2, [r7, #4]
 800332c:	6812      	ldr	r2, [r2, #0]
 800332e:	68b9      	ldr	r1, [r7, #8]
 8003330:	430b      	orrs	r3, r1
 8003332:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	681b      	ldr	r3, [r3, #0]
 8003338:	695b      	ldr	r3, [r3, #20]
 800333a:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	699a      	ldr	r2, [r3, #24]
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	681b      	ldr	r3, [r3, #0]
 8003346:	430a      	orrs	r2, r1
 8003348:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	681b      	ldr	r3, [r3, #0]
 800334e:	4a2c      	ldr	r2, [pc, #176]	; (8003400 <UART_SetConfig+0x114>)
 8003350:	4293      	cmp	r3, r2
 8003352:	d103      	bne.n	800335c <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8003354:	f7ff f97c 	bl	8002650 <HAL_RCC_GetPCLK2Freq>
 8003358:	60f8      	str	r0, [r7, #12]
 800335a:	e002      	b.n	8003362 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 800335c:	f7ff f964 	bl	8002628 <HAL_RCC_GetPCLK1Freq>
 8003360:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003362:	68fa      	ldr	r2, [r7, #12]
 8003364:	4613      	mov	r3, r2
 8003366:	009b      	lsls	r3, r3, #2
 8003368:	4413      	add	r3, r2
 800336a:	009a      	lsls	r2, r3, #2
 800336c:	441a      	add	r2, r3
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	685b      	ldr	r3, [r3, #4]
 8003372:	009b      	lsls	r3, r3, #2
 8003374:	fbb2 f3f3 	udiv	r3, r2, r3
 8003378:	4a22      	ldr	r2, [pc, #136]	; (8003404 <UART_SetConfig+0x118>)
 800337a:	fba2 2303 	umull	r2, r3, r2, r3
 800337e:	095b      	lsrs	r3, r3, #5
 8003380:	0119      	lsls	r1, r3, #4
 8003382:	68fa      	ldr	r2, [r7, #12]
 8003384:	4613      	mov	r3, r2
 8003386:	009b      	lsls	r3, r3, #2
 8003388:	4413      	add	r3, r2
 800338a:	009a      	lsls	r2, r3, #2
 800338c:	441a      	add	r2, r3
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	685b      	ldr	r3, [r3, #4]
 8003392:	009b      	lsls	r3, r3, #2
 8003394:	fbb2 f2f3 	udiv	r2, r2, r3
 8003398:	4b1a      	ldr	r3, [pc, #104]	; (8003404 <UART_SetConfig+0x118>)
 800339a:	fba3 0302 	umull	r0, r3, r3, r2
 800339e:	095b      	lsrs	r3, r3, #5
 80033a0:	2064      	movs	r0, #100	; 0x64
 80033a2:	fb00 f303 	mul.w	r3, r0, r3
 80033a6:	1ad3      	subs	r3, r2, r3
 80033a8:	011b      	lsls	r3, r3, #4
 80033aa:	3332      	adds	r3, #50	; 0x32
 80033ac:	4a15      	ldr	r2, [pc, #84]	; (8003404 <UART_SetConfig+0x118>)
 80033ae:	fba2 2303 	umull	r2, r3, r2, r3
 80033b2:	095b      	lsrs	r3, r3, #5
 80033b4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80033b8:	4419      	add	r1, r3
 80033ba:	68fa      	ldr	r2, [r7, #12]
 80033bc:	4613      	mov	r3, r2
 80033be:	009b      	lsls	r3, r3, #2
 80033c0:	4413      	add	r3, r2
 80033c2:	009a      	lsls	r2, r3, #2
 80033c4:	441a      	add	r2, r3
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	685b      	ldr	r3, [r3, #4]
 80033ca:	009b      	lsls	r3, r3, #2
 80033cc:	fbb2 f2f3 	udiv	r2, r2, r3
 80033d0:	4b0c      	ldr	r3, [pc, #48]	; (8003404 <UART_SetConfig+0x118>)
 80033d2:	fba3 0302 	umull	r0, r3, r3, r2
 80033d6:	095b      	lsrs	r3, r3, #5
 80033d8:	2064      	movs	r0, #100	; 0x64
 80033da:	fb00 f303 	mul.w	r3, r0, r3
 80033de:	1ad3      	subs	r3, r2, r3
 80033e0:	011b      	lsls	r3, r3, #4
 80033e2:	3332      	adds	r3, #50	; 0x32
 80033e4:	4a07      	ldr	r2, [pc, #28]	; (8003404 <UART_SetConfig+0x118>)
 80033e6:	fba2 2303 	umull	r2, r3, r2, r3
 80033ea:	095b      	lsrs	r3, r3, #5
 80033ec:	f003 020f 	and.w	r2, r3, #15
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	681b      	ldr	r3, [r3, #0]
 80033f4:	440a      	add	r2, r1
 80033f6:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 80033f8:	bf00      	nop
 80033fa:	3710      	adds	r7, #16
 80033fc:	46bd      	mov	sp, r7
 80033fe:	bd80      	pop	{r7, pc}
 8003400:	40013800 	.word	0x40013800
 8003404:	51eb851f 	.word	0x51eb851f

08003408 <__errno>:
 8003408:	4b01      	ldr	r3, [pc, #4]	; (8003410 <__errno+0x8>)
 800340a:	6818      	ldr	r0, [r3, #0]
 800340c:	4770      	bx	lr
 800340e:	bf00      	nop
 8003410:	2000000c 	.word	0x2000000c

08003414 <__libc_init_array>:
 8003414:	b570      	push	{r4, r5, r6, lr}
 8003416:	2600      	movs	r6, #0
 8003418:	4d0c      	ldr	r5, [pc, #48]	; (800344c <__libc_init_array+0x38>)
 800341a:	4c0d      	ldr	r4, [pc, #52]	; (8003450 <__libc_init_array+0x3c>)
 800341c:	1b64      	subs	r4, r4, r5
 800341e:	10a4      	asrs	r4, r4, #2
 8003420:	42a6      	cmp	r6, r4
 8003422:	d109      	bne.n	8003438 <__libc_init_array+0x24>
 8003424:	f000 fcaa 	bl	8003d7c <_init>
 8003428:	2600      	movs	r6, #0
 800342a:	4d0a      	ldr	r5, [pc, #40]	; (8003454 <__libc_init_array+0x40>)
 800342c:	4c0a      	ldr	r4, [pc, #40]	; (8003458 <__libc_init_array+0x44>)
 800342e:	1b64      	subs	r4, r4, r5
 8003430:	10a4      	asrs	r4, r4, #2
 8003432:	42a6      	cmp	r6, r4
 8003434:	d105      	bne.n	8003442 <__libc_init_array+0x2e>
 8003436:	bd70      	pop	{r4, r5, r6, pc}
 8003438:	f855 3b04 	ldr.w	r3, [r5], #4
 800343c:	4798      	blx	r3
 800343e:	3601      	adds	r6, #1
 8003440:	e7ee      	b.n	8003420 <__libc_init_array+0xc>
 8003442:	f855 3b04 	ldr.w	r3, [r5], #4
 8003446:	4798      	blx	r3
 8003448:	3601      	adds	r6, #1
 800344a:	e7f2      	b.n	8003432 <__libc_init_array+0x1e>
 800344c:	08003ea4 	.word	0x08003ea4
 8003450:	08003ea4 	.word	0x08003ea4
 8003454:	08003ea4 	.word	0x08003ea4
 8003458:	08003ea8 	.word	0x08003ea8

0800345c <memset>:
 800345c:	4603      	mov	r3, r0
 800345e:	4402      	add	r2, r0
 8003460:	4293      	cmp	r3, r2
 8003462:	d100      	bne.n	8003466 <memset+0xa>
 8003464:	4770      	bx	lr
 8003466:	f803 1b01 	strb.w	r1, [r3], #1
 800346a:	e7f9      	b.n	8003460 <memset+0x4>

0800346c <siprintf>:
 800346c:	b40e      	push	{r1, r2, r3}
 800346e:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8003472:	b500      	push	{lr}
 8003474:	b09c      	sub	sp, #112	; 0x70
 8003476:	ab1d      	add	r3, sp, #116	; 0x74
 8003478:	9002      	str	r0, [sp, #8]
 800347a:	9006      	str	r0, [sp, #24]
 800347c:	9107      	str	r1, [sp, #28]
 800347e:	9104      	str	r1, [sp, #16]
 8003480:	4808      	ldr	r0, [pc, #32]	; (80034a4 <siprintf+0x38>)
 8003482:	4909      	ldr	r1, [pc, #36]	; (80034a8 <siprintf+0x3c>)
 8003484:	f853 2b04 	ldr.w	r2, [r3], #4
 8003488:	9105      	str	r1, [sp, #20]
 800348a:	6800      	ldr	r0, [r0, #0]
 800348c:	a902      	add	r1, sp, #8
 800348e:	9301      	str	r3, [sp, #4]
 8003490:	f000 f876 	bl	8003580 <_svfiprintf_r>
 8003494:	2200      	movs	r2, #0
 8003496:	9b02      	ldr	r3, [sp, #8]
 8003498:	701a      	strb	r2, [r3, #0]
 800349a:	b01c      	add	sp, #112	; 0x70
 800349c:	f85d eb04 	ldr.w	lr, [sp], #4
 80034a0:	b003      	add	sp, #12
 80034a2:	4770      	bx	lr
 80034a4:	2000000c 	.word	0x2000000c
 80034a8:	ffff0208 	.word	0xffff0208

080034ac <strcat>:
 80034ac:	4602      	mov	r2, r0
 80034ae:	b510      	push	{r4, lr}
 80034b0:	7814      	ldrb	r4, [r2, #0]
 80034b2:	4613      	mov	r3, r2
 80034b4:	3201      	adds	r2, #1
 80034b6:	2c00      	cmp	r4, #0
 80034b8:	d1fa      	bne.n	80034b0 <strcat+0x4>
 80034ba:	3b01      	subs	r3, #1
 80034bc:	f811 2b01 	ldrb.w	r2, [r1], #1
 80034c0:	f803 2f01 	strb.w	r2, [r3, #1]!
 80034c4:	2a00      	cmp	r2, #0
 80034c6:	d1f9      	bne.n	80034bc <strcat+0x10>
 80034c8:	bd10      	pop	{r4, pc}

080034ca <__ssputs_r>:
 80034ca:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80034ce:	688e      	ldr	r6, [r1, #8]
 80034d0:	4682      	mov	sl, r0
 80034d2:	429e      	cmp	r6, r3
 80034d4:	460c      	mov	r4, r1
 80034d6:	4690      	mov	r8, r2
 80034d8:	461f      	mov	r7, r3
 80034da:	d838      	bhi.n	800354e <__ssputs_r+0x84>
 80034dc:	898a      	ldrh	r2, [r1, #12]
 80034de:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80034e2:	d032      	beq.n	800354a <__ssputs_r+0x80>
 80034e4:	6825      	ldr	r5, [r4, #0]
 80034e6:	6909      	ldr	r1, [r1, #16]
 80034e8:	3301      	adds	r3, #1
 80034ea:	eba5 0901 	sub.w	r9, r5, r1
 80034ee:	6965      	ldr	r5, [r4, #20]
 80034f0:	444b      	add	r3, r9
 80034f2:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80034f6:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80034fa:	106d      	asrs	r5, r5, #1
 80034fc:	429d      	cmp	r5, r3
 80034fe:	bf38      	it	cc
 8003500:	461d      	movcc	r5, r3
 8003502:	0553      	lsls	r3, r2, #21
 8003504:	d531      	bpl.n	800356a <__ssputs_r+0xa0>
 8003506:	4629      	mov	r1, r5
 8003508:	f000 fb6e 	bl	8003be8 <_malloc_r>
 800350c:	4606      	mov	r6, r0
 800350e:	b950      	cbnz	r0, 8003526 <__ssputs_r+0x5c>
 8003510:	230c      	movs	r3, #12
 8003512:	f04f 30ff 	mov.w	r0, #4294967295
 8003516:	f8ca 3000 	str.w	r3, [sl]
 800351a:	89a3      	ldrh	r3, [r4, #12]
 800351c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003520:	81a3      	strh	r3, [r4, #12]
 8003522:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003526:	464a      	mov	r2, r9
 8003528:	6921      	ldr	r1, [r4, #16]
 800352a:	f000 facd 	bl	8003ac8 <memcpy>
 800352e:	89a3      	ldrh	r3, [r4, #12]
 8003530:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8003534:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003538:	81a3      	strh	r3, [r4, #12]
 800353a:	6126      	str	r6, [r4, #16]
 800353c:	444e      	add	r6, r9
 800353e:	6026      	str	r6, [r4, #0]
 8003540:	463e      	mov	r6, r7
 8003542:	6165      	str	r5, [r4, #20]
 8003544:	eba5 0509 	sub.w	r5, r5, r9
 8003548:	60a5      	str	r5, [r4, #8]
 800354a:	42be      	cmp	r6, r7
 800354c:	d900      	bls.n	8003550 <__ssputs_r+0x86>
 800354e:	463e      	mov	r6, r7
 8003550:	4632      	mov	r2, r6
 8003552:	4641      	mov	r1, r8
 8003554:	6820      	ldr	r0, [r4, #0]
 8003556:	f000 fac5 	bl	8003ae4 <memmove>
 800355a:	68a3      	ldr	r3, [r4, #8]
 800355c:	2000      	movs	r0, #0
 800355e:	1b9b      	subs	r3, r3, r6
 8003560:	60a3      	str	r3, [r4, #8]
 8003562:	6823      	ldr	r3, [r4, #0]
 8003564:	4433      	add	r3, r6
 8003566:	6023      	str	r3, [r4, #0]
 8003568:	e7db      	b.n	8003522 <__ssputs_r+0x58>
 800356a:	462a      	mov	r2, r5
 800356c:	f000 fbb0 	bl	8003cd0 <_realloc_r>
 8003570:	4606      	mov	r6, r0
 8003572:	2800      	cmp	r0, #0
 8003574:	d1e1      	bne.n	800353a <__ssputs_r+0x70>
 8003576:	4650      	mov	r0, sl
 8003578:	6921      	ldr	r1, [r4, #16]
 800357a:	f000 facd 	bl	8003b18 <_free_r>
 800357e:	e7c7      	b.n	8003510 <__ssputs_r+0x46>

08003580 <_svfiprintf_r>:
 8003580:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003584:	4698      	mov	r8, r3
 8003586:	898b      	ldrh	r3, [r1, #12]
 8003588:	4607      	mov	r7, r0
 800358a:	061b      	lsls	r3, r3, #24
 800358c:	460d      	mov	r5, r1
 800358e:	4614      	mov	r4, r2
 8003590:	b09d      	sub	sp, #116	; 0x74
 8003592:	d50e      	bpl.n	80035b2 <_svfiprintf_r+0x32>
 8003594:	690b      	ldr	r3, [r1, #16]
 8003596:	b963      	cbnz	r3, 80035b2 <_svfiprintf_r+0x32>
 8003598:	2140      	movs	r1, #64	; 0x40
 800359a:	f000 fb25 	bl	8003be8 <_malloc_r>
 800359e:	6028      	str	r0, [r5, #0]
 80035a0:	6128      	str	r0, [r5, #16]
 80035a2:	b920      	cbnz	r0, 80035ae <_svfiprintf_r+0x2e>
 80035a4:	230c      	movs	r3, #12
 80035a6:	603b      	str	r3, [r7, #0]
 80035a8:	f04f 30ff 	mov.w	r0, #4294967295
 80035ac:	e0d1      	b.n	8003752 <_svfiprintf_r+0x1d2>
 80035ae:	2340      	movs	r3, #64	; 0x40
 80035b0:	616b      	str	r3, [r5, #20]
 80035b2:	2300      	movs	r3, #0
 80035b4:	9309      	str	r3, [sp, #36]	; 0x24
 80035b6:	2320      	movs	r3, #32
 80035b8:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80035bc:	2330      	movs	r3, #48	; 0x30
 80035be:	f04f 0901 	mov.w	r9, #1
 80035c2:	f8cd 800c 	str.w	r8, [sp, #12]
 80035c6:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 800376c <_svfiprintf_r+0x1ec>
 80035ca:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80035ce:	4623      	mov	r3, r4
 80035d0:	469a      	mov	sl, r3
 80035d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80035d6:	b10a      	cbz	r2, 80035dc <_svfiprintf_r+0x5c>
 80035d8:	2a25      	cmp	r2, #37	; 0x25
 80035da:	d1f9      	bne.n	80035d0 <_svfiprintf_r+0x50>
 80035dc:	ebba 0b04 	subs.w	fp, sl, r4
 80035e0:	d00b      	beq.n	80035fa <_svfiprintf_r+0x7a>
 80035e2:	465b      	mov	r3, fp
 80035e4:	4622      	mov	r2, r4
 80035e6:	4629      	mov	r1, r5
 80035e8:	4638      	mov	r0, r7
 80035ea:	f7ff ff6e 	bl	80034ca <__ssputs_r>
 80035ee:	3001      	adds	r0, #1
 80035f0:	f000 80aa 	beq.w	8003748 <_svfiprintf_r+0x1c8>
 80035f4:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80035f6:	445a      	add	r2, fp
 80035f8:	9209      	str	r2, [sp, #36]	; 0x24
 80035fa:	f89a 3000 	ldrb.w	r3, [sl]
 80035fe:	2b00      	cmp	r3, #0
 8003600:	f000 80a2 	beq.w	8003748 <_svfiprintf_r+0x1c8>
 8003604:	2300      	movs	r3, #0
 8003606:	f04f 32ff 	mov.w	r2, #4294967295
 800360a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800360e:	f10a 0a01 	add.w	sl, sl, #1
 8003612:	9304      	str	r3, [sp, #16]
 8003614:	9307      	str	r3, [sp, #28]
 8003616:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800361a:	931a      	str	r3, [sp, #104]	; 0x68
 800361c:	4654      	mov	r4, sl
 800361e:	2205      	movs	r2, #5
 8003620:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003624:	4851      	ldr	r0, [pc, #324]	; (800376c <_svfiprintf_r+0x1ec>)
 8003626:	f000 fa41 	bl	8003aac <memchr>
 800362a:	9a04      	ldr	r2, [sp, #16]
 800362c:	b9d8      	cbnz	r0, 8003666 <_svfiprintf_r+0xe6>
 800362e:	06d0      	lsls	r0, r2, #27
 8003630:	bf44      	itt	mi
 8003632:	2320      	movmi	r3, #32
 8003634:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8003638:	0711      	lsls	r1, r2, #28
 800363a:	bf44      	itt	mi
 800363c:	232b      	movmi	r3, #43	; 0x2b
 800363e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8003642:	f89a 3000 	ldrb.w	r3, [sl]
 8003646:	2b2a      	cmp	r3, #42	; 0x2a
 8003648:	d015      	beq.n	8003676 <_svfiprintf_r+0xf6>
 800364a:	4654      	mov	r4, sl
 800364c:	2000      	movs	r0, #0
 800364e:	f04f 0c0a 	mov.w	ip, #10
 8003652:	9a07      	ldr	r2, [sp, #28]
 8003654:	4621      	mov	r1, r4
 8003656:	f811 3b01 	ldrb.w	r3, [r1], #1
 800365a:	3b30      	subs	r3, #48	; 0x30
 800365c:	2b09      	cmp	r3, #9
 800365e:	d94e      	bls.n	80036fe <_svfiprintf_r+0x17e>
 8003660:	b1b0      	cbz	r0, 8003690 <_svfiprintf_r+0x110>
 8003662:	9207      	str	r2, [sp, #28]
 8003664:	e014      	b.n	8003690 <_svfiprintf_r+0x110>
 8003666:	eba0 0308 	sub.w	r3, r0, r8
 800366a:	fa09 f303 	lsl.w	r3, r9, r3
 800366e:	4313      	orrs	r3, r2
 8003670:	46a2      	mov	sl, r4
 8003672:	9304      	str	r3, [sp, #16]
 8003674:	e7d2      	b.n	800361c <_svfiprintf_r+0x9c>
 8003676:	9b03      	ldr	r3, [sp, #12]
 8003678:	1d19      	adds	r1, r3, #4
 800367a:	681b      	ldr	r3, [r3, #0]
 800367c:	9103      	str	r1, [sp, #12]
 800367e:	2b00      	cmp	r3, #0
 8003680:	bfbb      	ittet	lt
 8003682:	425b      	neglt	r3, r3
 8003684:	f042 0202 	orrlt.w	r2, r2, #2
 8003688:	9307      	strge	r3, [sp, #28]
 800368a:	9307      	strlt	r3, [sp, #28]
 800368c:	bfb8      	it	lt
 800368e:	9204      	strlt	r2, [sp, #16]
 8003690:	7823      	ldrb	r3, [r4, #0]
 8003692:	2b2e      	cmp	r3, #46	; 0x2e
 8003694:	d10c      	bne.n	80036b0 <_svfiprintf_r+0x130>
 8003696:	7863      	ldrb	r3, [r4, #1]
 8003698:	2b2a      	cmp	r3, #42	; 0x2a
 800369a:	d135      	bne.n	8003708 <_svfiprintf_r+0x188>
 800369c:	9b03      	ldr	r3, [sp, #12]
 800369e:	3402      	adds	r4, #2
 80036a0:	1d1a      	adds	r2, r3, #4
 80036a2:	681b      	ldr	r3, [r3, #0]
 80036a4:	9203      	str	r2, [sp, #12]
 80036a6:	2b00      	cmp	r3, #0
 80036a8:	bfb8      	it	lt
 80036aa:	f04f 33ff 	movlt.w	r3, #4294967295
 80036ae:	9305      	str	r3, [sp, #20]
 80036b0:	f8df a0bc 	ldr.w	sl, [pc, #188]	; 8003770 <_svfiprintf_r+0x1f0>
 80036b4:	2203      	movs	r2, #3
 80036b6:	4650      	mov	r0, sl
 80036b8:	7821      	ldrb	r1, [r4, #0]
 80036ba:	f000 f9f7 	bl	8003aac <memchr>
 80036be:	b140      	cbz	r0, 80036d2 <_svfiprintf_r+0x152>
 80036c0:	2340      	movs	r3, #64	; 0x40
 80036c2:	eba0 000a 	sub.w	r0, r0, sl
 80036c6:	fa03 f000 	lsl.w	r0, r3, r0
 80036ca:	9b04      	ldr	r3, [sp, #16]
 80036cc:	3401      	adds	r4, #1
 80036ce:	4303      	orrs	r3, r0
 80036d0:	9304      	str	r3, [sp, #16]
 80036d2:	f814 1b01 	ldrb.w	r1, [r4], #1
 80036d6:	2206      	movs	r2, #6
 80036d8:	4826      	ldr	r0, [pc, #152]	; (8003774 <_svfiprintf_r+0x1f4>)
 80036da:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80036de:	f000 f9e5 	bl	8003aac <memchr>
 80036e2:	2800      	cmp	r0, #0
 80036e4:	d038      	beq.n	8003758 <_svfiprintf_r+0x1d8>
 80036e6:	4b24      	ldr	r3, [pc, #144]	; (8003778 <_svfiprintf_r+0x1f8>)
 80036e8:	bb1b      	cbnz	r3, 8003732 <_svfiprintf_r+0x1b2>
 80036ea:	9b03      	ldr	r3, [sp, #12]
 80036ec:	3307      	adds	r3, #7
 80036ee:	f023 0307 	bic.w	r3, r3, #7
 80036f2:	3308      	adds	r3, #8
 80036f4:	9303      	str	r3, [sp, #12]
 80036f6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80036f8:	4433      	add	r3, r6
 80036fa:	9309      	str	r3, [sp, #36]	; 0x24
 80036fc:	e767      	b.n	80035ce <_svfiprintf_r+0x4e>
 80036fe:	460c      	mov	r4, r1
 8003700:	2001      	movs	r0, #1
 8003702:	fb0c 3202 	mla	r2, ip, r2, r3
 8003706:	e7a5      	b.n	8003654 <_svfiprintf_r+0xd4>
 8003708:	2300      	movs	r3, #0
 800370a:	f04f 0c0a 	mov.w	ip, #10
 800370e:	4619      	mov	r1, r3
 8003710:	3401      	adds	r4, #1
 8003712:	9305      	str	r3, [sp, #20]
 8003714:	4620      	mov	r0, r4
 8003716:	f810 2b01 	ldrb.w	r2, [r0], #1
 800371a:	3a30      	subs	r2, #48	; 0x30
 800371c:	2a09      	cmp	r2, #9
 800371e:	d903      	bls.n	8003728 <_svfiprintf_r+0x1a8>
 8003720:	2b00      	cmp	r3, #0
 8003722:	d0c5      	beq.n	80036b0 <_svfiprintf_r+0x130>
 8003724:	9105      	str	r1, [sp, #20]
 8003726:	e7c3      	b.n	80036b0 <_svfiprintf_r+0x130>
 8003728:	4604      	mov	r4, r0
 800372a:	2301      	movs	r3, #1
 800372c:	fb0c 2101 	mla	r1, ip, r1, r2
 8003730:	e7f0      	b.n	8003714 <_svfiprintf_r+0x194>
 8003732:	ab03      	add	r3, sp, #12
 8003734:	9300      	str	r3, [sp, #0]
 8003736:	462a      	mov	r2, r5
 8003738:	4638      	mov	r0, r7
 800373a:	4b10      	ldr	r3, [pc, #64]	; (800377c <_svfiprintf_r+0x1fc>)
 800373c:	a904      	add	r1, sp, #16
 800373e:	f3af 8000 	nop.w
 8003742:	1c42      	adds	r2, r0, #1
 8003744:	4606      	mov	r6, r0
 8003746:	d1d6      	bne.n	80036f6 <_svfiprintf_r+0x176>
 8003748:	89ab      	ldrh	r3, [r5, #12]
 800374a:	065b      	lsls	r3, r3, #25
 800374c:	f53f af2c 	bmi.w	80035a8 <_svfiprintf_r+0x28>
 8003750:	9809      	ldr	r0, [sp, #36]	; 0x24
 8003752:	b01d      	add	sp, #116	; 0x74
 8003754:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003758:	ab03      	add	r3, sp, #12
 800375a:	9300      	str	r3, [sp, #0]
 800375c:	462a      	mov	r2, r5
 800375e:	4638      	mov	r0, r7
 8003760:	4b06      	ldr	r3, [pc, #24]	; (800377c <_svfiprintf_r+0x1fc>)
 8003762:	a904      	add	r1, sp, #16
 8003764:	f000 f87c 	bl	8003860 <_printf_i>
 8003768:	e7eb      	b.n	8003742 <_svfiprintf_r+0x1c2>
 800376a:	bf00      	nop
 800376c:	08003e6e 	.word	0x08003e6e
 8003770:	08003e74 	.word	0x08003e74
 8003774:	08003e78 	.word	0x08003e78
 8003778:	00000000 	.word	0x00000000
 800377c:	080034cb 	.word	0x080034cb

08003780 <_printf_common>:
 8003780:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003784:	4616      	mov	r6, r2
 8003786:	4699      	mov	r9, r3
 8003788:	688a      	ldr	r2, [r1, #8]
 800378a:	690b      	ldr	r3, [r1, #16]
 800378c:	4607      	mov	r7, r0
 800378e:	4293      	cmp	r3, r2
 8003790:	bfb8      	it	lt
 8003792:	4613      	movlt	r3, r2
 8003794:	6033      	str	r3, [r6, #0]
 8003796:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800379a:	460c      	mov	r4, r1
 800379c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80037a0:	b10a      	cbz	r2, 80037a6 <_printf_common+0x26>
 80037a2:	3301      	adds	r3, #1
 80037a4:	6033      	str	r3, [r6, #0]
 80037a6:	6823      	ldr	r3, [r4, #0]
 80037a8:	0699      	lsls	r1, r3, #26
 80037aa:	bf42      	ittt	mi
 80037ac:	6833      	ldrmi	r3, [r6, #0]
 80037ae:	3302      	addmi	r3, #2
 80037b0:	6033      	strmi	r3, [r6, #0]
 80037b2:	6825      	ldr	r5, [r4, #0]
 80037b4:	f015 0506 	ands.w	r5, r5, #6
 80037b8:	d106      	bne.n	80037c8 <_printf_common+0x48>
 80037ba:	f104 0a19 	add.w	sl, r4, #25
 80037be:	68e3      	ldr	r3, [r4, #12]
 80037c0:	6832      	ldr	r2, [r6, #0]
 80037c2:	1a9b      	subs	r3, r3, r2
 80037c4:	42ab      	cmp	r3, r5
 80037c6:	dc28      	bgt.n	800381a <_printf_common+0x9a>
 80037c8:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80037cc:	1e13      	subs	r3, r2, #0
 80037ce:	6822      	ldr	r2, [r4, #0]
 80037d0:	bf18      	it	ne
 80037d2:	2301      	movne	r3, #1
 80037d4:	0692      	lsls	r2, r2, #26
 80037d6:	d42d      	bmi.n	8003834 <_printf_common+0xb4>
 80037d8:	4649      	mov	r1, r9
 80037da:	4638      	mov	r0, r7
 80037dc:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80037e0:	47c0      	blx	r8
 80037e2:	3001      	adds	r0, #1
 80037e4:	d020      	beq.n	8003828 <_printf_common+0xa8>
 80037e6:	6823      	ldr	r3, [r4, #0]
 80037e8:	68e5      	ldr	r5, [r4, #12]
 80037ea:	f003 0306 	and.w	r3, r3, #6
 80037ee:	2b04      	cmp	r3, #4
 80037f0:	bf18      	it	ne
 80037f2:	2500      	movne	r5, #0
 80037f4:	6832      	ldr	r2, [r6, #0]
 80037f6:	f04f 0600 	mov.w	r6, #0
 80037fa:	68a3      	ldr	r3, [r4, #8]
 80037fc:	bf08      	it	eq
 80037fe:	1aad      	subeq	r5, r5, r2
 8003800:	6922      	ldr	r2, [r4, #16]
 8003802:	bf08      	it	eq
 8003804:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8003808:	4293      	cmp	r3, r2
 800380a:	bfc4      	itt	gt
 800380c:	1a9b      	subgt	r3, r3, r2
 800380e:	18ed      	addgt	r5, r5, r3
 8003810:	341a      	adds	r4, #26
 8003812:	42b5      	cmp	r5, r6
 8003814:	d11a      	bne.n	800384c <_printf_common+0xcc>
 8003816:	2000      	movs	r0, #0
 8003818:	e008      	b.n	800382c <_printf_common+0xac>
 800381a:	2301      	movs	r3, #1
 800381c:	4652      	mov	r2, sl
 800381e:	4649      	mov	r1, r9
 8003820:	4638      	mov	r0, r7
 8003822:	47c0      	blx	r8
 8003824:	3001      	adds	r0, #1
 8003826:	d103      	bne.n	8003830 <_printf_common+0xb0>
 8003828:	f04f 30ff 	mov.w	r0, #4294967295
 800382c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003830:	3501      	adds	r5, #1
 8003832:	e7c4      	b.n	80037be <_printf_common+0x3e>
 8003834:	2030      	movs	r0, #48	; 0x30
 8003836:	18e1      	adds	r1, r4, r3
 8003838:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800383c:	1c5a      	adds	r2, r3, #1
 800383e:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8003842:	4422      	add	r2, r4
 8003844:	3302      	adds	r3, #2
 8003846:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800384a:	e7c5      	b.n	80037d8 <_printf_common+0x58>
 800384c:	2301      	movs	r3, #1
 800384e:	4622      	mov	r2, r4
 8003850:	4649      	mov	r1, r9
 8003852:	4638      	mov	r0, r7
 8003854:	47c0      	blx	r8
 8003856:	3001      	adds	r0, #1
 8003858:	d0e6      	beq.n	8003828 <_printf_common+0xa8>
 800385a:	3601      	adds	r6, #1
 800385c:	e7d9      	b.n	8003812 <_printf_common+0x92>
	...

08003860 <_printf_i>:
 8003860:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8003864:	7e0f      	ldrb	r7, [r1, #24]
 8003866:	4691      	mov	r9, r2
 8003868:	2f78      	cmp	r7, #120	; 0x78
 800386a:	4680      	mov	r8, r0
 800386c:	460c      	mov	r4, r1
 800386e:	469a      	mov	sl, r3
 8003870:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8003872:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8003876:	d807      	bhi.n	8003888 <_printf_i+0x28>
 8003878:	2f62      	cmp	r7, #98	; 0x62
 800387a:	d80a      	bhi.n	8003892 <_printf_i+0x32>
 800387c:	2f00      	cmp	r7, #0
 800387e:	f000 80d9 	beq.w	8003a34 <_printf_i+0x1d4>
 8003882:	2f58      	cmp	r7, #88	; 0x58
 8003884:	f000 80a4 	beq.w	80039d0 <_printf_i+0x170>
 8003888:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800388c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8003890:	e03a      	b.n	8003908 <_printf_i+0xa8>
 8003892:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8003896:	2b15      	cmp	r3, #21
 8003898:	d8f6      	bhi.n	8003888 <_printf_i+0x28>
 800389a:	a101      	add	r1, pc, #4	; (adr r1, 80038a0 <_printf_i+0x40>)
 800389c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80038a0:	080038f9 	.word	0x080038f9
 80038a4:	0800390d 	.word	0x0800390d
 80038a8:	08003889 	.word	0x08003889
 80038ac:	08003889 	.word	0x08003889
 80038b0:	08003889 	.word	0x08003889
 80038b4:	08003889 	.word	0x08003889
 80038b8:	0800390d 	.word	0x0800390d
 80038bc:	08003889 	.word	0x08003889
 80038c0:	08003889 	.word	0x08003889
 80038c4:	08003889 	.word	0x08003889
 80038c8:	08003889 	.word	0x08003889
 80038cc:	08003a1b 	.word	0x08003a1b
 80038d0:	0800393d 	.word	0x0800393d
 80038d4:	080039fd 	.word	0x080039fd
 80038d8:	08003889 	.word	0x08003889
 80038dc:	08003889 	.word	0x08003889
 80038e0:	08003a3d 	.word	0x08003a3d
 80038e4:	08003889 	.word	0x08003889
 80038e8:	0800393d 	.word	0x0800393d
 80038ec:	08003889 	.word	0x08003889
 80038f0:	08003889 	.word	0x08003889
 80038f4:	08003a05 	.word	0x08003a05
 80038f8:	682b      	ldr	r3, [r5, #0]
 80038fa:	1d1a      	adds	r2, r3, #4
 80038fc:	681b      	ldr	r3, [r3, #0]
 80038fe:	602a      	str	r2, [r5, #0]
 8003900:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003904:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8003908:	2301      	movs	r3, #1
 800390a:	e0a4      	b.n	8003a56 <_printf_i+0x1f6>
 800390c:	6820      	ldr	r0, [r4, #0]
 800390e:	6829      	ldr	r1, [r5, #0]
 8003910:	0606      	lsls	r6, r0, #24
 8003912:	f101 0304 	add.w	r3, r1, #4
 8003916:	d50a      	bpl.n	800392e <_printf_i+0xce>
 8003918:	680e      	ldr	r6, [r1, #0]
 800391a:	602b      	str	r3, [r5, #0]
 800391c:	2e00      	cmp	r6, #0
 800391e:	da03      	bge.n	8003928 <_printf_i+0xc8>
 8003920:	232d      	movs	r3, #45	; 0x2d
 8003922:	4276      	negs	r6, r6
 8003924:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003928:	230a      	movs	r3, #10
 800392a:	485e      	ldr	r0, [pc, #376]	; (8003aa4 <_printf_i+0x244>)
 800392c:	e019      	b.n	8003962 <_printf_i+0x102>
 800392e:	680e      	ldr	r6, [r1, #0]
 8003930:	f010 0f40 	tst.w	r0, #64	; 0x40
 8003934:	602b      	str	r3, [r5, #0]
 8003936:	bf18      	it	ne
 8003938:	b236      	sxthne	r6, r6
 800393a:	e7ef      	b.n	800391c <_printf_i+0xbc>
 800393c:	682b      	ldr	r3, [r5, #0]
 800393e:	6820      	ldr	r0, [r4, #0]
 8003940:	1d19      	adds	r1, r3, #4
 8003942:	6029      	str	r1, [r5, #0]
 8003944:	0601      	lsls	r1, r0, #24
 8003946:	d501      	bpl.n	800394c <_printf_i+0xec>
 8003948:	681e      	ldr	r6, [r3, #0]
 800394a:	e002      	b.n	8003952 <_printf_i+0xf2>
 800394c:	0646      	lsls	r6, r0, #25
 800394e:	d5fb      	bpl.n	8003948 <_printf_i+0xe8>
 8003950:	881e      	ldrh	r6, [r3, #0]
 8003952:	2f6f      	cmp	r7, #111	; 0x6f
 8003954:	bf0c      	ite	eq
 8003956:	2308      	moveq	r3, #8
 8003958:	230a      	movne	r3, #10
 800395a:	4852      	ldr	r0, [pc, #328]	; (8003aa4 <_printf_i+0x244>)
 800395c:	2100      	movs	r1, #0
 800395e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8003962:	6865      	ldr	r5, [r4, #4]
 8003964:	2d00      	cmp	r5, #0
 8003966:	bfa8      	it	ge
 8003968:	6821      	ldrge	r1, [r4, #0]
 800396a:	60a5      	str	r5, [r4, #8]
 800396c:	bfa4      	itt	ge
 800396e:	f021 0104 	bicge.w	r1, r1, #4
 8003972:	6021      	strge	r1, [r4, #0]
 8003974:	b90e      	cbnz	r6, 800397a <_printf_i+0x11a>
 8003976:	2d00      	cmp	r5, #0
 8003978:	d04d      	beq.n	8003a16 <_printf_i+0x1b6>
 800397a:	4615      	mov	r5, r2
 800397c:	fbb6 f1f3 	udiv	r1, r6, r3
 8003980:	fb03 6711 	mls	r7, r3, r1, r6
 8003984:	5dc7      	ldrb	r7, [r0, r7]
 8003986:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800398a:	4637      	mov	r7, r6
 800398c:	42bb      	cmp	r3, r7
 800398e:	460e      	mov	r6, r1
 8003990:	d9f4      	bls.n	800397c <_printf_i+0x11c>
 8003992:	2b08      	cmp	r3, #8
 8003994:	d10b      	bne.n	80039ae <_printf_i+0x14e>
 8003996:	6823      	ldr	r3, [r4, #0]
 8003998:	07de      	lsls	r6, r3, #31
 800399a:	d508      	bpl.n	80039ae <_printf_i+0x14e>
 800399c:	6923      	ldr	r3, [r4, #16]
 800399e:	6861      	ldr	r1, [r4, #4]
 80039a0:	4299      	cmp	r1, r3
 80039a2:	bfde      	ittt	le
 80039a4:	2330      	movle	r3, #48	; 0x30
 80039a6:	f805 3c01 	strble.w	r3, [r5, #-1]
 80039aa:	f105 35ff 	addle.w	r5, r5, #4294967295
 80039ae:	1b52      	subs	r2, r2, r5
 80039b0:	6122      	str	r2, [r4, #16]
 80039b2:	464b      	mov	r3, r9
 80039b4:	4621      	mov	r1, r4
 80039b6:	4640      	mov	r0, r8
 80039b8:	f8cd a000 	str.w	sl, [sp]
 80039bc:	aa03      	add	r2, sp, #12
 80039be:	f7ff fedf 	bl	8003780 <_printf_common>
 80039c2:	3001      	adds	r0, #1
 80039c4:	d14c      	bne.n	8003a60 <_printf_i+0x200>
 80039c6:	f04f 30ff 	mov.w	r0, #4294967295
 80039ca:	b004      	add	sp, #16
 80039cc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80039d0:	4834      	ldr	r0, [pc, #208]	; (8003aa4 <_printf_i+0x244>)
 80039d2:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 80039d6:	6829      	ldr	r1, [r5, #0]
 80039d8:	6823      	ldr	r3, [r4, #0]
 80039da:	f851 6b04 	ldr.w	r6, [r1], #4
 80039de:	6029      	str	r1, [r5, #0]
 80039e0:	061d      	lsls	r5, r3, #24
 80039e2:	d514      	bpl.n	8003a0e <_printf_i+0x1ae>
 80039e4:	07df      	lsls	r7, r3, #31
 80039e6:	bf44      	itt	mi
 80039e8:	f043 0320 	orrmi.w	r3, r3, #32
 80039ec:	6023      	strmi	r3, [r4, #0]
 80039ee:	b91e      	cbnz	r6, 80039f8 <_printf_i+0x198>
 80039f0:	6823      	ldr	r3, [r4, #0]
 80039f2:	f023 0320 	bic.w	r3, r3, #32
 80039f6:	6023      	str	r3, [r4, #0]
 80039f8:	2310      	movs	r3, #16
 80039fa:	e7af      	b.n	800395c <_printf_i+0xfc>
 80039fc:	6823      	ldr	r3, [r4, #0]
 80039fe:	f043 0320 	orr.w	r3, r3, #32
 8003a02:	6023      	str	r3, [r4, #0]
 8003a04:	2378      	movs	r3, #120	; 0x78
 8003a06:	4828      	ldr	r0, [pc, #160]	; (8003aa8 <_printf_i+0x248>)
 8003a08:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8003a0c:	e7e3      	b.n	80039d6 <_printf_i+0x176>
 8003a0e:	0659      	lsls	r1, r3, #25
 8003a10:	bf48      	it	mi
 8003a12:	b2b6      	uxthmi	r6, r6
 8003a14:	e7e6      	b.n	80039e4 <_printf_i+0x184>
 8003a16:	4615      	mov	r5, r2
 8003a18:	e7bb      	b.n	8003992 <_printf_i+0x132>
 8003a1a:	682b      	ldr	r3, [r5, #0]
 8003a1c:	6826      	ldr	r6, [r4, #0]
 8003a1e:	1d18      	adds	r0, r3, #4
 8003a20:	6961      	ldr	r1, [r4, #20]
 8003a22:	6028      	str	r0, [r5, #0]
 8003a24:	0635      	lsls	r5, r6, #24
 8003a26:	681b      	ldr	r3, [r3, #0]
 8003a28:	d501      	bpl.n	8003a2e <_printf_i+0x1ce>
 8003a2a:	6019      	str	r1, [r3, #0]
 8003a2c:	e002      	b.n	8003a34 <_printf_i+0x1d4>
 8003a2e:	0670      	lsls	r0, r6, #25
 8003a30:	d5fb      	bpl.n	8003a2a <_printf_i+0x1ca>
 8003a32:	8019      	strh	r1, [r3, #0]
 8003a34:	2300      	movs	r3, #0
 8003a36:	4615      	mov	r5, r2
 8003a38:	6123      	str	r3, [r4, #16]
 8003a3a:	e7ba      	b.n	80039b2 <_printf_i+0x152>
 8003a3c:	682b      	ldr	r3, [r5, #0]
 8003a3e:	2100      	movs	r1, #0
 8003a40:	1d1a      	adds	r2, r3, #4
 8003a42:	602a      	str	r2, [r5, #0]
 8003a44:	681d      	ldr	r5, [r3, #0]
 8003a46:	6862      	ldr	r2, [r4, #4]
 8003a48:	4628      	mov	r0, r5
 8003a4a:	f000 f82f 	bl	8003aac <memchr>
 8003a4e:	b108      	cbz	r0, 8003a54 <_printf_i+0x1f4>
 8003a50:	1b40      	subs	r0, r0, r5
 8003a52:	6060      	str	r0, [r4, #4]
 8003a54:	6863      	ldr	r3, [r4, #4]
 8003a56:	6123      	str	r3, [r4, #16]
 8003a58:	2300      	movs	r3, #0
 8003a5a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003a5e:	e7a8      	b.n	80039b2 <_printf_i+0x152>
 8003a60:	462a      	mov	r2, r5
 8003a62:	4649      	mov	r1, r9
 8003a64:	4640      	mov	r0, r8
 8003a66:	6923      	ldr	r3, [r4, #16]
 8003a68:	47d0      	blx	sl
 8003a6a:	3001      	adds	r0, #1
 8003a6c:	d0ab      	beq.n	80039c6 <_printf_i+0x166>
 8003a6e:	6823      	ldr	r3, [r4, #0]
 8003a70:	079b      	lsls	r3, r3, #30
 8003a72:	d413      	bmi.n	8003a9c <_printf_i+0x23c>
 8003a74:	68e0      	ldr	r0, [r4, #12]
 8003a76:	9b03      	ldr	r3, [sp, #12]
 8003a78:	4298      	cmp	r0, r3
 8003a7a:	bfb8      	it	lt
 8003a7c:	4618      	movlt	r0, r3
 8003a7e:	e7a4      	b.n	80039ca <_printf_i+0x16a>
 8003a80:	2301      	movs	r3, #1
 8003a82:	4632      	mov	r2, r6
 8003a84:	4649      	mov	r1, r9
 8003a86:	4640      	mov	r0, r8
 8003a88:	47d0      	blx	sl
 8003a8a:	3001      	adds	r0, #1
 8003a8c:	d09b      	beq.n	80039c6 <_printf_i+0x166>
 8003a8e:	3501      	adds	r5, #1
 8003a90:	68e3      	ldr	r3, [r4, #12]
 8003a92:	9903      	ldr	r1, [sp, #12]
 8003a94:	1a5b      	subs	r3, r3, r1
 8003a96:	42ab      	cmp	r3, r5
 8003a98:	dcf2      	bgt.n	8003a80 <_printf_i+0x220>
 8003a9a:	e7eb      	b.n	8003a74 <_printf_i+0x214>
 8003a9c:	2500      	movs	r5, #0
 8003a9e:	f104 0619 	add.w	r6, r4, #25
 8003aa2:	e7f5      	b.n	8003a90 <_printf_i+0x230>
 8003aa4:	08003e7f 	.word	0x08003e7f
 8003aa8:	08003e90 	.word	0x08003e90

08003aac <memchr>:
 8003aac:	4603      	mov	r3, r0
 8003aae:	b510      	push	{r4, lr}
 8003ab0:	b2c9      	uxtb	r1, r1
 8003ab2:	4402      	add	r2, r0
 8003ab4:	4293      	cmp	r3, r2
 8003ab6:	4618      	mov	r0, r3
 8003ab8:	d101      	bne.n	8003abe <memchr+0x12>
 8003aba:	2000      	movs	r0, #0
 8003abc:	e003      	b.n	8003ac6 <memchr+0x1a>
 8003abe:	7804      	ldrb	r4, [r0, #0]
 8003ac0:	3301      	adds	r3, #1
 8003ac2:	428c      	cmp	r4, r1
 8003ac4:	d1f6      	bne.n	8003ab4 <memchr+0x8>
 8003ac6:	bd10      	pop	{r4, pc}

08003ac8 <memcpy>:
 8003ac8:	440a      	add	r2, r1
 8003aca:	4291      	cmp	r1, r2
 8003acc:	f100 33ff 	add.w	r3, r0, #4294967295
 8003ad0:	d100      	bne.n	8003ad4 <memcpy+0xc>
 8003ad2:	4770      	bx	lr
 8003ad4:	b510      	push	{r4, lr}
 8003ad6:	f811 4b01 	ldrb.w	r4, [r1], #1
 8003ada:	4291      	cmp	r1, r2
 8003adc:	f803 4f01 	strb.w	r4, [r3, #1]!
 8003ae0:	d1f9      	bne.n	8003ad6 <memcpy+0xe>
 8003ae2:	bd10      	pop	{r4, pc}

08003ae4 <memmove>:
 8003ae4:	4288      	cmp	r0, r1
 8003ae6:	b510      	push	{r4, lr}
 8003ae8:	eb01 0402 	add.w	r4, r1, r2
 8003aec:	d902      	bls.n	8003af4 <memmove+0x10>
 8003aee:	4284      	cmp	r4, r0
 8003af0:	4623      	mov	r3, r4
 8003af2:	d807      	bhi.n	8003b04 <memmove+0x20>
 8003af4:	1e43      	subs	r3, r0, #1
 8003af6:	42a1      	cmp	r1, r4
 8003af8:	d008      	beq.n	8003b0c <memmove+0x28>
 8003afa:	f811 2b01 	ldrb.w	r2, [r1], #1
 8003afe:	f803 2f01 	strb.w	r2, [r3, #1]!
 8003b02:	e7f8      	b.n	8003af6 <memmove+0x12>
 8003b04:	4601      	mov	r1, r0
 8003b06:	4402      	add	r2, r0
 8003b08:	428a      	cmp	r2, r1
 8003b0a:	d100      	bne.n	8003b0e <memmove+0x2a>
 8003b0c:	bd10      	pop	{r4, pc}
 8003b0e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8003b12:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8003b16:	e7f7      	b.n	8003b08 <memmove+0x24>

08003b18 <_free_r>:
 8003b18:	b538      	push	{r3, r4, r5, lr}
 8003b1a:	4605      	mov	r5, r0
 8003b1c:	2900      	cmp	r1, #0
 8003b1e:	d040      	beq.n	8003ba2 <_free_r+0x8a>
 8003b20:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003b24:	1f0c      	subs	r4, r1, #4
 8003b26:	2b00      	cmp	r3, #0
 8003b28:	bfb8      	it	lt
 8003b2a:	18e4      	addlt	r4, r4, r3
 8003b2c:	f000 f910 	bl	8003d50 <__malloc_lock>
 8003b30:	4a1c      	ldr	r2, [pc, #112]	; (8003ba4 <_free_r+0x8c>)
 8003b32:	6813      	ldr	r3, [r2, #0]
 8003b34:	b933      	cbnz	r3, 8003b44 <_free_r+0x2c>
 8003b36:	6063      	str	r3, [r4, #4]
 8003b38:	6014      	str	r4, [r2, #0]
 8003b3a:	4628      	mov	r0, r5
 8003b3c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8003b40:	f000 b90c 	b.w	8003d5c <__malloc_unlock>
 8003b44:	42a3      	cmp	r3, r4
 8003b46:	d908      	bls.n	8003b5a <_free_r+0x42>
 8003b48:	6820      	ldr	r0, [r4, #0]
 8003b4a:	1821      	adds	r1, r4, r0
 8003b4c:	428b      	cmp	r3, r1
 8003b4e:	bf01      	itttt	eq
 8003b50:	6819      	ldreq	r1, [r3, #0]
 8003b52:	685b      	ldreq	r3, [r3, #4]
 8003b54:	1809      	addeq	r1, r1, r0
 8003b56:	6021      	streq	r1, [r4, #0]
 8003b58:	e7ed      	b.n	8003b36 <_free_r+0x1e>
 8003b5a:	461a      	mov	r2, r3
 8003b5c:	685b      	ldr	r3, [r3, #4]
 8003b5e:	b10b      	cbz	r3, 8003b64 <_free_r+0x4c>
 8003b60:	42a3      	cmp	r3, r4
 8003b62:	d9fa      	bls.n	8003b5a <_free_r+0x42>
 8003b64:	6811      	ldr	r1, [r2, #0]
 8003b66:	1850      	adds	r0, r2, r1
 8003b68:	42a0      	cmp	r0, r4
 8003b6a:	d10b      	bne.n	8003b84 <_free_r+0x6c>
 8003b6c:	6820      	ldr	r0, [r4, #0]
 8003b6e:	4401      	add	r1, r0
 8003b70:	1850      	adds	r0, r2, r1
 8003b72:	4283      	cmp	r3, r0
 8003b74:	6011      	str	r1, [r2, #0]
 8003b76:	d1e0      	bne.n	8003b3a <_free_r+0x22>
 8003b78:	6818      	ldr	r0, [r3, #0]
 8003b7a:	685b      	ldr	r3, [r3, #4]
 8003b7c:	4401      	add	r1, r0
 8003b7e:	6011      	str	r1, [r2, #0]
 8003b80:	6053      	str	r3, [r2, #4]
 8003b82:	e7da      	b.n	8003b3a <_free_r+0x22>
 8003b84:	d902      	bls.n	8003b8c <_free_r+0x74>
 8003b86:	230c      	movs	r3, #12
 8003b88:	602b      	str	r3, [r5, #0]
 8003b8a:	e7d6      	b.n	8003b3a <_free_r+0x22>
 8003b8c:	6820      	ldr	r0, [r4, #0]
 8003b8e:	1821      	adds	r1, r4, r0
 8003b90:	428b      	cmp	r3, r1
 8003b92:	bf01      	itttt	eq
 8003b94:	6819      	ldreq	r1, [r3, #0]
 8003b96:	685b      	ldreq	r3, [r3, #4]
 8003b98:	1809      	addeq	r1, r1, r0
 8003b9a:	6021      	streq	r1, [r4, #0]
 8003b9c:	6063      	str	r3, [r4, #4]
 8003b9e:	6054      	str	r4, [r2, #4]
 8003ba0:	e7cb      	b.n	8003b3a <_free_r+0x22>
 8003ba2:	bd38      	pop	{r3, r4, r5, pc}
 8003ba4:	200001a4 	.word	0x200001a4

08003ba8 <sbrk_aligned>:
 8003ba8:	b570      	push	{r4, r5, r6, lr}
 8003baa:	4e0e      	ldr	r6, [pc, #56]	; (8003be4 <sbrk_aligned+0x3c>)
 8003bac:	460c      	mov	r4, r1
 8003bae:	6831      	ldr	r1, [r6, #0]
 8003bb0:	4605      	mov	r5, r0
 8003bb2:	b911      	cbnz	r1, 8003bba <sbrk_aligned+0x12>
 8003bb4:	f000 f8bc 	bl	8003d30 <_sbrk_r>
 8003bb8:	6030      	str	r0, [r6, #0]
 8003bba:	4621      	mov	r1, r4
 8003bbc:	4628      	mov	r0, r5
 8003bbe:	f000 f8b7 	bl	8003d30 <_sbrk_r>
 8003bc2:	1c43      	adds	r3, r0, #1
 8003bc4:	d00a      	beq.n	8003bdc <sbrk_aligned+0x34>
 8003bc6:	1cc4      	adds	r4, r0, #3
 8003bc8:	f024 0403 	bic.w	r4, r4, #3
 8003bcc:	42a0      	cmp	r0, r4
 8003bce:	d007      	beq.n	8003be0 <sbrk_aligned+0x38>
 8003bd0:	1a21      	subs	r1, r4, r0
 8003bd2:	4628      	mov	r0, r5
 8003bd4:	f000 f8ac 	bl	8003d30 <_sbrk_r>
 8003bd8:	3001      	adds	r0, #1
 8003bda:	d101      	bne.n	8003be0 <sbrk_aligned+0x38>
 8003bdc:	f04f 34ff 	mov.w	r4, #4294967295
 8003be0:	4620      	mov	r0, r4
 8003be2:	bd70      	pop	{r4, r5, r6, pc}
 8003be4:	200001a8 	.word	0x200001a8

08003be8 <_malloc_r>:
 8003be8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003bec:	1ccd      	adds	r5, r1, #3
 8003bee:	f025 0503 	bic.w	r5, r5, #3
 8003bf2:	3508      	adds	r5, #8
 8003bf4:	2d0c      	cmp	r5, #12
 8003bf6:	bf38      	it	cc
 8003bf8:	250c      	movcc	r5, #12
 8003bfa:	2d00      	cmp	r5, #0
 8003bfc:	4607      	mov	r7, r0
 8003bfe:	db01      	blt.n	8003c04 <_malloc_r+0x1c>
 8003c00:	42a9      	cmp	r1, r5
 8003c02:	d905      	bls.n	8003c10 <_malloc_r+0x28>
 8003c04:	230c      	movs	r3, #12
 8003c06:	2600      	movs	r6, #0
 8003c08:	603b      	str	r3, [r7, #0]
 8003c0a:	4630      	mov	r0, r6
 8003c0c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003c10:	4e2e      	ldr	r6, [pc, #184]	; (8003ccc <_malloc_r+0xe4>)
 8003c12:	f000 f89d 	bl	8003d50 <__malloc_lock>
 8003c16:	6833      	ldr	r3, [r6, #0]
 8003c18:	461c      	mov	r4, r3
 8003c1a:	bb34      	cbnz	r4, 8003c6a <_malloc_r+0x82>
 8003c1c:	4629      	mov	r1, r5
 8003c1e:	4638      	mov	r0, r7
 8003c20:	f7ff ffc2 	bl	8003ba8 <sbrk_aligned>
 8003c24:	1c43      	adds	r3, r0, #1
 8003c26:	4604      	mov	r4, r0
 8003c28:	d14d      	bne.n	8003cc6 <_malloc_r+0xde>
 8003c2a:	6834      	ldr	r4, [r6, #0]
 8003c2c:	4626      	mov	r6, r4
 8003c2e:	2e00      	cmp	r6, #0
 8003c30:	d140      	bne.n	8003cb4 <_malloc_r+0xcc>
 8003c32:	6823      	ldr	r3, [r4, #0]
 8003c34:	4631      	mov	r1, r6
 8003c36:	4638      	mov	r0, r7
 8003c38:	eb04 0803 	add.w	r8, r4, r3
 8003c3c:	f000 f878 	bl	8003d30 <_sbrk_r>
 8003c40:	4580      	cmp	r8, r0
 8003c42:	d13a      	bne.n	8003cba <_malloc_r+0xd2>
 8003c44:	6821      	ldr	r1, [r4, #0]
 8003c46:	3503      	adds	r5, #3
 8003c48:	1a6d      	subs	r5, r5, r1
 8003c4a:	f025 0503 	bic.w	r5, r5, #3
 8003c4e:	3508      	adds	r5, #8
 8003c50:	2d0c      	cmp	r5, #12
 8003c52:	bf38      	it	cc
 8003c54:	250c      	movcc	r5, #12
 8003c56:	4638      	mov	r0, r7
 8003c58:	4629      	mov	r1, r5
 8003c5a:	f7ff ffa5 	bl	8003ba8 <sbrk_aligned>
 8003c5e:	3001      	adds	r0, #1
 8003c60:	d02b      	beq.n	8003cba <_malloc_r+0xd2>
 8003c62:	6823      	ldr	r3, [r4, #0]
 8003c64:	442b      	add	r3, r5
 8003c66:	6023      	str	r3, [r4, #0]
 8003c68:	e00e      	b.n	8003c88 <_malloc_r+0xa0>
 8003c6a:	6822      	ldr	r2, [r4, #0]
 8003c6c:	1b52      	subs	r2, r2, r5
 8003c6e:	d41e      	bmi.n	8003cae <_malloc_r+0xc6>
 8003c70:	2a0b      	cmp	r2, #11
 8003c72:	d916      	bls.n	8003ca2 <_malloc_r+0xba>
 8003c74:	1961      	adds	r1, r4, r5
 8003c76:	42a3      	cmp	r3, r4
 8003c78:	6025      	str	r5, [r4, #0]
 8003c7a:	bf18      	it	ne
 8003c7c:	6059      	strne	r1, [r3, #4]
 8003c7e:	6863      	ldr	r3, [r4, #4]
 8003c80:	bf08      	it	eq
 8003c82:	6031      	streq	r1, [r6, #0]
 8003c84:	5162      	str	r2, [r4, r5]
 8003c86:	604b      	str	r3, [r1, #4]
 8003c88:	4638      	mov	r0, r7
 8003c8a:	f104 060b 	add.w	r6, r4, #11
 8003c8e:	f000 f865 	bl	8003d5c <__malloc_unlock>
 8003c92:	f026 0607 	bic.w	r6, r6, #7
 8003c96:	1d23      	adds	r3, r4, #4
 8003c98:	1af2      	subs	r2, r6, r3
 8003c9a:	d0b6      	beq.n	8003c0a <_malloc_r+0x22>
 8003c9c:	1b9b      	subs	r3, r3, r6
 8003c9e:	50a3      	str	r3, [r4, r2]
 8003ca0:	e7b3      	b.n	8003c0a <_malloc_r+0x22>
 8003ca2:	6862      	ldr	r2, [r4, #4]
 8003ca4:	42a3      	cmp	r3, r4
 8003ca6:	bf0c      	ite	eq
 8003ca8:	6032      	streq	r2, [r6, #0]
 8003caa:	605a      	strne	r2, [r3, #4]
 8003cac:	e7ec      	b.n	8003c88 <_malloc_r+0xa0>
 8003cae:	4623      	mov	r3, r4
 8003cb0:	6864      	ldr	r4, [r4, #4]
 8003cb2:	e7b2      	b.n	8003c1a <_malloc_r+0x32>
 8003cb4:	4634      	mov	r4, r6
 8003cb6:	6876      	ldr	r6, [r6, #4]
 8003cb8:	e7b9      	b.n	8003c2e <_malloc_r+0x46>
 8003cba:	230c      	movs	r3, #12
 8003cbc:	4638      	mov	r0, r7
 8003cbe:	603b      	str	r3, [r7, #0]
 8003cc0:	f000 f84c 	bl	8003d5c <__malloc_unlock>
 8003cc4:	e7a1      	b.n	8003c0a <_malloc_r+0x22>
 8003cc6:	6025      	str	r5, [r4, #0]
 8003cc8:	e7de      	b.n	8003c88 <_malloc_r+0xa0>
 8003cca:	bf00      	nop
 8003ccc:	200001a4 	.word	0x200001a4

08003cd0 <_realloc_r>:
 8003cd0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003cd4:	4680      	mov	r8, r0
 8003cd6:	4614      	mov	r4, r2
 8003cd8:	460e      	mov	r6, r1
 8003cda:	b921      	cbnz	r1, 8003ce6 <_realloc_r+0x16>
 8003cdc:	4611      	mov	r1, r2
 8003cde:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8003ce2:	f7ff bf81 	b.w	8003be8 <_malloc_r>
 8003ce6:	b92a      	cbnz	r2, 8003cf4 <_realloc_r+0x24>
 8003ce8:	f7ff ff16 	bl	8003b18 <_free_r>
 8003cec:	4625      	mov	r5, r4
 8003cee:	4628      	mov	r0, r5
 8003cf0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003cf4:	f000 f838 	bl	8003d68 <_malloc_usable_size_r>
 8003cf8:	4284      	cmp	r4, r0
 8003cfa:	4607      	mov	r7, r0
 8003cfc:	d802      	bhi.n	8003d04 <_realloc_r+0x34>
 8003cfe:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8003d02:	d812      	bhi.n	8003d2a <_realloc_r+0x5a>
 8003d04:	4621      	mov	r1, r4
 8003d06:	4640      	mov	r0, r8
 8003d08:	f7ff ff6e 	bl	8003be8 <_malloc_r>
 8003d0c:	4605      	mov	r5, r0
 8003d0e:	2800      	cmp	r0, #0
 8003d10:	d0ed      	beq.n	8003cee <_realloc_r+0x1e>
 8003d12:	42bc      	cmp	r4, r7
 8003d14:	4622      	mov	r2, r4
 8003d16:	4631      	mov	r1, r6
 8003d18:	bf28      	it	cs
 8003d1a:	463a      	movcs	r2, r7
 8003d1c:	f7ff fed4 	bl	8003ac8 <memcpy>
 8003d20:	4631      	mov	r1, r6
 8003d22:	4640      	mov	r0, r8
 8003d24:	f7ff fef8 	bl	8003b18 <_free_r>
 8003d28:	e7e1      	b.n	8003cee <_realloc_r+0x1e>
 8003d2a:	4635      	mov	r5, r6
 8003d2c:	e7df      	b.n	8003cee <_realloc_r+0x1e>
	...

08003d30 <_sbrk_r>:
 8003d30:	b538      	push	{r3, r4, r5, lr}
 8003d32:	2300      	movs	r3, #0
 8003d34:	4d05      	ldr	r5, [pc, #20]	; (8003d4c <_sbrk_r+0x1c>)
 8003d36:	4604      	mov	r4, r0
 8003d38:	4608      	mov	r0, r1
 8003d3a:	602b      	str	r3, [r5, #0]
 8003d3c:	f7fd fb94 	bl	8001468 <_sbrk>
 8003d40:	1c43      	adds	r3, r0, #1
 8003d42:	d102      	bne.n	8003d4a <_sbrk_r+0x1a>
 8003d44:	682b      	ldr	r3, [r5, #0]
 8003d46:	b103      	cbz	r3, 8003d4a <_sbrk_r+0x1a>
 8003d48:	6023      	str	r3, [r4, #0]
 8003d4a:	bd38      	pop	{r3, r4, r5, pc}
 8003d4c:	200001ac 	.word	0x200001ac

08003d50 <__malloc_lock>:
 8003d50:	4801      	ldr	r0, [pc, #4]	; (8003d58 <__malloc_lock+0x8>)
 8003d52:	f000 b811 	b.w	8003d78 <__retarget_lock_acquire_recursive>
 8003d56:	bf00      	nop
 8003d58:	200001b0 	.word	0x200001b0

08003d5c <__malloc_unlock>:
 8003d5c:	4801      	ldr	r0, [pc, #4]	; (8003d64 <__malloc_unlock+0x8>)
 8003d5e:	f000 b80c 	b.w	8003d7a <__retarget_lock_release_recursive>
 8003d62:	bf00      	nop
 8003d64:	200001b0 	.word	0x200001b0

08003d68 <_malloc_usable_size_r>:
 8003d68:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003d6c:	1f18      	subs	r0, r3, #4
 8003d6e:	2b00      	cmp	r3, #0
 8003d70:	bfbc      	itt	lt
 8003d72:	580b      	ldrlt	r3, [r1, r0]
 8003d74:	18c0      	addlt	r0, r0, r3
 8003d76:	4770      	bx	lr

08003d78 <__retarget_lock_acquire_recursive>:
 8003d78:	4770      	bx	lr

08003d7a <__retarget_lock_release_recursive>:
 8003d7a:	4770      	bx	lr

08003d7c <_init>:
 8003d7c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003d7e:	bf00      	nop
 8003d80:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003d82:	bc08      	pop	{r3}
 8003d84:	469e      	mov	lr, r3
 8003d86:	4770      	bx	lr

08003d88 <_fini>:
 8003d88:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003d8a:	bf00      	nop
 8003d8c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003d8e:	bc08      	pop	{r3}
 8003d90:	469e      	mov	lr, r3
 8003d92:	4770      	bx	lr
